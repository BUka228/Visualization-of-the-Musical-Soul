/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Å –Ω–∞—Å—Ç–æ—è—â–∏–º OAuth —Ç–æ–∫–µ–Ω–æ–º
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ Node.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vercel API
 */

const https = require('https');

const OAUTH_TOKEN = 'y0_AgAAAAAj2vgeAAG8XgAAAAEJa-6RAAAdPHm_OlpI_4ludZXEeCSbWupQkA';

function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const req = https.request(url, options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({ status: res.statusCode, data: jsonData, headers: res.headers });
                } catch (error) {
                    resolve({ status: res.statusCode, data: data, headers: res.headers });
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

async function testFixedAPI() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API');
    console.log('================================');
    console.log(`OAuth —Ç–æ–∫–µ–Ω: ${OAUTH_TOKEN.substring(0, 20)}...`);
    console.log('');

    try {
        // –¢–µ—Å—Ç –Ω–∞—à–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API
        console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Vercel API...');
        
        const apiResponse = await makeRequest('https://visualization-of-the-musical-soul.vercel.app/api/getYandexData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ token: OAUTH_TOKEN })
        });

        console.log(`–°—Ç–∞—Ç—É—Å API: ${apiResponse.status}`);
        
        if (apiResponse.status === 200) {
            const data = apiResponse.data;
            console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!');
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`   –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${data.tracks?.length || 0}`);
            console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.metadata?.source}`);
            console.log(`   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${data.metadata?.generated_at}`);
            
            if (data.tracks && data.tracks.length > 0) {
                const availableCount = data.tracks.filter(t => t.available).length;
                const withPreviewCount = data.tracks.filter(t => t.preview_url).length;
                
                console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: ${availableCount}`);
                console.log(`   –° –ø—Ä–µ–≤—å—é: ${withPreviewCount}`);
                console.log('');
                console.log('üéµ –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–∫–æ–≤:');
                
                data.tracks.slice(0, 5).forEach((track, index) => {
                    console.log(`   ${index + 1}. "${track.title}" - ${track.artist}`);
                    console.log(`      –ê–ª—å–±–æ–º: ${track.album}`);
                    console.log(`      –ñ–∞–Ω—Ä: ${track.genre}`);
                    console.log(`      –î–æ—Å—Ç—É–ø–µ–Ω: ${track.available ? '‚úÖ' : '‚ùå'}`);
                    console.log('');
                });
                
                console.log('üéâ –£–°–ü–ï–•! –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!');
                console.log(`üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: ${data.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
            } else {
                console.log('‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç—Ä–µ–∫–æ–≤');
            }
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${apiResponse.status}`);
            console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(apiResponse.data, null, 2));
        }

    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFixedAPI().then(() => {
    console.log('');
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch((error) => {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});