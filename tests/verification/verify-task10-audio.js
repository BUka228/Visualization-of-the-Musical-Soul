// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º—ã (Task 10)

console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º—ã...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
function checkModulesLoaded() {
    const checks = [
        { name: 'SceneManager', condition: window.sceneManager !== undefined },
        { name: 'AudioManager', condition: window.audioManager !== undefined },
        { name: 'InteractionManager', condition: window.sceneManager?.getInteractionManager !== undefined }
    ];

    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:');
    checks.forEach(check => {
        const status = check.condition ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${check.name}: ${check.condition ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    });

    return checks.every(check => check.condition);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å AudioManager
function checkAudioManagerInterface() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AudioManager:');
    
    if (!window.audioManager) {
        console.log('‚ùå AudioManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }

    const requiredMethods = [
        'playPreview',
        'stopPreview', 
        'setVolume',
        'getCurrentTime',
        'isPlaying',
        'getDuration',
        'getProgress',
        'setCurrentTime',
        'pause',
        'resume',
        'setOnPlayStart',
        'setOnPlayEnd',
        'setOnError',
        'dispose'
    ];

    let allMethodsPresent = true;
    requiredMethods.forEach(method => {
        const exists = typeof window.audioManager[method] === 'function';
        const status = exists ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${method}: ${exists ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        if (!exists) allMethodsPresent = false;
    });

    return allMethodsPresent;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å InteractionManager
function checkInteractionIntegration() {
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å InteractionManager:');
    
    const interactionManager = window.sceneManager?.getInteractionManager();
    if (!interactionManager) {
        console.log('‚ùå InteractionManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }

    const hasGetAudioManager = typeof interactionManager.getAudioManager === 'function';
    console.log(`${hasGetAudioManager ? '‚úÖ' : '‚ùå'} getAudioManager: ${hasGetAudioManager ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

    if (hasGetAudioManager) {
        const audioManager = interactionManager.getAudioManager();
        const isAudioManagerValid = audioManager && typeof audioManager.playPreview === 'function';
        console.log(`${isAudioManagerValid ? '‚úÖ' : '‚ùå'} AudioManager –∏–∑ InteractionManager: ${isAudioManagerValid ? '–í–∞–ª–∏–¥–Ω—ã–π' : '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}`);
        return isAudioManagerValid;
    }

    return false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ
function checkAudioErrorHandling() {
    console.log('\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ:');
    
    return new Promise((resolve) => {
        if (!window.audioManager) {
            console.log('‚ùå AudioManager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫');
            resolve(false);
            return;
        }

        let errorHandled = false;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        window.audioManager.setOnError((error) => {
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
            errorHandled = true;
        });

        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        const invalidUrl = 'https://invalid-url-for-testing.com/nonexistent.mp3';
        
        window.audioManager.playPreview(invalidUrl)
            .then(() => {
                console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –±–µ–∑ –æ—à–∏–±–æ–∫');
                resolve(false);
            })
            .catch((error) => {
                console.log('‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ Promise:', error.message);
                
                // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∫–æ–ª–ª–±—ç–∫–∞
                setTimeout(() => {
                    resolve(errorHandled);
                }, 1000);
            });
    });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
function checkVolumeControl() {
    console.log('\nüîä –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é:');
    
    if (!window.audioManager) {
        console.log('‚ùå AudioManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }

    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        const testVolumes = [0, 0.5, 1.0, 1.5, -0.5]; // –í–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        
        testVolumes.forEach(volume => {
            window.audioManager.setVolume(volume);
            console.log(`‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å ${volume} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        });
        
        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏:', error.message);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
function checkPlaybackState() {
    console.log('\n‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:');
    
    if (!window.audioManager) {
        console.log('‚ùå AudioManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }

    try {
        const isPlaying = window.audioManager.isPlaying();
        const currentTime = window.audioManager.getCurrentTime();
        const duration = window.audioManager.getDuration();
        const progress = window.audioManager.getProgress();

        console.log(`‚úÖ isPlaying(): ${isPlaying}`);
        console.log(`‚úÖ getCurrentTime(): ${currentTime}`);
        console.log(`‚úÖ getDuration(): ${duration}`);
        console.log(`‚úÖ getProgress(): ${progress}%`);

        return true;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error.message);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–µ–∫–æ–≤
function checkTrackSelectionIntegration() {
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–µ–∫–æ–≤:');
    
    const interactionManager = window.sceneManager?.getInteractionManager();
    if (!interactionManager) {
        console.log('‚ùå InteractionManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã selectTrack –∏ deselectTrack —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const hasSelectTrack = typeof interactionManager.selectTrack === 'function';
    const hasDeselectTrack = typeof interactionManager.deselectTrack === 'function';

    console.log(`${hasSelectTrack ? '‚úÖ' : '‚ùå'} selectTrack: ${hasSelectTrack ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`${hasDeselectTrack ? '‚úÖ' : '‚ùå'} deselectTrack: ${hasDeselectTrack ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç—Ä–µ–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    const trackObjects = window.sceneManager?.getTrackObjects();
    const hasTrackObjects = trackObjects && trackObjects.length > 0;
    console.log(`${hasTrackObjects ? '‚úÖ' : '‚ùå'} –û–±—ä–µ–∫—Ç—ã —Ç—Ä–µ–∫–æ–≤: ${hasTrackObjects ? `${trackObjects.length} –Ω–∞–π–¥–µ–Ω–æ` : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}`);

    return hasSelectTrack && hasDeselectTrack && hasTrackObjects;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runAudioSystemVerification() {
    console.log('üéµ === –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–£–î–ò–û-–°–ò–°–¢–ï–ú–´ (TASK 10) ===\n');

    const results = {
        modulesLoaded: false,
        audioManagerInterface: false,
        interactionIntegration: false,
        errorHandling: false,
        volumeControl: false,
        playbackState: false,
        trackSelectionIntegration: false
    };

    try {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await new Promise(resolve => {
            if (window.sceneManager && window.audioManager) {
                resolve();
            } else {
                const checkInterval = setInterval(() => {
                    if (window.sceneManager && window.audioManager) {
                        clearInterval(checkInterval);
                        resolve();
                    }
                }, 100);
                
                // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    clearInterval(checkInterval);
                    resolve();
                }, 10000);
            }
        });

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        results.modulesLoaded = checkModulesLoaded();
        results.audioManagerInterface = checkAudioManagerInterface();
        results.interactionIntegration = checkInteractionIntegration();
        results.errorHandling = await checkAudioErrorHandling();
        results.volumeControl = checkVolumeControl();
        results.playbackState = checkPlaybackState();
        results.trackSelectionIntegration = checkTrackSelectionIntegration();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    }

    // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò ===');
    const totalChecks = Object.keys(results).length;
    const passedChecks = Object.values(results).filter(Boolean).length;

    Object.entries(results).forEach(([check, passed]) => {
        const status = passed ? '‚úÖ' : '‚ùå';
        const checkName = check.replace(/([A-Z])/g, ' $1').toLowerCase();
        console.log(`${status} ${checkName}: ${passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û'}`);
    });

    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedChecks}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedChecks === totalChecks) {
        console.log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.');
    }

    return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.runAudioSystemVerification = runAudioSystemVerification;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(() => {
    runAudioSystemVerification();
}, 3000);

console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.');
console.log('üí° –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: runAudioSystemVerification()');