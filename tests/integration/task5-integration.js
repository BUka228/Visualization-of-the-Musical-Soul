/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 5: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∑–∞–¥–∞—á:
 * - –°–æ–∑–¥–∞—Ç—å DataLoader –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–æ–≤
 * - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 * - –î–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞
 * - –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ Python-—Å–∫—Ä–∏–ø—Ç–∞
 */

const fs = require('fs');
const path = require('path');

// –ò–º–∏—Ç–∏—Ä—É–µ–º fetch API –¥–ª—è Node.js
global.fetch = async function(url) {
    try {
        let filePath;
        if (url.includes('music_data.json')) {
            filePath = path.join(__dirname, 'src', 'data', 'music_data.json');
        } else if (url.includes('demo_data.json')) {
            filePath = path.join(__dirname, 'src', 'data', 'demo_data.json');
        } else {
            throw new Error('Unknown URL');
        }

        const data = fs.readFileSync(filePath, 'utf8');
        
        return {
            ok: true,
            json: async () => JSON.parse(data),
            status: 200
        };
    } catch (error) {
        return {
            ok: false,
            status: 404,
            json: async () => { throw new Error('File not found'); }
        };
    }
};

async function testTask5Requirements() {
    console.log('üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–î–ê–ß–ò 5');
    console.log('=' * 50);
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞—á–∏\n');

    let allTestsPassed = true;
    const testResults = [];

    // –ü–æ–¥–∑–∞–¥–∞—á–∞ 1: –°–æ–∑–¥–∞—Ç—å DataLoader –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–æ–≤
    console.log('üìã –ü–û–î–ó–ê–î–ê–ß–ê 1: DataLoader –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞');
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ DataLoader
        const dataLoaderPath = path.join(__dirname, 'src', 'data', 'DataLoader.ts');
        const dataLoaderExists = fs.existsSync(dataLoaderPath);
        
        if (dataLoaderExists) {
            console.log('   ‚úÖ –§–∞–π–ª DataLoader.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            const dataLoaderContent = fs.readFileSync(dataLoaderPath, 'utf8');
            
            const hasLoadMethod = dataLoaderContent.includes('loadMusicData');
            const hasLoadWithResultMethod = dataLoaderContent.includes('loadMusicDataWithResult');
            const hasClassDeclaration = dataLoaderContent.includes('export class DataLoader');
            
            if (hasLoadMethod && hasLoadWithResultMethod && hasClassDeclaration) {
                console.log('   ‚úÖ DataLoader —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏');
                testResults.push({ test: 'DataLoader creation', passed: true });
            } else {
                console.log('   ‚ùå DataLoader –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã');
                testResults.push({ test: 'DataLoader creation', passed: false });
                allTestsPassed = false;
            }
        } else {
            console.log('   ‚ùå –§–∞–π–ª DataLoader.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
            testResults.push({ test: 'DataLoader creation', passed: false });
            allTestsPassed = false;
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DataLoader: ${error.message}`);
        testResults.push({ test: 'DataLoader creation', passed: false });
        allTestsPassed = false;
    }

    // –ü–æ–¥–∑–∞–¥–∞—á–∞ 2: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    console.log('\nüìã –ü–û–î–ó–ê–î–ê–ß–ê 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    try {
        const dataLoaderPath = path.join(__dirname, 'src', 'data', 'DataLoader.ts');
        const dataLoaderContent = fs.readFileSync(dataLoaderPath, 'utf8');
        
        const hasValidation = dataLoaderContent.includes('validateMusicData');
        const hasDetailedValidation = dataLoaderContent.includes('validateMusicDataDetailed');
        const hasTrackValidation = dataLoaderContent.includes('validateTrackStructure');
        const hasErrorHandling = dataLoaderContent.includes('try') && dataLoaderContent.includes('catch');
        
        if (hasValidation && hasDetailedValidation && hasTrackValidation && hasErrorHandling) {
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö');
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫');
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤');
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
            testResults.push({ test: 'Data validation', passed: true });
        } else {
            console.log('   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
            testResults.push({ test: 'Data validation', passed: false });
            allTestsPassed = false;
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (fs.existsSync(path.join(__dirname, 'src', 'data', 'music_data.json'))) {
            const musicData = JSON.parse(fs.readFileSync(path.join(__dirname, 'src', 'data', 'music_data.json'), 'utf8'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            const hasMetadata = musicData.metadata && 
                                typeof musicData.metadata.total_tracks === 'number' &&
                                typeof musicData.metadata.generated_at === 'string' &&
                                typeof musicData.metadata.source === 'string';
            
            const hasTracks = Array.isArray(musicData.tracks) && musicData.tracks.length > 0;
            
            if (hasMetadata && hasTracks) {
                console.log('   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
                const firstTrack = musicData.tracks[0];
                const requiredFields = ['id', 'title', 'artist', 'album', 'duration', 'genre', 'available'];
                const hasAllFields = requiredFields.every(field => field in firstTrack);
                
                if (hasAllFields) {
                    console.log('   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
                } else {
                    console.log('   ‚ö†Ô∏è –í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç—Ä–µ–∫–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è');
                }
            } else {
                console.log('   ‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
            }
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
        testResults.push({ test: 'Data validation', passed: false });
        allTestsPassed = false;
    }

    // –ü–æ–¥–∑–∞–¥–∞—á–∞ 3: –î–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞
    console.log('\nüìã –ü–û–î–ó–ê–î–ê–ß–ê 3: Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
    try {
        const dataLoaderPath = path.join(__dirname, 'src', 'data', 'DataLoader.ts');
        const dataLoaderContent = fs.readFileSync(dataLoaderPath, 'utf8');
        
        const hasDemoDataMethod = dataLoaderContent.includes('loadDemoData');
        const hasMinimalDemoData = dataLoaderContent.includes('createMinimalDemoData');
        const hasDemoDataPath = dataLoaderContent.includes('DEMO_DATA_PATH');
        
        if (hasDemoDataMethod && hasMinimalDemoData && hasDemoDataPath) {
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
            const demoDataExists = fs.existsSync(path.join(__dirname, 'src', 'data', 'demo_data.json'));
            if (demoDataExists) {
                console.log('   ‚úÖ –§–∞–π–ª demo_data.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
                const demoData = JSON.parse(fs.readFileSync(path.join(__dirname, 'src', 'data', 'demo_data.json'), 'utf8'));
                if (demoData.tracks && Array.isArray(demoData.tracks) && demoData.tracks.length > 0) {
                    console.log(`   ‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç ${demoData.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
                    testResults.push({ test: 'Demo data fallback', passed: true });
                } else {
                    console.log('   ‚ùå –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
                    testResults.push({ test: 'Demo data fallback', passed: false });
                    allTestsPassed = false;
                }
            } else {
                console.log('   ‚ö†Ô∏è –§–∞–π–ª demo_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å createMinimalDemoData');
                testResults.push({ test: 'Demo data fallback', passed: true });
            }
        } else {
            console.log('   ‚ùå Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
            testResults.push({ test: 'Demo data fallback', passed: false });
            allTestsPassed = false;
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ fallback: ${error.message}`);
        testResults.push({ test: 'Demo data fallback', passed: false });
        allTestsPassed = false;
    }

    // –ü–æ–¥–∑–∞–¥–∞—á–∞ 4: –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ Python-—Å–∫—Ä–∏–ø—Ç–∞
    console.log('\nüìã –ü–û–î–ó–ê–î–ê–ß–ê 4: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    try {
        const dataLoaderPath = path.join(__dirname, 'src', 'data', 'DataLoader.ts');
        const dataLoaderContent = fs.readFileSync(dataLoaderPath, 'utf8');
        
        const hasUpdateStatus = dataLoaderContent.includes('getDataUpdateStatus');
        const hasUpdateInstructions = dataLoaderContent.includes('getUpdateInstructions');
        const hasDataStatistics = dataLoaderContent.includes('getDataStatistics');
        const hasFreshnessCheck = dataLoaderContent.includes('checkDataFreshness');
        const hasFileExistsCheck = dataLoaderContent.includes('checkDataFileExists');
        
        if (hasUpdateStatus && hasUpdateInstructions && hasDataStatistics && hasFreshnessCheck && hasFileExistsCheck) {
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ getDataUpdateStatus');
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ getUpdateInstructions');
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ getDataStatistics');
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ checkDataFreshness');
            console.log('   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ checkDataFileExists');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ npm —Å–∫—Ä–∏–ø—Ç–∞
            const packageJsonPath = path.join(__dirname, 'package.json');
            if (fs.existsSync(packageJsonPath)) {
                const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                if (packageJson.scripts && packageJson.scripts['collect-data']) {
                    console.log('   ‚úÖ npm —Å–∫—Ä–∏–ø—Ç collect-data –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                    testResults.push({ test: 'Update interface', passed: true });
                } else {
                    console.log('   ‚ùå npm —Å–∫—Ä–∏–ø—Ç collect-data –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    testResults.push({ test: 'Update interface', passed: false });
                    allTestsPassed = false;
                }
            } else {
                console.log('   ‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
                testResults.push({ test: 'Update interface', passed: false });
                allTestsPassed = false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python —Å–∫—Ä–∏–ø—Ç–∞
            const pythonScriptPath = path.join(__dirname, 'scripts', 'collect_yandex_music_data.py');
            if (fs.existsSync(pythonScriptPath)) {
                console.log('   ‚úÖ Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            } else {
                console.log('   ‚ö†Ô∏è Python —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)');
            }
        } else {
            console.log('   ‚ùå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
            testResults.push({ test: 'Update interface', passed: false });
            allTestsPassed = false;
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
        testResults.push({ test: 'Update interface', passed: false });
        allTestsPassed = false;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log('\nüìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º');
    try {
        const indexPath = path.join(__dirname, 'src', 'index.ts');
        if (fs.existsSync(indexPath)) {
            const indexContent = fs.readFileSync(indexPath, 'utf8');
            
            const hasDataLoaderImport = indexContent.includes('import { DataLoader }');
            const usesLoadMusicData = indexContent.includes('DataLoader.loadMusicData');
            const usesCheckFreshness = indexContent.includes('DataLoader.checkDataFreshness');
            
            if (hasDataLoaderImport && usesLoadMusicData && usesCheckFreshness) {
                console.log('   ‚úÖ DataLoader –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
                console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
                console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
                testResults.push({ test: 'Main app integration', passed: true });
            } else {
                console.log('   ‚ùå DataLoader –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
                testResults.push({ test: 'Main app integration', passed: false });
                allTestsPassed = false;
            }
        } else {
            console.log('   ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
        testResults.push({ test: 'Main app integration', passed: false });
        allTestsPassed = false;
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '=' * 50);
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('=' * 50);
    
    testResults.forEach((result, index) => {
        const status = result.passed ? '‚úÖ' : '‚ùå';
        console.log(`${index + 1}. ${result.test}: ${status}`);
    });
    
    const passedTests = testResults.filter(r => r.passed).length;
    const totalTests = testResults.length;
    
    console.log(`\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (allTestsPassed) {
        console.log('\nüéâ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ó–ê–î–ê–ß–ò 5 –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        console.log('\n‚úÖ –ó–∞–¥–∞—á–∞ 5 –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é');
    } else {
        console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        console.log('‚ùå –ó–∞–¥–∞—á–∞ 5 —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    return allTestsPassed;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTask5Requirements()
    .then(success => {
        process.exit(success ? 0 : 1);
    })
    .catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });