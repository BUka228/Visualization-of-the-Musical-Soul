/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ 6 - DataProcessor
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é DataProcessor —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 */

import { DataProcessor } from './src/data/DataProcessor.js';
import { DataLoader } from './src/data/DataLoader.js';

console.log('üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ 6...');

async function testTask6Integration() {
  try {
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ DataProcessor...');
    const processor = new DataProcessor();
    console.log('‚úÖ DataProcessor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataLoader...');
    const loadResult = await DataLoader.loadMusicDataWithResult();
    
    if (!loadResult.success || !loadResult.data) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${loadResult.error}`);
    }
    
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${loadResult.data.tracks.length} —Ç—Ä–µ–∫–æ–≤ (–¥–µ–º–æ: ${loadResult.isDemo})`);

    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏...');
    const convertedTracks = processor.convertYandexTrackData(loadResult.data.tracks);
    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${convertedTracks.length} —Ç—Ä–µ–∫–æ–≤`);

    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è 3D-—Å—Ü–µ–Ω—ã...');
    const processedTracks = processor.processTrackData(convertedTracks);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedTracks.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è 3D-—Å—Ü–µ–Ω—ã`);

    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–Ω—Ä–æ–≤...');
    const genreStats = processor.analyzeGenres(convertedTracks);
    const genreCount = Object.keys(genreStats).length;
    console.log(`‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${genreCount} –∂–∞–Ω—Ä–æ–≤`);

    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    const processingStats = processor.getProcessingStats(processedTracks);
    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è ${processingStats.totalTracks} —Ç—Ä–µ–∫–æ–≤`);

    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    let validationErrors = [];
    
    processedTracks.forEach((track, index) => {
      if (!track.id) validationErrors.push(`–¢—Ä–µ–∫ ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
      if (!track.name) validationErrors.push(`–¢—Ä–µ–∫ ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      if (!track.artist) validationErrors.push(`–¢—Ä–µ–∫ ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å`);
      if (!track.color || !track.color.startsWith('#')) validationErrors.push(`–¢—Ä–µ–∫ ${index}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–≤–µ—Ç`);
      if (track.size < 0.5 || track.size > 3.0) validationErrors.push(`–¢—Ä–µ–∫ ${index}: —Ä–∞–∑–º–µ—Ä –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞`);
      if (!track.position || typeof track.position.x !== 'number') validationErrors.push(`–¢—Ä–µ–∫ ${index}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è`);
      if (track.popularity < 0 || track.popularity > 100) validationErrors.push(`–¢—Ä–µ–∫ ${index}: –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-100`);
    });

    if (validationErrors.length > 0) {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${validationErrors.length} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`);
      validationErrors.slice(0, 5).forEach(error => console.log(`   - ${error}`));
      if (validationErrors.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${validationErrors.length - 5} –æ—à–∏–±–æ–∫`);
      }
    } else {
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
    }

    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ DataProcessor...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const testTrack = convertedTracks[0];
    
    const popularity = processor.calculatePopularity(testTrack);
    console.log(`   - calculatePopularity: ${popularity} (${popularity >= 0 && popularity <= 100 ? '‚úÖ' : '‚ùå'})`);
    
    const size = processor.calculateSize(testTrack);
    console.log(`   - calculateSize: ${size} (${size >= 0.5 && size <= 3.0 ? '‚úÖ' : '‚ùå'})`);
    
    const position = processor.calculatePosition(0, 10, testTrack.genre);
    console.log(`   - calculatePosition: (${position.x.toFixed(1)}, ${position.y.toFixed(1)}, ${position.z.toFixed(1)}) (${position ? '‚úÖ' : '‚ùå'})`);
    
    const color = processor.getGenreColor(testTrack.genre);
    console.log(`   - getGenreColor: ${color} (${color.startsWith('#') ? '‚úÖ' : '‚ùå'})`);

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${processingStats.totalTracks}`);
    console.log(`   - –ñ–∞–Ω—Ä–æ–≤: ${genreCount}`);
    console.log(`   - –°—Ä–µ–¥–Ω—è—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: ${processingStats.averagePopularity}`);
    console.log(`   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${processingStats.averageSize}`);
    console.log(`   - –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤: ${processingStats.sizeRange.min} - ${processingStats.sizeRange.max}`);
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ DataProcessor –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ 3D-—Å—Ü–µ–Ω–µ');
    
    return {
      success: true,
      tracksProcessed: processedTracks.length,
      genresFound: genreCount,
      validationErrors: validationErrors.length
    };

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTask6Integration().then(result => {
  if (result.success) {
    console.log('\nüèÜ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù');
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.tracksProcessed} —Ç—Ä–µ–∫–æ–≤, ${result.genresFound} –∂–∞–Ω—Ä–æ–≤, ${result.validationErrors} –æ—à–∏–±–æ–∫`);
  } else {
    console.log('\nüí• –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
  }
}).catch(error => {
  console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
});