import type { VercelRequest, VercelResponse } from '@vercel/node';

/**
 * –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É CORS –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é
 */
export default async function handler(req: VercelRequest, res: VercelResponse) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Range');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ GET-–∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  try {
    const { url } = req.query;

    if (!url || typeof url !== 'string') {
      return res.status(400).json({ error: 'URL parameter is required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
    if (!url.includes('storage.yandex.net') && !url.includes('music.yandex.net')) {
      return res.status(403).json({ error: 'Only Yandex Music URLs are allowed' });
    }

    console.log('üéµ Proxying audio request to:', url);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å—É
    const headers: Record<string, string> = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Accept': 'audio/*,*/*;q=0.9',
      'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
      'Referer': 'https://music.yandex.ru/',
      'Origin': 'https://music.yandex.ru'
    };

    // –ü–µ—Ä–µ–¥–∞–µ–º Range –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
    if (req.headers.range) {
      headers['Range'] = req.headers.range;
    }

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL
    const response = await fetch(url, {
      method: 'GET',
      headers
    });

    if (!response.ok) {
      console.error(`‚ùå Failed to fetch audio: ${response.status} ${response.statusText}`);
      return res.status(response.status).json({ 
        error: `Failed to fetch audio: ${response.statusText}` 
      });
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    const contentType = response.headers.get('content-type');
    const contentLength = response.headers.get('content-length');
    const acceptRanges = response.headers.get('accept-ranges');
    const contentRange = response.headers.get('content-range');

    if (contentType) {
      res.setHeader('Content-Type', contentType);
    }
    
    if (contentLength) {
      res.setHeader('Content-Length', contentLength);
    }
    
    if (acceptRanges) {
      res.setHeader('Accept-Ranges', acceptRanges);
    }
    
    if (contentRange) {
      res.setHeader('Content-Range', contentRange);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (–≤–∞–∂–Ω–æ –¥–ª—è Range –∑–∞–ø—Ä–æ—Å–æ–≤)
    res.status(response.status);

    // –ü–µ—Ä–µ–¥–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    if (response.body) {
      const reader = response.body.getReader();
      
      try {
        while (true) {
          const { done, value } = await reader.read();
          
          if (done) break;
          
          res.write(Buffer.from(value));
        }
      } finally {
        reader.releaseLock();
      }
    }

    res.end();

  } catch (error) {
    console.error('‚ùå Audio proxy error:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    
    return res.status(500).json({
      error: 'Failed to proxy audio request',
      details: errorMessage
    });
  }
}