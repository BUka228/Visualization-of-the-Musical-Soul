/**
 * –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 */

import { Vector3 } from 'three';
import { Track, ProcessedTrack, GenreStats, DataProcessor as IDataProcessor } from '../types/index.js';
import { YandexTrackData } from './DataLoader.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export class DataProcessor implements IDataProcessor {
  // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∂–∞–Ω—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–¥–æ–∫—É–º–µ–Ω—Ç—É
  private static readonly GENRE_COLORS: { [genre: string]: string } = {
    'metal': '#FF0000',        // –ö—Ä–∞—Å–Ω—ã–π
    'rock': '#FF4500',         // –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
    'indie': '#4169E1',        // –°–∏–Ω–∏–π
    'pop': '#FFD700',          // –ñ–µ–ª—Ç—ã–π
    'pop-rock': '#FFD700',     // –ñ–µ–ª—Ç—ã–π (–∫–∞–∫ –ø–æ–ø)
    'electronic': '#9400D3',   // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'jazz': '#228B22',         // –ó–µ–ª–µ–Ω—ã–π
    'classical': '#F5F5DC',    // –ë–µ–∂–µ–≤—ã–π
    'hip-hop': '#8B4513',      // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
    'rap': '#8B4513',          // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π (–∫–∞–∫ —Ö–∏–ø-—Ö–æ–ø)
    'kpop': '#FF69B4',         // –†–æ–∑–æ–≤—ã–π
    'dance': '#00CED1',        // –ë–∏—Ä—é–∑–æ–≤—ã–π
    'rnb': '#8A2BE2',          // –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π
    'r&b': '#8A2BE2',          // –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π
    'alternative': '#4169E1',   // –°–∏–Ω–∏–π (–∫–∞–∫ –∏–Ω–¥–∏)
    'punk': '#FF0000',         // –ö—Ä–∞—Å–Ω—ã–π (–∫–∞–∫ –º–µ—Ç–∞–ª)
    'blues': '#4682B4',        // –°—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π
    'country': '#DAA520',      // –ó–æ–ª–æ—Ç–∏—Å—Ç–æ-–∂–µ–ª—Ç—ã–π
    'folk': '#8FBC8F',         // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
    'reggae': '#32CD32',       // –õ–∞–π–º-–∑–µ–ª–µ–Ω—ã–π
    'default': '#FFFFFF'       // –ë–µ–ª—ã–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
  private static readonly GALAXY_CONFIG = {
    radius: 50,           // –†–∞–¥–∏—É—Å –≥–∞–ª–∞–∫—Ç–∏–∫–∏
    minSize: 0.5,         // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
    maxSize: 3.0,         // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
    heightVariation: 20,  // –í–∞—Ä–∏–∞—Ü–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ (Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
    genreSeparation: 0.3  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–æ–≤
  };

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  processTrackData(tracks: Track[]): ProcessedTrack[] {
    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${tracks.length} —Ç—Ä–µ–∫–æ–≤...`);

    if (tracks.length === 0) {
      console.warn('‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –ø—É—Å—Ç');
      return [];
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const tracksByGenre = this.groupTracksByGenre(tracks);
    
    const processedTracks: ProcessedTrack[] = [];
    let globalIndex = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
    for (const [genre, genreTracks] of Object.entries(tracksByGenre)) {
      for (let i = 0; i < genreTracks.length; i++) {
        const track = genreTracks[i];
        
        const processedTrack: ProcessedTrack = {
          id: track.id,
          name: track.name,
          artist: track.artist,
          album: track.album,
          genre: track.genre,
          popularity: this.calculatePopularity(track),
          duration: track.duration,
          previewUrl: track.previewUrl,
          color: this.getGenreColor(track.genre),
          size: this.calculateSize(track),
          position: this.calculatePosition(globalIndex, tracks.length, track.genre)
        };

        processedTracks.push(processedTrack);
        globalIndex++;
      }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedTracks.length} —Ç—Ä–µ–∫–æ–≤`);
    return processedTracks;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Track
   */
  convertYandexTrackData(yandexTracks: YandexTrackData[]): Track[] {
    console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${yandexTracks.length} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏...`);

    const tracks: Track[] = yandexTracks
      .filter(track => track.available) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏
      .map(yandexTrack => ({
        id: yandexTrack.id,
        name: yandexTrack.title,
        artist: yandexTrack.artist,
        album: yandexTrack.album,
        genre: this.normalizeGenre(yandexTrack.genre),
        duration: yandexTrack.duration,
        popularity: this.estimatePopularityFromDuration(yandexTrack.duration),
        previewUrl: yandexTrack.preview_url || undefined,
        imageUrl: yandexTrack.cover_url || undefined,
        playCount: undefined // –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
      }));

    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${tracks.length} —Ç—Ä–µ–∫–æ–≤`);
    return tracks;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∂–∞–Ω—Ä—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ç—Ä–µ–∫–æ–≤
   */
  analyzeGenres(tracks: Track[]): GenreStats {
    const genreStats: GenreStats = {};
    const totalTracks = tracks.length;

    if (totalTracks === 0) {
      return genreStats;
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
    const genreCounts: { [genre: string]: number } = {};
    
    tracks.forEach(track => {
      const genre = track.genre || 'unknown';
      genreCounts[genre] = (genreCounts[genre] || 0) + 1;
    });

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
    Object.entries(genreCounts).forEach(([genre, count]) => {
      genreStats[genre] = {
        count: count,
        percentage: Math.round((count / totalTracks) * 100 * 100) / 100, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        color: this.getGenreColor(genre)
      };
    });

    console.log(`üìä –ê–Ω–∞–ª–∏–∑ –∂–∞–Ω—Ä–æ–≤: –Ω–∞–π–¥–µ–Ω–æ ${Object.keys(genreStats).length} –∂–∞–Ω—Ä–æ–≤`);
    return genreStats;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  calculatePopularity(track: Track): number {
    let popularity = 50; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (track.playCount !== undefined) {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∫ —à–∫–∞–ª–µ 0-100
      popularity = Math.min(100, Math.max(0, Math.log10(track.playCount + 1) * 10));
    } else if (track.popularity !== undefined) {
      popularity = track.popularity;
    } else {
      // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—Ä–µ–∫–∏ —á–∞—Å—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω–µ–µ)
      const durationMinutes = track.duration / 60;
      if (durationMinutes < 3) {
        popularity = 70; // –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç—Ä–µ–∫–∏ —á–∞—Å—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã
      } else if (durationMinutes > 6) {
        popularity = 30; // –î–ª–∏–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã
      } else {
        popularity = 50; // –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
      popularity += (Math.random() - 0.5) * 20;
      popularity = Math.max(0, Math.min(100, popularity));
    }

    return Math.round(popularity);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  calculateSize(track: Track): number {
    const popularity = this.calculatePopularity(track);
    const durationMinutes = track.duration / 60;

    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (70% –≤–ª–∏—è–Ω–∏—è)
    const popularityFactor = (popularity / 100) * 0.7;
    
    // –§–∞–∫—Ç–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (30% –≤–ª–∏—è–Ω–∏—è)
    const normalizedDuration = Math.min(1, durationMinutes / 8); // 8 –º–∏–Ω—É—Ç = –º–∞–∫—Å–∏–º—É–º
    const durationFactor = normalizedDuration * 0.3;

    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
    const sizeFactor = popularityFactor + durationFactor;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ä–∞–∑–º–µ—Ä–æ–≤
    const size = DataProcessor.GALAXY_CONFIG.minSize + 
                 sizeFactor * (DataProcessor.GALAXY_CONFIG.maxSize - DataProcessor.GALAXY_CONFIG.minSize);

    return Math.round(size * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –≤ 3D-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
   */
  calculatePosition(index: number, total: number, genre: string): Vector3 {
    // –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –∂–∞–Ω—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const genreHash = this.getGenreHash(genre);
    
    // –ë–∞–∑–æ–≤—ã–µ —É–≥–ª—ã –¥–ª—è —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const phi = (index / total) * Math.PI * 2; // –ê–∑–∏–º—É—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª (0 –¥–æ 2œÄ)
    const theta = Math.acos(1 - 2 * (index / total)); // –ü–æ–ª—è—Ä–Ω—ã–π —É–≥–æ–ª (0 –¥–æ œÄ)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    const genreOffset = (genreHash / 1000) * Math.PI * 2 * DataProcessor.GALAXY_CONFIG.genreSeparation;
    const adjustedPhi = phi + genreOffset;
    
    // –í–∞—Ä–∏–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
    const radiusVariation = 0.8 + Math.random() * 0.4; // 0.8 - 1.2
    const radius = DataProcessor.GALAXY_CONFIG.radius * radiusVariation;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã
    const x = radius * Math.sin(theta) * Math.cos(adjustedPhi);
    const y = radius * Math.cos(theta) + (Math.random() - 0.5) * DataProcessor.GALAXY_CONFIG.heightVariation;
    const z = radius * Math.sin(theta) * Math.sin(adjustedPhi);

    return new Vector3(x, y, z);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
   */
  getGenreColor(genre: string): string {
    const normalizedGenre = this.normalizeGenre(genre);
    return DataProcessor.GENRE_COLORS[normalizedGenre] || DataProcessor.GENRE_COLORS['default'];
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
   */
  private groupTracksByGenre(tracks: Track[]): { [genre: string]: Track[] } {
    const grouped: { [genre: string]: Track[] } = {};
    
    tracks.forEach(track => {
      const genre = track.genre || 'unknown';
      if (!grouped[genre]) {
        grouped[genre] = [];
      }
      grouped[genre].push(track);
    });

    return grouped;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
   */
  private normalizeGenre(genre: string): string {
    if (!genre) return 'unknown';
    
    const normalized = genre.toLowerCase().trim();
    
    // –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
    const genreMapping: { [key: string]: string } = {
      '–ø–æ–ø': 'pop',
      '—Ä–æ–∫': 'rock',
      '–º–µ—Ç–∞–ª': 'metal',
      '–º–µ—Ç–∞–ª–ª': 'metal',
      '–∏–Ω–¥–∏': 'indie',
      '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': 'electronic',
      '–¥–∂–∞–∑': 'jazz',
      '–∫–ª–∞—Å—Å–∏–∫–∞': 'classical',
      '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è': 'classical',
      '—Ö–∏–ø-—Ö–æ–ø': 'hip-hop',
      '—Ö–∏–ø —Ö–æ–ø': 'hip-hop',
      '—Ä—ç–ø': 'rap',
      '—Ä–Ω–±': 'rnb',
      'r&b': 'rnb',
      '–∫–ø–æ–ø': 'kpop',
      'k-pop': 'kpop',
      '—Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è': 'dance',
      '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞': 'alternative',
      '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è': 'alternative',
      '–ø–∞–Ω–∫': 'punk',
      '–±–ª—é–∑': 'blues',
      '–∫–∞–Ω—Ç—Ä–∏': 'country',
      '—Ñ–æ–ª–∫': 'folk',
      '—Ä–µ–≥–≥–∏': 'reggae',
      '–ø–æ–ø-—Ä–æ–∫': 'pop-rock',
      'pop rock': 'pop-rock'
    };

    return genreMapping[normalized] || normalized;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ö—ç—à –¥–ª—è –∂–∞–Ω—Ä–∞ (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
   */
  private getGenreHash(genre: string): number {
    let hash = 0;
    for (let i = 0; i < genre.length; i++) {
      const char = genre.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return Math.abs(hash);
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞ (–¥–ª—è —Ç—Ä–µ–∫–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)
   */
  private estimatePopularityFromDuration(durationSeconds: number): number {
    const durationMinutes = durationSeconds / 60;
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –æ–±—ã—á–Ω–æ 3-4 –º–∏–Ω—É—Ç—ã
    if (durationMinutes >= 3 && durationMinutes <= 4) {
      return 60 + Math.random() * 30; // 60-90
    } else if (durationMinutes >= 2.5 && durationMinutes <= 5) {
      return 40 + Math.random() * 40; // 40-80
    } else {
      return 20 + Math.random() * 40; // 20-60
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  getProcessingStats(tracks: ProcessedTrack[]): {
    totalTracks: number;
    genreDistribution: { [genre: string]: number };
    averagePopularity: number;
    averageSize: number;
    sizeRange: { min: number; max: number };
  } {
    if (tracks.length === 0) {
      return {
        totalTracks: 0,
        genreDistribution: {},
        averagePopularity: 0,
        averageSize: 0,
        sizeRange: { min: 0, max: 0 }
      };
    }

    const genreDistribution: { [genre: string]: number } = {};
    let totalPopularity = 0;
    let totalSize = 0;
    let minSize = tracks[0].size;
    let maxSize = tracks[0].size;

    tracks.forEach(track => {
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∂–∞–Ω—Ä–∞–º
      genreDistribution[track.genre] = (genreDistribution[track.genre] || 0) + 1;
      
      // –°—É–º–º—ã –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      totalPopularity += track.popularity;
      totalSize += track.size;
      
      // –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤
      minSize = Math.min(minSize, track.size);
      maxSize = Math.max(maxSize, track.size);
    });

    return {
      totalTracks: tracks.length,
      genreDistribution,
      averagePopularity: Math.round(totalPopularity / tracks.length),
      averageSize: Math.round((totalSize / tracks.length) * 100) / 100,
      sizeRange: { min: minSize, max: maxSize }
    };
  }
}