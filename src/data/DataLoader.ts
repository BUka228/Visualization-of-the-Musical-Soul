/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
 */

import { ProcessedTrack } from '../types/index.js';

export interface YandexTrackData {
  id: string;
  title: string;
  artist: string;
  album: string;
  duration: number;
  genre: string;
  cover_url?: string;
  preview_url?: string;
  available: boolean;
}

export interface MusicDataFile {
  metadata: {
    total_tracks: number;
    generated_at: string;
    source: string;
  };
  tracks: YandexTrackData[];
}

export interface DataLoadResult {
  success: boolean;
  data?: MusicDataFile;
  error?: string;
  isDemo: boolean;
  freshness?: 'fresh' | 'stale' | 'unknown';
}

export interface DataUpdateStatus {
  canUpdate: boolean;
  lastUpdate?: Date;
  hoursOld?: number;
  instructions: string;
}

/**
 * –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
 */
export class DataLoader {
  private static readonly DATA_FILE_PATH = '/src/data/music_data.json';
  private static readonly DEMO_DATA_PATH = '/src/data/demo_data.json';

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
   */
  static async loadMusicDataWithResult(): Promise<DataLoadResult> {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const response = await fetch(this.DATA_FILE_PATH);
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
        const demoData = await this.loadDemoData();
        return {
          success: true,
          data: demoData,
          isDemo: true,
          freshness: 'unknown'
        };
      }

      const data: MusicDataFile = await response.json();
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      const validationResult = this.validateMusicDataDetailed(data);
      if (!validationResult.isValid) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ${validationResult.errors.join(', ')}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      const freshness = await this.getDataFreshness(data);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
      return {
        success: true,
        data: data,
        isDemo: false,
        freshness: freshness
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...');
      
      try {
        const demoData = await this.loadDemoData();
        return {
          success: true,
          data: demoData,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          isDemo: true,
          freshness: 'unknown'
        };
      } catch (demoError) {
        return {
          success: false,
          error: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ, –Ω–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ: ${demoError}`,
          isDemo: true,
          freshness: 'unknown'
        };
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
   */
  static async loadMusicData(): Promise<MusicDataFile> {
    const result = await this.loadMusicDataWithResult();
    if (!result.success || !result.data) {
      throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
    return result.data;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private static async loadDemoData(): Promise<MusicDataFile> {
    try {
      const response = await fetch(this.DEMO_DATA_PATH);
      
      if (!response.ok) {
        // –ï—Å–ª–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∂–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
        return this.createMinimalDemoData();
      }

      const data: MusicDataFile = await response.json();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ: ${data.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
      return data;

    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä');
      return this.createMinimalDemoData();
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
   */
  private static createMinimalDemoData(): MusicDataFile {
    const demoTracks: YandexTrackData[] = [];

    return {
      metadata: {
        total_tracks: 0,
        generated_at: new Date().toISOString(),
        source: 'Empty Demo Data'
      },
      tracks: demoTracks
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private static validateMusicData(data: any): data is MusicDataFile {
    const result = this.validateMusicDataDetailed(data);
    return result.isValid;
  }

  /**
   * –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
   */
  private static validateMusicDataDetailed(data: any): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (!data || typeof data !== 'object') {
      errors.push('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
      return { isValid: false, errors };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if (!data.metadata || typeof data.metadata !== 'object') {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ');
    } else {
      if (typeof data.metadata.total_tracks !== 'number') {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ total_tracks –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
      }
      if (typeof data.metadata.generated_at !== 'string') {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ generated_at –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
      }
      if (typeof data.metadata.source !== 'string') {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ source –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–æ–≤
    if (!data.tracks || !Array.isArray(data.tracks)) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤');
      return { isValid: false, errors };
    }

    if (data.tracks.length === 0) {
      // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      console.warn('‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –ø—É—Å—Ç');
      return { isValid: true, errors };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–µ–∫–æ–≤ (–ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    const sampleTracks = data.tracks.slice(0, Math.min(5, data.tracks.length));
    for (let i = 0; i < sampleTracks.length; i++) {
      const track = sampleTracks[i];
      const trackErrors = this.validateTrackStructure(track, i);
      errors.push(...trackErrors);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–∫–æ–≤
    if (data.metadata && data.metadata.total_tracks !== data.tracks.length) {
      errors.push(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–∫–æ–≤: –∑–∞—è–≤–ª–µ–Ω–æ ${data.metadata.total_tracks}, –Ω–∞–π–¥–µ–Ω–æ ${data.tracks.length}`);
    }

    return { isValid: errors.length === 0, errors };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
   */
  private static validateTrackStructure(track: any, index: number): string[] {
    const errors: string[] = [];
    const prefix = `–¢—Ä–µ–∫ ${index + 1}:`;

    if (!track || typeof track !== 'object') {
      errors.push(`${prefix} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º`);
      return errors;
    }

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = ['id', 'title', 'artist', 'album', 'duration', 'genre', 'available'];
    for (const field of requiredFields) {
      if (!(field in track)) {
        errors.push(`${prefix} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '${field}'`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if (track.id && typeof track.id !== 'string') {
      errors.push(`${prefix} –ø–æ–ª–µ 'id' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
    }
    if (track.title && typeof track.title !== 'string') {
      errors.push(`${prefix} –ø–æ–ª–µ 'title' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
    }
    if (track.artist && typeof track.artist !== 'string') {
      errors.push(`${prefix} –ø–æ–ª–µ 'artist' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
    }
    if (track.album && typeof track.album !== 'string') {
      errors.push(`${prefix} –ø–æ–ª–µ 'album' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
    }
    if (track.duration && typeof track.duration !== 'number') {
      errors.push(`${prefix} –ø–æ–ª–µ 'duration' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
    }
    if (track.genre && typeof track.genre !== 'string') {
      errors.push(`${prefix} –ø–æ–ª–µ 'genre' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
    }
    if (track.available && typeof track.available !== 'boolean') {
      errors.push(`${prefix} –ø–æ–ª–µ 'available' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (track.cover_url && typeof track.cover_url !== 'string') {
      errors.push(`${prefix} –ø–æ–ª–µ 'cover_url' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
    }
    if (track.preview_url && track.preview_url !== null && typeof track.preview_url !== 'string') {
      errors.push(`${prefix} –ø–æ–ª–µ 'preview_url' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ null`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    if (track.duration && track.duration < 0) {
      errors.push(`${prefix} –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π`);
    }
    if (track.title && track.title.trim().length === 0) {
      errors.push(`${prefix} –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
    }
    if (track.artist && track.artist.trim().length === 0) {
      errors.push(`${prefix} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
    }

    return errors;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  static async checkDataFreshness(): Promise<boolean> {
    try {
      const response = await fetch(this.DATA_FILE_PATH);
      if (!response.ok) return false;

      const data: MusicDataFile = await response.json();
      const generatedAt = new Date(data.metadata.generated_at);
      const now = new Date();
      const hoursDiff = (now.getTime() - generatedAt.getTime()) / (1000 * 60 * 60);

      // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏, –µ—Å–ª–∏ –∏–º –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤
      return hoursDiff < 24;
    } catch {
      return false;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
   */
  private static async getDataFreshness(data: MusicDataFile): Promise<'fresh' | 'stale' | 'unknown'> {
    try {
      const generatedAt = new Date(data.metadata.generated_at);
      const now = new Date();
      const hoursDiff = (now.getTime() - generatedAt.getTime()) / (1000 * 60 * 60);

      if (hoursDiff < 24) {
        return 'fresh';
      } else {
        return 'stale';
      }
    } catch {
      return 'unknown';
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  static async getDataUpdateStatus(): Promise<DataUpdateStatus> {
    try {
      const response = await fetch(this.DATA_FILE_PATH);
      
      if (!response.ok) {
        return {
          canUpdate: true,
          instructions: this.getUpdateInstructions()
        };
      }

      const data: MusicDataFile = await response.json();
      const generatedAt = new Date(data.metadata.generated_at);
      const now = new Date();
      const hoursDiff = (now.getTime() - generatedAt.getTime()) / (1000 * 60 * 60);

      return {
        canUpdate: true,
        lastUpdate: generatedAt,
        hoursOld: Math.round(hoursDiff * 100) / 100,
        instructions: this.getUpdateInstructions()
      };

    } catch (error) {
      return {
        canUpdate: true,
        instructions: this.getUpdateInstructions()
      };
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
   */
  static getUpdateInstructions(): string {
    return `
–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏:

1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: npm run collect-data
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ:
python scripts/collect_yandex_music_data.py
    `.trim();
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  static async getDataStatistics(): Promise<{
    totalTracks: number;
    genres: { [genre: string]: number };
    source: string;
    lastUpdate: string;
    isDemo: boolean;
  } | null> {
    try {
      const result = await this.loadMusicDataWithResult();
      
      if (!result.success || !result.data) {
        return null;
      }

      const data = result.data;
      const genres: { [genre: string]: number } = {};

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
      for (const track of data.tracks) {
        const genre = track.genre || 'unknown';
        genres[genre] = (genres[genre] || 0) + 1;
      }

      return {
        totalTracks: data.tracks.length,
        genres: genres,
        source: data.metadata.source,
        lastUpdate: data.metadata.generated_at,
        isDemo: result.isDemo
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
   */
  static async checkDataFileExists(): Promise<boolean> {
    try {
      const response = await fetch(this.DATA_FILE_PATH, { method: 'HEAD' });
      return response.ok;
    } catch {
      return false;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç YandexTrackData –≤ ProcessedTrack (–±–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
   */
  static convertToProcessedTrack(yandexTrack: YandexTrackData, index: number = 0): ProcessedTrack {
    // –ë–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∂–∞–Ω—Ä–æ–≤ (–±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ DataProcessor)
    const genreColors: { [key: string]: string } = {
      'rock': '#FF4500',
      'pop': '#FFD700',
      'indie': '#4169E1',
      'metal': '#FF0000',
      'electronic': '#9400D3',
      'jazz': '#228B22',
      'classical': '#F5F5DC',
      'hip-hop': '#8B4513',
      'kpop': '#FF69B4',
      'dance': '#00CED1',
      'rnb': '#8A2BE2',
      'default': '#FFFFFF'
    };

    const color = genreColors[yandexTrack.genre] || genreColors['default'];
    
    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ DataProcessor)
    const baseSize = Math.max(0.5, Math.min(3.0, yandexTrack.duration / 100));
    
    // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ DataProcessor)
    const angle = (index / 100) * Math.PI * 2;
    const radius = 20 + Math.random() * 30;
    const position = {
      x: Math.cos(angle) * radius,
      y: (Math.random() - 0.5) * 20,
      z: Math.sin(angle) * radius
    } as any; // –í—Ä–µ–º–µ–Ω–Ω–æ –∫–∞–∫ any, —Ç–∞–∫ –∫–∞–∫ Vector3 –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ DataProcessor

    return {
      id: yandexTrack.id,
      name: yandexTrack.title,
      artist: yandexTrack.artist,
      album: yandexTrack.album,
      genre: yandexTrack.genre,
      popularity: 50, // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ DataProcessor
      duration: yandexTrack.duration,
      previewUrl: yandexTrack.preview_url || undefined,
      color: color,
      size: baseSize,
      position: position
    };
  }
}