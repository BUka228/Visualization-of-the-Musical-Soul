import { AppState } from '../types';
import { VisualMode } from '../soul-galaxy/types';

export class UIManager {
  private initialized: boolean = false;
  private onVisualModeChange?: (mode: VisualMode) => void;

  initialize(): void {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI Manager...');
    this.initialized = true;
  }

  createDataCollectionButton(): void {
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if (!document.getElementById('collect-data-button')) {
      const button = document.createElement('button');
      button.id = 'collect-data-button';
      button.textContent = '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
      button.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4fc3f7;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        z-index: 1000;
        font-size: 14px;
      `;
      document.body.appendChild(button);
    }
  }

  createVisualModeSwitcher(): void {
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if (!document.getElementById('visual-mode-switcher')) {
      const container = document.createElement('div');
      container.id = 'visual-mode-switcher';
      container.style.cssText = `
        position: fixed;
        top: 20px;
        left: 20px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        border: 1px solid #333;
        border-radius: 8px;
        padding: 15px;
        z-index: 1000;
        font-family: Arial, sans-serif;
      `;

      container.innerHTML = `
        <div style="margin-bottom: 10px; font-weight: bold; color: #4fc3f7;">
          üåå –†–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        </div>
        <div style="display: flex; gap: 10px;">
          <button id="classic-mode-btn" style="
            background: #4fc3f7;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
          ">
            üåü –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π
          </button>
          <button id="soul-galaxy-mode-btn" style="
            background: #333;
            color: white;
            border: 1px solid #666;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
          ">
            üîÆ Soul Galaxy
          </button>
        </div>
      `;

      document.body.appendChild(container);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      const classicBtn = document.getElementById('classic-mode-btn');
      const soulGalaxyBtn = document.getElementById('soul-galaxy-mode-btn');

      if (classicBtn && soulGalaxyBtn) {
        classicBtn.addEventListener('click', () => {
          this.setActiveMode(VisualMode.CLASSIC);
          if (this.onVisualModeChange) {
            this.onVisualModeChange(VisualMode.CLASSIC);
          }
        });

        soulGalaxyBtn.addEventListener('click', () => {
          this.setActiveMode(VisualMode.SOUL_GALAXY);
          if (this.onVisualModeChange) {
            this.onVisualModeChange(VisualMode.SOUL_GALAXY);
          }
        });
      }
    }
  }

  private setActiveMode(mode: VisualMode): void {
    const classicBtn = document.getElementById('classic-mode-btn');
    const soulGalaxyBtn = document.getElementById('soul-galaxy-mode-btn');

    if (classicBtn && soulGalaxyBtn) {
      // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
      classicBtn.style.background = '#333';
      classicBtn.style.border = '1px solid #666';
      soulGalaxyBtn.style.background = '#333';
      soulGalaxyBtn.style.border = '1px solid #666';

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      if (mode === VisualMode.CLASSIC) {
        classicBtn.style.background = '#4fc3f7';
        classicBtn.style.border = 'none';
      } else {
        soulGalaxyBtn.style.background = '#9c27b0';
        soulGalaxyBtn.style.border = 'none';
      }
    }
  }

  setOnVisualModeChange(callback: (mode: VisualMode) => void): void {
    this.onVisualModeChange = callback;
  }

  updateAppState(state: AppState): void {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI:', state);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    // –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  }

  dispose(): void {
    console.log('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ UI Manager...');
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const collectButton = document.getElementById('collect-data-button');
    if (collectButton) {
      collectButton.remove();
    }
    
    const visualModeSwitcher = document.getElementById('visual-mode-switcher');
    if (visualModeSwitcher) {
      visualModeSwitcher.remove();
    }
    
    this.initialized = false;
  }
}