/**
 * –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
 */

import { DataLoader } from '../data/DataLoader';

export class BurgerMenu {
  private isOpen = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
   */
  initialize(): void {
    this.createMenuButton();
    this.createMenuPanel();
    this.setupEventListeners();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
   */
  private createMenuButton(): void {
    const button = document.createElement('button');
    button.id = 'burger-menu-btn';
    button.innerHTML = '‚ò∞';
    button.style.cssText = `
      position: fixed;
      top: 20px;
      left: 20px;
      width: 50px;
      height: 50px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 8px;
      color: white;
      font-size: 20px;
      cursor: pointer;
      z-index: 1000;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    `;

    button.addEventListener('mouseenter', () => {
      button.style.background = 'rgba(0, 0, 0, 0.9)';
      button.style.borderColor = 'rgba(255, 255, 255, 0.5)';
    });

    button.addEventListener('mouseleave', () => {
      button.style.background = 'rgba(0, 0, 0, 0.8)';
      button.style.borderColor = 'rgba(255, 255, 255, 0.3)';
    });

    document.body.appendChild(button);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –º–µ–Ω—é
   */
  private createMenuPanel(): void {
    const panel = document.createElement('div');
    panel.id = 'burger-menu-panel';
    panel.style.cssText = `
      position: fixed;
      top: 0;
      left: -350px;
      width: 350px;
      height: 100vh;
      background: rgba(0, 0, 0, 0.95);
      border-right: 1px solid rgba(255, 255, 255, 0.2);
      z-index: 999;
      transition: left 0.3s ease;
      overflow-y: auto;
      font-family: 'Arial', sans-serif;
    `;

    panel.innerHTML = this.getMenuHTML();
    document.body.appendChild(panel);

    // –°–æ–∑–¥–∞–µ–º overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    const overlay = document.createElement('div');
    overlay.id = 'burger-menu-overlay';
    overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 998;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    `;

    document.body.appendChild(overlay);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –º–µ–Ω—é
   */
  private getMenuHTML(): string {
    return `
      <div style="padding: 20px;">
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; padding-bottom: 15px; border-bottom: 1px solid rgba(255, 255, 255, 0.2);">
          <h2 style="color: #4fc3f7; margin: 0; font-size: 24px;">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <button id="close-menu-btn" style="
            background: none;
            border: none;
            color: #ccc;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
          ">√ó</button>
        </div>

        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö -->
        <div style="margin-bottom: 30px;">
          <h3 style="color: #fff; margin: 0 0 15px 0; font-size: 18px;">üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
          <div id="data-status-section">
            ${this.getDataStatusHTML()}
          </div>
        </div>

        <!-- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ -->
        <div style="margin-bottom: 30px;">
          <details>
            <summary style="color: #4fc3f7; cursor: pointer; font-weight: bold; margin-bottom: 10px;">
              üìã –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã
            </summary>
            <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 6px; margin-top: 10px;">
              <p style="color: #ccc; line-height: 1.6; margin: 0 0 10px 0; font-size: 14px;">
                –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
              </p>
              <div style="background: rgba(0, 0, 0, 0.3); padding: 10px; border-radius: 4px; font-family: monospace; font-size: 12px; color: #a0a0a0; margin: 10px 0;">
üìÅ –ú–æ—è –º—É–∑—ã–∫–∞/<br>
‚îú‚îÄ‚îÄ üìÑ metadata.json<br>
‚îî‚îÄ‚îÄ üìÅ audio/<br>
&nbsp;&nbsp;&nbsp;&nbsp;‚îú‚îÄ‚îÄ üéµ track1.mp3<br>
&nbsp;&nbsp;&nbsp;&nbsp;‚îî‚îÄ‚îÄ üéµ track2.mp3
              </div>
              <ul style="color: #ccc; line-height: 1.6; margin: 10px 0 0 20px; font-size: 14px;">
                <li>metadata.json - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–∞—Ö</li>
                <li>audio/ - –ø–∞–ø–∫–∞ —Å MP3 —Ñ–∞–π–ª–∞–º–∏</li>
                <li>–ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ = ID –≤ metadata.json</li>
              </ul>
            </div>
          </details>
        </div>

        <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -->
        <div style="margin-bottom: 30px;">
          <h3 style="color: #fff; margin: 0 0 15px 0; font-size: 18px;">üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
          <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 6px;">
            <div style="color: #ccc; font-size: 14px; line-height: 1.6;">
              <p style="margin: 0 0 8px 0;"><strong>R</strong> - –°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã</p>
              <p style="margin: 0 0 8px 0;"><strong>–ü—Ä–æ–±–µ–ª</strong> - –ü–∞—É–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏</p>
              <p style="margin: 0 0 8px 0;"><strong>–ö–ª–∏–∫ –ø–æ —Ç—Ä–µ–∫—É</strong> - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ</p>
              <p style="margin: 0;"><strong>–ö–æ–ª–µ—Å–æ –º—ã—à–∏</strong> - –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ</p>
            </div>
          </div>
        </div>

        <!-- –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ -->
        <div style="margin-bottom: 20px;">
          <details>
            <summary style="color: #4fc3f7; cursor: pointer; font-weight: bold; margin-bottom: 10px;">
              ‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            </summary>
            <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 6px; margin-top: 10px;">
              <p style="color: #ccc; line-height: 1.6; margin: 0; font-size: 14px;">
                <strong>Music Galaxy 3D</strong><br>
                –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
              </p>
              <p style="color: #999; font-size: 12px; margin: 10px 0 0 0;">
                –í–µ—Ä—Å–∏—è: 2.0.0 (–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)<br>
                –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ
              </p>
            </div>
          </details>
        </div>
      </div>
    `;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  private getDataStatusHTML(): string {
    return `
      <div id="data-status-content">
        <div style="color: #ccc; text-align: center; padding: 20px;">
          –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö...
        </div>
      </div>
    `;
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventListeners(): void {
    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    const menuBtn = document.getElementById('burger-menu-btn');
    const closeBtn = document.getElementById('close-menu-btn');
    const overlay = document.getElementById('burger-menu-overlay');

    if (menuBtn) {
      menuBtn.addEventListener('click', () => this.toggleMenu());
    }

    if (closeBtn) {
      closeBtn.addEventListener('click', () => this.closeMenu());
    }

    if (overlay) {
      overlay.addEventListener('click', () => this.closeMenu());
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
    this.loadDataStatus();
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
   */
  private toggleMenu(): void {
    if (this.isOpen) {
      this.closeMenu();
    } else {
      this.openMenu();
    }
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é
   */
  private openMenu(): void {
    const panel = document.getElementById('burger-menu-panel');
    const overlay = document.getElementById('burger-menu-overlay');

    if (panel && overlay) {
      panel.style.left = '0';
      overlay.style.opacity = '1';
      overlay.style.visibility = 'visible';
      this.isOpen = true;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
      this.updateMenuContent();
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é
   */
  private closeMenu(): void {
    const panel = document.getElementById('burger-menu-panel');
    const overlay = document.getElementById('burger-menu-overlay');

    if (panel && overlay) {
      panel.style.left = '-350px';
      overlay.style.opacity = '0';
      overlay.style.visibility = 'hidden';
      this.isOpen = false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω—é
   */
  private updateMenuContent(): void {
    const panel = document.getElementById('burger-menu-panel');
    if (panel) {
      panel.innerHTML = this.getMenuHTML();
      this.loadDataStatus();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
   */
  private async loadDataStatus(): Promise<void> {
    const statusContent = document.getElementById('data-status-content');
    if (!statusContent) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const localStats = await DataLoader.getLocalDataStatistics();
      
      if (localStats) {
        const totalDurationMinutes = Math.round(localStats.totalDuration / 60);
        const avgDurationMinutes = Math.round(localStats.averageDuration / 60);
        
        statusContent.innerHTML = `
          <div style="background: rgba(76, 175, 80, 0.2); border: 1px solid rgba(76, 175, 80, 0.5); border-radius: 8px; padding: 15px; margin-bottom: 15px;">
            <p style="color: #4caf50; margin: 0 0 10px 0; font-weight: bold;">‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
            <div style="color: #ccc; font-size: 14px;">
              <p style="margin: 0;">–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${localStats.totalTracks}</p>
              <p style="margin: 5px 0 0 0;">–î–æ—Å—Ç—É–ø–Ω–æ: ${localStats.availableTracks}</p>
              <p style="margin: 5px 0 0 0;">–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${totalDurationMinutes} –º–∏–Ω</p>
              <p style="margin: 5px 0 0 0;">–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgDurationMinutes} –º–∏–Ω</p>
            </div>
          </div>
          
          <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º -->
          <div style="background: rgba(255, 255, 255, 0.05); border-radius: 8px; padding: 15px;">
            <h4 style="color: #4fc3f7; margin: 0 0 10px 0; font-size: 16px;">üé® –ñ–∞–Ω—Ä—ã</h4>
            <div style="max-height: 150px; overflow-y: auto;">
              ${this.getGenreStatsHTML(localStats.genres)}
            </div>
          </div>
        `;
      } else {
        // Fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–∞–Ω–Ω—ã–º –∏–ª–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
        const stats = await DataLoader.getDataStatistics();
        
        if (stats) {
          statusContent.innerHTML = `
            <div style="background: rgba(255, 193, 7, 0.2); border: 1px solid rgba(255, 193, 7, 0.5); border-radius: 8px; padding: 15px; margin-bottom: 15px;">
              <p style="color: #ffc107; margin: 0 0 10px 0; font-weight: bold;">‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ</p>
              <div style="color: #ccc; font-size: 14px;">
                <p style="margin: 0;">–¢—Ä–µ–∫–æ–≤: ${stats.totalTracks}</p>
                <p style="margin: 5px 0 0 0;">–ò—Å—Ç–æ—á–Ω–∏–∫: ${stats.isDemo ? '–î–µ–º–æ' : '–ö—ç—à'}</p>
              </div>
            </div>
            <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 6px;">
              <p style="color: #ccc; font-size: 14px; margin: 0; line-height: 1.6;">
                üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –≤–∞—à–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥-—Å—Ç—Ä–∞–Ω–∏—Ü–µ.
              </p>
            </div>
          `;
        } else {
          statusContent.innerHTML = `
            <div style="background: rgba(244, 67, 54, 0.2); border: 1px solid rgba(244, 67, 54, 0.5); border-radius: 8px; padding: 15px;">
              <p style="color: #f44336; margin: 0 0 10px 0; font-weight: bold;">‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p style="color: #ccc; margin: 0; font-size: 14px;">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º—É–∑—ã–∫–æ–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</p>
            </div>
          `;
        }
      }
    } catch (error) {
      statusContent.innerHTML = `
        <div style="background: rgba(244, 67, 54, 0.2); border: 1px solid rgba(244, 67, 54, 0.5); border-radius: 8px; padding: 15px;">
          <p style="color: #f44336; margin: 0 0 10px 0; font-weight: bold;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
          <p style="color: #ccc; margin: 0; font-size: 14px;">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
      `;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
   */
  private getGenreStatsHTML(genres: { [genre: string]: number }): string {
    const sortedGenres = Object.entries(genres)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∂–∞–Ω—Ä–æ–≤

    if (sortedGenres.length === 0) {
      return '<p style="color: #999; margin: 0; font-size: 14px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–Ω—Ä–∞—Ö</p>';
    }

    return sortedGenres.map(([genre, count]) => `
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;">
        <span style="color: #ccc; font-size: 14px;">${genre}</span>
        <span style="color: #4fc3f7; font-size: 14px; font-weight: bold;">${count}</span>
      </div>
    `).join('');
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –º–µ–Ω—é
   */
  dispose(): void {
    const elements = [
      'burger-menu-btn',
      'burger-menu-panel', 
      'burger-menu-overlay'
    ];

    elements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.remove();
      }
    });
  }
}