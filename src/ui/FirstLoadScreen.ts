/**
 * –≠–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ç–æ–∫–µ–Ω–∞
 */

import { TokenManager } from '../auth/TokenManager';
import { DataCollector, CollectionProgress, CollectionResult } from '../data/DataCollector';
import { DataLoader } from '../data/DataLoader';

export class FirstLoadScreen {
  private container: HTMLElement;
  private collector?: DataCollector;

  constructor(container: HTMLElement) {
    this.container = container;
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async show(): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const hasData = await this.checkExistingData();
    
    if (hasData.hasValidData && !hasData.needsUpdate) {
      return false; // –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —ç–∫—Ä–∞–Ω –Ω–µ –Ω—É–∂–µ–Ω
    }

    this.render(hasData);
    return true;
  }

  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
   */
  hide(): void {
    const screen = document.getElementById('first-load-screen');
    if (screen) {
      screen.remove();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  private async checkExistingData(): Promise<{
    hasValidData: boolean;
    needsUpdate: boolean;
    dataAge?: number;
    tracksCount?: number;
    hasToken: boolean;
    tokenValid: boolean;
  }> {
    try {
      const dataExists = await DataLoader.checkDataFileExists();
      const tokenInfo = TokenManager.getTokenInfo();
      
      if (!dataExists) {
        return {
          hasValidData: false,
          needsUpdate: true,
          hasToken: tokenInfo.hasToken,
          tokenValid: tokenInfo.isValid
        };
      }

      const dataResult = await DataLoader.loadMusicDataWithResult();
      const isFresh = await DataLoader.checkDataFreshness();
      
      if (dataResult.success && dataResult.data) {
        const ageHours = dataResult.data.metadata.generated_at ? 
          (Date.now() - new Date(dataResult.data.metadata.generated_at).getTime()) / (1000 * 60 * 60) : 
          999;

        return {
          hasValidData: true,
          needsUpdate: !isFresh || ageHours > 24,
          dataAge: Math.round(ageHours * 100) / 100,
          tracksCount: dataResult.data.tracks.length,
          hasToken: tokenInfo.hasToken,
          tokenValid: tokenInfo.isValid
        };
      }

      return {
        hasValidData: false,
        needsUpdate: true,
        hasToken: tokenInfo.hasToken,
        tokenValid: tokenInfo.isValid
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        hasValidData: false,
        needsUpdate: true,
        hasToken: false,
        tokenValid: false
      };
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω
   */
  private render(dataStatus: any): void {
    const screen = document.createElement('div');
    screen.id = 'first-load-screen';
    screen.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      font-family: 'Arial', sans-serif;
    `;

    screen.innerHTML = this.getScreenHTML(dataStatus);
    document.body.appendChild(screen);

    this.setupEventListeners();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è —ç–∫—Ä–∞–Ω–∞
   */
  private getScreenHTML(dataStatus: any): string {
    const title = dataStatus.hasValidData ? 
      'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö' : 
      'üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Music Galaxy 3D';

    const subtitle = dataStatus.hasValidData ?
      `–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ (${dataStatus.dataAge?.toFixed(1)} —á. –Ω–∞–∑–∞–¥). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.` :
      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏';

    const tokenSection = this.getTokenSectionHTML(dataStatus);
    const actionSection = this.getActionSectionHTML(dataStatus);

    return `
      <div style="
        background: rgba(0, 0, 0, 0.9);
        border-radius: 16px;
        padding: 40px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
      ">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #4fc3f7; margin: 0 0 10px 0; font-size: 28px;">
            ${title}
          </h1>
          <p style="color: #ccc; margin: 0; font-size: 16px; line-height: 1.5;">
            ${subtitle}
          </p>
        </div>

        ${tokenSection}
        ${actionSection}

        <div id="progress-section" style="display: none; margin-top: 30px;">
          <div style="background: rgba(255, 255, 255, 0.1); border-radius: 8px; padding: 20px;">
            <div id="progress-message" style="color: #fff; margin-bottom: 15px; font-size: 16px;"></div>
            <div style="background: rgba(255, 255, 255, 0.2); border-radius: 10px; height: 20px; overflow: hidden;">
              <div id="progress-bar" style="
                background: linear-gradient(90deg, #4fc3f7, #29b6f6);
                height: 100%;
                width: 0%;
                transition: width 0.3s ease;
                border-radius: 10px;
              "></div>
            </div>
            <div id="progress-details" style="color: #ccc; margin-top: 10px; font-size: 14px;"></div>
          </div>
        </div>

        <div id="result-section" style="display: none; margin-top: 30px;">
          <div id="result-content"></div>
        </div>

        ${dataStatus.hasValidData ? this.getSkipSectionHTML() : ''}
      </div>
    `;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
   */
  private getTokenSectionHTML(dataStatus: any): string {
    const tokenInfo = TokenManager.getTokenInfo();
    const isElectron = typeof window !== 'undefined' && (window as any).electronAPI !== undefined;
    
    if (tokenInfo.hasToken && tokenInfo.isValid) {
      const formattedToken = TokenManager.formatTokenForDisplay(TokenManager.getToken()?.token || '');
      return `
        <div style="margin-bottom: 30px;">
          <div style="background: rgba(76, 175, 80, 0.2); border: 1px solid rgba(76, 175, 80, 0.5); border-radius: 8px; padding: 15px;">
            <h3 style="color: #4caf50; margin: 0 0 10px 0; font-size: 18px;">‚úÖ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω</h3>
            <p style="color: #ccc; margin: 0; font-size: 14px;">
              –¢–æ–∫–µ–Ω: ${formattedToken}<br>
              –°–æ–∑–¥–∞–Ω: ${tokenInfo.createdAt?.toLocaleString('ru')}<br>
              –í–æ–∑—Ä–∞—Å—Ç: ${tokenInfo.ageHours?.toFixed(1)} —á–∞—Å–æ–≤
            </p>
            <button id="change-token-btn" style="
              background: transparent;
              border: 1px solid rgba(255, 255, 255, 0.3);
              color: #ccc;
              padding: 8px 16px;
              border-radius: 4px;
              cursor: pointer;
              margin-top: 10px;
              font-size: 12px;
            ">
              –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
            </button>
          </div>
        </div>
      `;
    }

    // –î–ª—è Electron –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (isElectron) {
      return `
        <div style="margin-bottom: 30px;">
          <div style="background: rgba(255, 193, 7, 0.2); border: 1px solid rgba(255, 193, 7, 0.5); border-radius: 8px; padding: 15px; margin-bottom: 20px;">
            <h3 style="color: #ffc107; margin: 0 0 10px 0; font-size: 18px;">üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
            <p style="color: #ccc; margin: 0; font-size: 14px; line-height: 1.5;">
              ${tokenInfo.hasToken ? 
                `–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${tokenInfo.error}` : 
                '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É'
              }
            </p>
          </div>

          <div style="text-align: center; margin-bottom: 20px;">
            <button 
              id="electron-auth-btn"
              style="
                background: linear-gradient(90deg, #ff6b35, #f7931e);
                color: #fff;
                border: none;
                padding: 15px 30px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                margin-bottom: 15px;
              "
            >
              üéµ –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É
            </button>
          </div>

          <details style="margin-bottom: 20px;">
            <summary style="color: #4fc3f7; cursor: pointer; font-weight: bold; margin-bottom: 10px;">
              üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
            </summary>
            <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 6px; margin-top: 10px;">
              <p style="color: #ccc; line-height: 1.6; margin: 0;">
                –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, 
                –∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
              </p>
            </div>
          </details>

          <div style="text-align: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid rgba(255, 255, 255, 0.1);">
            <button 
              id="manual-token-btn"
              style="
                background: transparent;
                color: #ccc;
                border: 1px solid rgba(255, 255, 255, 0.3);
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 12px;
                cursor: pointer;
              "
            >
              –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é
            </button>
          </div>

          <div id="manual-token-section" style="display: none; margin-top: 20px;">
            <div style="margin-bottom: 15px;">
              <label style="color: #fff; display: block; margin-bottom: 8px; font-weight: bold;">
                –¢–æ–∫–µ–Ω Session_id:
              </label>
              <input 
                type="text" 
                id="token-input" 
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω Session_id –∏–∑ cookies"
                style="
                  width: 100%;
                  padding: 12px;
                  border: 1px solid rgba(255, 255, 255, 0.3);
                  border-radius: 6px;
                  background: rgba(255, 255, 255, 0.1);
                  color: #fff;
                  font-size: 14px;
                  box-sizing: border-box;
                "
              />
            </div>
          </div>
        </div>
      `;
    }

    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
    return `
      <div style="margin-bottom: 30px;">
        <div style="background: rgba(255, 193, 7, 0.2); border: 1px solid rgba(255, 193, 7, 0.5); border-radius: 8px; padding: 15px; margin-bottom: 20px;">
          <h3 style="color: #ffc107; margin: 0 0 10px 0; font-size: 18px;">üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞</h3>
          <p style="color: #ccc; margin: 0; font-size: 14px; line-height: 1.5;">
            ${tokenInfo.hasToken ? 
              `–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${tokenInfo.error}` : 
              '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏'
            }
          </p>
        </div>

        <div id="token-input-section">
          <div style="margin-bottom: 15px;">
            <label style="color: #fff; display: block; margin-bottom: 8px; font-weight: bold;">
              –¢–æ–∫–µ–Ω Session_id:
            </label>
            <input 
              type="text" 
              id="token-input" 
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω Session_id –∏–∑ cookies"
              style="
                width: 100%;
                padding: 12px;
                border: 1px solid rgba(255, 255, 255, 0.3);
                border-radius: 6px;
                background: rgba(255, 255, 255, 0.1);
                color: #fff;
                font-size: 14px;
                box-sizing: border-box;
              "
            />
          </div>
          
          <details style="margin-bottom: 20px;">
            <summary style="color: #4fc3f7; cursor: pointer; font-weight: bold; margin-bottom: 10px;">
              üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω?
            </summary>
            <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 6px; margin-top: 10px;">
              <ol style="color: #ccc; line-height: 1.6; margin: 0; padding-left: 20px;">
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ <a href="https://music.yandex.ru" target="_blank" style="color: #4fc3f7;">music.yandex.ru</a></li>
                <li>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</li>
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12)</li>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ: Application ‚Üí Cookies</li>
                <li>–ù–∞–π–¥–∏—Ç–µ cookie 'Session_id'</li>
                <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ</li>
              </ol>
            </div>
          </details>
        </div>
      </div>
    `;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏–π
   */
  private getActionSectionHTML(dataStatus: any): string {
    const tokenInfo = TokenManager.getTokenInfo();
    const canCollect = tokenInfo.hasToken && tokenInfo.isValid;

    return `
      <div style="text-align: center;">
        <button 
          id="collect-data-btn" 
          ${canCollect ? '' : 'disabled'}
          style="
            background: ${canCollect ? 'linear-gradient(90deg, #4fc3f7, #29b6f6)' : 'rgba(255, 255, 255, 0.1)'};
            color: ${canCollect ? '#fff' : '#666'};
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: ${canCollect ? 'pointer' : 'not-allowed'};
            transition: all 0.3s ease;
            margin-right: 10px;
          "
        >
          ${dataStatus.hasValidData ? 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' : 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
        </button>

        ${!canCollect ? `
          <button 
            id="save-token-btn"
            style="
              background: rgba(76, 175, 80, 0.8);
              color: #fff;
              border: none;
              padding: 15px 30px;
              border-radius: 8px;
              font-size: 16px;
              font-weight: bold;
              cursor: pointer;
              transition: all 0.3s ease;
            "
          >
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
          </button>
        ` : ''}
      </div>
    `;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –ø—Ä–æ–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
   */
  private getSkipSectionHTML(): string {
    return `
      <div style="text-align: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid rgba(255, 255, 255, 0.1);">
        <button 
          id="skip-btn"
          style="
            background: transparent;
            color: #ccc;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 10px 20px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
          "
        >
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        </button>
      </div>
    `;
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventListeners(): void {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const saveTokenBtn = document.getElementById('save-token-btn');
    if (saveTokenBtn) {
      saveTokenBtn.addEventListener('click', () => this.handleSaveToken());
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const changeTokenBtn = document.getElementById('change-token-btn');
    if (changeTokenBtn) {
      changeTokenBtn.addEventListener('click', () => this.handleChangeToken());
    }

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    const collectBtn = document.getElementById('collect-data-btn');
    if (collectBtn) {
      collectBtn.addEventListener('click', () => this.handleCollectData());
    }

    // –ü—Ä–æ–ø—É—Å–∫
    const skipBtn = document.getElementById('skip-btn');
    if (skipBtn) {
      skipBtn.addEventListener('click', () => this.handleSkip());
    }

    // Electron –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const electronAuthBtn = document.getElementById('electron-auth-btn');
    if (electronAuthBtn) {
      electronAuthBtn.addEventListener('click', () => this.handleElectronAuth());
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
    const manualTokenBtn = document.getElementById('manual-token-btn');
    if (manualTokenBtn) {
      manualTokenBtn.addEventListener('click', () => this.handleShowManualToken());
    }

    // Enter –≤ –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞
    const tokenInput = document.getElementById('token-input') as HTMLInputElement;
    if (tokenInput) {
      tokenInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          this.handleSaveToken();
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  private handleSaveToken(): void {
    const tokenInput = document.getElementById('token-input') as HTMLInputElement;
    if (!tokenInput) return;

    const token = tokenInput.value.trim();
    if (!token) {
      this.showError('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω');
      return;
    }

    if (token.length < 10) {
      this.showError('–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
      return;
    }

    try {
      TokenManager.saveToken(token);
      this.showSuccess('–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      
      // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
      setTimeout(() => {
        this.hide();
        this.show();
      }, 1000);
    } catch (error) {
      this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  private handleChangeToken(): void {
    TokenManager.clearToken();
    this.hide();
    this.show();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  private async handleCollectData(): Promise<void> {
    const tokenData = TokenManager.getToken();
    if (!tokenData) {
      this.showError('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressSection = document.getElementById('progress-section');
    const collectBtn = document.getElementById('collect-data-btn');
    
    if (progressSection) progressSection.style.display = 'block';
    if (collectBtn) collectBtn.style.display = 'none';

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å callback –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.collector = new DataCollector((progress) => this.updateProgress(progress));

    try {
      const result = await this.collector.collectData(tokenData.token);
      this.showResult(result);
    } catch (error) {
      this.showError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞
   */
  private handleSkip(): void {
    this.hide();
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    window.dispatchEvent(new CustomEvent('first-load-completed', { 
      detail: { skipped: true } 
    }));
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
   */
  private updateProgress(progress: CollectionProgress): void {
    const messageEl = document.getElementById('progress-message');
    const barEl = document.getElementById('progress-bar');
    const detailsEl = document.getElementById('progress-details');

    if (messageEl) messageEl.textContent = progress.message;
    if (barEl) barEl.style.width = `${progress.progress}%`;
    
    if (detailsEl && progress.totalTracks) {
      const processed = progress.processedTracks || 0;
      detailsEl.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}/${progress.totalTracks} —Ç—Ä–µ–∫–æ–≤`;
      
      if (progress.currentTrack) {
        detailsEl.textContent += ` | –¢–µ–∫—É—â–∏–π: ${progress.currentTrack}`;
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  private showResult(result: CollectionResult): void {
    const resultSection = document.getElementById('result-section');
    const progressSection = document.getElementById('progress-section');
    
    if (progressSection) progressSection.style.display = 'none';
    if (resultSection) {
      resultSection.style.display = 'block';
      
      if (result.success) {
        resultSection.innerHTML = `
          <div style="background: rgba(76, 175, 80, 0.2); border: 1px solid rgba(76, 175, 80, 0.5); border-radius: 8px; padding: 20px; text-align: center;">
            <h3 style="color: #4caf50; margin: 0 0 15px 0;">‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!</h3>
            <p style="color: #ccc; margin: 0 0 10px 0;">
              –°–æ–±—Ä–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${result.tracksCollected}<br>
              –° –ø—Ä–µ–≤—å—é: ${result.tracksWithPreview}
            </p>
            <button 
              id="continue-btn"
              style="
                background: linear-gradient(90deg, #4fc3f7, #29b6f6);
                color: #fff;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                margin-top: 15px;
              "
            >
              üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </button>
          </div>
        `;

        const continueBtn = document.getElementById('continue-btn');
        if (continueBtn) {
          continueBtn.addEventListener('click', () => {
            this.hide();
            window.dispatchEvent(new CustomEvent('first-load-completed', { 
              detail: { success: true, data: result.data } 
            }));
          });
        }
      } else {
        resultSection.innerHTML = `
          <div style="background: rgba(244, 67, 54, 0.2); border: 1px solid rgba(244, 67, 54, 0.5); border-radius: 8px; padding: 20px; text-align: center;">
            <h3 style="color: #f44336; margin: 0 0 15px 0;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p style="color: #ccc; margin: 0 0 15px 0;">${result.error}</p>
            <button 
              id="retry-btn"
              style="
                background: rgba(244, 67, 54, 0.8);
                color: #fff;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-size: 16px;
                cursor: pointer;
                margin-right: 10px;
              "
            >
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            <button 
              id="use-demo-btn"
              style="
                background: rgba(255, 255, 255, 0.1);
                color: #ccc;
                border: 1px solid rgba(255, 255, 255, 0.3);
                padding: 12px 24px;
                border-radius: 6px;
                font-size: 16px;
                cursor: pointer;
              "
            >
              üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            </button>
          </div>
        `;

        const retryBtn = document.getElementById('retry-btn');
        const useDemoBtn = document.getElementById('use-demo-btn');
        
        if (retryBtn) {
          retryBtn.addEventListener('click', () => {
            this.hide();
            this.show();
          });
        }
        
        if (useDemoBtn) {
          useDemoBtn.addEventListener('click', () => {
            this.hide();
            window.dispatchEvent(new CustomEvent('first-load-completed', { 
              detail: { useDemo: true } 
            }));
          });
        }
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
   */
  private showError(message: string): void {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(244, 67, 54, 0.9);
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      z-index: 10000;
      font-size: 14px;
      max-width: 300px;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 3000);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Electron –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private async handleElectronAuth(): Promise<void> {
    const electronAuthBtn = document.getElementById('electron-auth-btn');
    if (electronAuthBtn) {
      electronAuthBtn.textContent = '‚è≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...';
      (electronAuthBtn as HTMLButtonElement).disabled = true;
    }

    try {
      const token = await TokenManager.openElectronAuth();
      this.showSuccess('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      
      // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
      setTimeout(() => {
        this.hide();
        this.show();
      }, 1000);
    } catch (error) {
      this.showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      if (electronAuthBtn) {
        electronAuthBtn.textContent = 'üéµ –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É';
        (electronAuthBtn as HTMLButtonElement).disabled = false;
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
   */
  private handleShowManualToken(): void {
    const manualSection = document.getElementById('manual-token-section');
    const manualBtn = document.getElementById('manual-token-btn');
    
    if (manualSection && manualBtn) {
      if (manualSection.style.display === 'none') {
        manualSection.style.display = 'block';
        manualBtn.textContent = '–°–∫—Ä—ã—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥';
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const tokenInput = document.getElementById('token-input') as HTMLInputElement;
        if (tokenInput) {
          setTimeout(() => tokenInput.focus(), 100);
        }
      } else {
        manualSection.style.display = 'none';
        manualBtn.textContent = '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é';
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private showSuccess(message: string): void {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(76, 175, 80, 0.9);
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      z-index: 10000;
      font-size: 14px;
      max-width: 300px;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 2000);
  }
}