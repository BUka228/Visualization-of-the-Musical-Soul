import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { InteractionManager as IInteractionManager, SceneManager, AudioManager } from '../types';
import { AudioManager as AudioManagerImpl } from '../audio/AudioManager';

export class InteractionManager implements IInteractionManager {
  private sceneManager?: SceneManager;
  private controls?: OrbitControls;
  private raycaster: THREE.Raycaster;
  private mouse: THREE.Vector2;
  private container?: HTMLElement;
  
  // –ê—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä
  private audioManager: AudioManager;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  private selectedTrackId?: string;
  private hoveredTrackId?: string;
  private animationPaused: boolean = false;
  
  // –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
  private onTrackSelected?: (trackId: string) => void;
  private onTrackDeselected?: () => void;
  private onTrackHovered?: (trackId: string) => void;
  private onTrackUnhovered?: () => void;
  private onAnimationToggled?: (paused: boolean) => void;

  constructor() {
    this.raycaster = new THREE.Raycaster();
    this.mouse = new THREE.Vector2();
    this.audioManager = new AudioManagerImpl();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    this.setupAudioCallbacks();
  }

  private setupAudioCallbacks(): void {
    this.audioManager.setOnPlayStart(() => {
      console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å');
    });

    this.audioManager.setOnPlayEnd(() => {
      console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    });

    this.audioManager.setOnError((error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error.message);
      this.showAudioErrorMessage(error.message);
    });
  }

  private showAudioErrorMessage(message: string): void {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—É–¥–∏–æ
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(255, 0, 0, 0.8);
      color: white;
      padding: 10px 15px;
      border-radius: 5px;
      font-size: 14px;
      z-index: 1000;
      max-width: 300px;
      word-wrap: break-word;
    `;
    errorDiv.textContent = `–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ: ${message}`;
    
    document.body.appendChild(errorDiv);
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (document.body.contains(errorDiv)) {
        document.body.removeChild(errorDiv);
      }
    }, 5000);
  }

  initialize(sceneManager: SceneManager): void {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InteractionManager...');
    
    this.sceneManager = sceneManager;
    this.container = sceneManager.getRenderer().domElement.parentElement || undefined;
    
    if (!this.container) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OrbitControls
    this.setupOrbitControls();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.setupEventListeners();
    
    console.log('InteractionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  }

  private setupOrbitControls(): void {
    if (!this.sceneManager) return;
    
    const camera = this.sceneManager.getCamera() as THREE.PerspectiveCamera;
    const renderer = this.sceneManager.getRenderer();
    
    this.controls = new OrbitControls(camera, renderer.domElement);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.controls.enableDamping = true; // –ø–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
    this.controls.dampingFactor = 0.05;
    this.controls.screenSpacePanning = false;
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑—É–º–∞
    this.controls.minDistance = 10;
    this.controls.maxDistance = 500;
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —É–≥–ª–∞
    this.controls.maxPolarAngle = Math.PI;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    this.controls.rotateSpeed = 0.5;
    this.controls.zoomSpeed = 1.0;
    this.controls.panSpeed = 0.8;
    
    // –í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
    this.controls.mouseButtons = {
      LEFT: THREE.MOUSE.ROTATE,
      MIDDLE: THREE.MOUSE.DOLLY,
      RIGHT: THREE.MOUSE.PAN
    };
    
    console.log('OrbitControls –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  private setupEventListeners(): void {
    if (!this.container) return;
    
    // –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
    this.container.addEventListener('mousemove', this.handleMouseMove.bind(this));
    this.container.addEventListener('click', this.handleClick.bind(this));
    this.container.addEventListener('wheel', this.handleWheel.bind(this));
    
    // –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    document.addEventListener('keydown', this.handleKeyDown.bind(this));
    
    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  handleMouseMove(event: MouseEvent): void {
    if (!this.container || !this.sceneManager) return;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ (-1 –¥–æ +1)
    const rect = this.container.getBoundingClientRect();
    this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    this.checkIntersections();
  }

  handleClick(event: MouseEvent): void {
    if (!this.container || !this.sceneManager) return;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏
    const rect = this.container.getBoundingClientRect();
    this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞
    const intersectedTrack = this.getIntersectedTrack();
    
    if (intersectedTrack) {
      this.selectTrack(intersectedTrack);
    } else {
      this.deselectTrack();
    }
  }

  handleWheel(event: WheelEvent): void {
    // OrbitControls –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–æ–ª–µ—Å–∞ –º—ã—à–∏
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
    event.preventDefault();
  }

  handleKeyDown(event: KeyboardEvent): void {
    switch (event.code) {
      case 'KeyR':
        event.preventDefault();
        this.resetCamera();
        break;
      case 'Space':
        event.preventDefault();
        this.toggleAnimation();
        break;
    }
  }

  private checkIntersections(): void {
    if (!this.sceneManager) return;
    
    const intersectedTrackId = this.getIntersectedTrack();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
    if (intersectedTrackId !== this.hoveredTrackId) {
      // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
      if (this.hoveredTrackId) {
        this.unhoverTrack(this.hoveredTrackId);
      }
      
      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
      if (intersectedTrackId) {
        this.hoverTrack(intersectedTrackId);
      }
      
      this.hoveredTrackId = intersectedTrackId || undefined;
    }
  }

  private getIntersectedTrack(): string | null {
    if (!this.sceneManager) return null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –≤ Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    const soulGalaxyRenderer = this.sceneManager.getSoulGalaxyRenderer();
    soulGalaxyRenderer.updateMousePosition(this.mouse.x, this.mouse.y);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤–µ–¥–µ–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    const crystalTrackSystem = soulGalaxyRenderer.getCrystalTrackSystem();
    const hoveredCrystal = crystalTrackSystem.getHoveredCrystal();
    
    return hoveredCrystal ? hoveredCrystal.id : null;
  }

  private hoverTrack(trackId: string): void {
    // Soul Galaxy renderer handles its own hover effects
    // Classic track object hover effects are no longer needed
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    if (this.container) {
      this.container.style.cursor = 'pointer';
    }
    
    // –í—ã–∑–æ–≤ –∫–æ–ª–ª–±—ç–∫–∞
    if (this.onTrackHovered) {
      this.onTrackHovered(trackId);
    }
  }

  private unhoverTrack(trackId: string): void {
    // Soul Galaxy renderer handles its own hover effects
    // Classic track object hover effects are no longer needed
    
    // –í–æ–∑–≤—Ä–∞—Ç –∫—É—Ä—Å–æ—Ä–∞
    if (this.container) {
      this.container.style.cursor = 'default';
    }
    
    // –í—ã–∑–æ–≤ –∫–æ–ª–ª–±—ç–∫–∞
    if (this.onTrackUnhovered) {
      this.onTrackUnhovered();
    }
  }

  selectTrack(trackId: string): void {
    // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if (this.selectedTrackId && this.selectedTrackId !== trackId) {
      this.deselectTrack();
    }
    
    this.selectedTrackId = trackId;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ Soul Galaxy —Å–∏—Å—Ç–µ–º—É
    if (this.sceneManager) {
      const soulGalaxyRenderer = this.sceneManager.getSoulGalaxyRenderer();
      const crystalTrackSystem = soulGalaxyRenderer.getCrystalTrackSystem();
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      crystalTrackSystem.handleCrystalClick(trackId).catch((error: Error) => {
        console.error('‚ùå Failed to handle crystal click:', error);
      });
      
      // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–±–æ—Ä–∞ AnimationManager
      const animationManager = this.sceneManager.getAnimationManager();
      if (animationManager) {
        animationManager.animateTrackSelection(trackId);
      }
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
      const effectsManager = this.sceneManager.getEffectsManager();
      if (effectsManager) {
        effectsManager.activateSelectionEffects(trackId);
      }
    }
    
    console.log('–¢—Ä–µ–∫ –≤—ã–±—Ä–∞–Ω:', trackId);
    
    // –í—ã–∑–æ–≤ –∫–æ–ª–ª–±—ç–∫–∞
    if (this.onTrackSelected) {
      this.onTrackSelected(trackId);
    }
  }

  deselectTrack(): void {
    if (!this.selectedTrackId) return;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Soul Galaxy –∞—É–¥–∏–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    if (this.sceneManager) {
      const soulGalaxyRenderer = this.sceneManager.getSoulGalaxyRenderer();
      const crystalTrackSystem = soulGalaxyRenderer.getCrystalTrackSystem();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      crystalTrackSystem.stopCurrentPlayback().catch((error: Error) => {
        console.error('‚ùå Failed to stop current playback:', error);
      });
      
      // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ AnimationManager
      const animationManager = this.sceneManager.getAnimationManager();
      if (animationManager) {
        animationManager.animateTrackDeselection();
      }
      
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
      const effectsManager = this.sceneManager.getEffectsManager();
      if (effectsManager) {
        effectsManager.deactivateSelectionEffects();
      }
    }
    
    // –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    this.audioManager.stopPreview();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    this.selectedTrackId = undefined;
    
    console.log('–¢—Ä–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω');
    
    // –í—ã–∑–æ–≤ –∫–æ–ª–ª–±—ç–∫–∞
    if (this.onTrackDeselected) {
      this.onTrackDeselected();
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
   */
  private async playTrackPreview(trackId: string): Promise<void> {
    // Soul Galaxy renderer handles its own audio preview
    // Classic track object audio preview is no longer needed
    
    console.log(`üéµ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: ${trackId}`);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
   */
  private updateAudioStatusUI(isPlaying: boolean, trackName?: string): void {
    const trackInfoPanel = document.getElementById('track-info');
    
    if (!trackInfoPanel) {
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞—É–¥–∏–æ
    const existingAudioStatus = trackInfoPanel.querySelector('.audio-status');
    if (existingAudioStatus) {
      existingAudioStatus.remove();
    }

    if (isPlaying && trackName) {
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const audioStatusDiv = document.createElement('div');
      audioStatusDiv.className = 'audio-status';
      audioStatusDiv.style.cssText = `
        margin-top: 10px;
        padding: 8px 12px;
        background: rgba(0, 255, 0, 0.2);
        border: 1px solid rgba(0, 255, 0, 0.4);
        border-radius: 4px;
        font-size: 12px;
        color: #00ff00;
        display: flex;
        align-items: center;
        gap: 8px;
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
      const indicator = document.createElement('div');
      indicator.style.cssText = `
        width: 8px;
        height: 8px;
        background: #00ff00;
        border-radius: 50%;
        animation: pulse 1s infinite;
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏
      if (!document.querySelector('#audio-pulse-animation')) {
        const style = document.createElement('style');
        style.id = 'audio-pulse-animation';
        style.textContent = `
          @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
            100% { opacity: 1; transform: scale(1); }
          }
        `;
        document.head.appendChild(style);
      }

      const text = document.createElement('span');
      text.textContent = '‚ô™ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–µ–≤—å—é';

      audioStatusDiv.appendChild(indicator);
      audioStatusDiv.appendChild(text);
      trackInfoPanel.appendChild(audioStatusDiv);
    }
  }

  resetCamera(): void {
    if (!this.controls) return;
    
    console.log('–°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    
    // –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
    this.controls.reset();
    
    // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
    this.deselectTrack();
  }

  toggleAnimation(): void {
    this.animationPaused = !this.animationPaused;
    
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–µ–π AnimationManager
    if (this.sceneManager) {
      const animationManager = this.sceneManager.getAnimationManager();
      if (animationManager) {
        animationManager.toggleAnimation();
      }
    }
    
    console.log(`–ê–Ω–∏–º–∞—Ü–∏—è ${this.animationPaused ? '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞'}`);
    
    // –í—ã–∑–æ–≤ –∫–æ–ª–ª–±—ç–∫–∞
    if (this.onAnimationToggled) {
      this.onAnimationToggled(this.animationPaused);
    }
  }

  // Classic track object camera animation removed - Soul Galaxy handles its own camera animations

  // Classic track object UI updates removed - Soul Galaxy handles its own UI updates

  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
   */
  private hideTrackInfoUI(): void {
    const trackInfoPanel = document.getElementById('track-info');
    
    if (!trackInfoPanel) {
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    trackInfoPanel.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    trackInfoPanel.style.opacity = '0';
    trackInfoPanel.style.transform = 'translateY(-10px)';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      trackInfoPanel.style.display = 'none';
      
      // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
      const existingDetails = trackInfoPanel.querySelector('.track-details');
      if (existingDetails) {
        existingDetails.remove();
      }
    }, 300);
    
    console.log('UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ —Å–∫—Ä—ã—Ç');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
  setOnTrackSelected(callback: (trackId: string) => void): void {
    this.onTrackSelected = callback;
  }

  setOnTrackDeselected(callback: () => void): void {
    this.onTrackDeselected = callback;
  }

  setOnTrackHovered(callback: (trackId: string) => void): void {
    this.onTrackHovered = callback;
  }

  setOnTrackUnhovered(callback: () => void): void {
    this.onTrackUnhovered = callback;
  }

  setOnAnimationToggled(callback: (paused: boolean) => void): void {
    this.onAnimationToggled = callback;
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getSelectedTrackId(): string | undefined {
    return this.selectedTrackId;
  }

  getHoveredTrackId(): string | undefined {
    return this.hoveredTrackId;
  }

  isAnimationPaused(): boolean {
    return this.animationPaused;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ü–∏–∫–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
  update(): void {
    if (this.controls) {
      this.controls.update();
    }
  }

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è AudioManager
  getAudioManager(): AudioManager {
    return this.audioManager;
  }

  dispose(): void {
    console.log('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ InteractionManager...');
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ AudioManager
    this.audioManager.dispose();
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    if (this.container) {
      this.container.removeEventListener('mousemove', this.handleMouseMove.bind(this));
      this.container.removeEventListener('click', this.handleClick.bind(this));
      this.container.removeEventListener('wheel', this.handleWheel.bind(this));
      this.container.style.cursor = 'default';
    }
    
    document.removeEventListener('keydown', this.handleKeyDown.bind(this));
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ OrbitControls
    if (this.controls) {
      this.controls.dispose();
      this.controls = undefined;
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.selectedTrackId = undefined;
    this.hoveredTrackId = undefined;
    this.sceneManager = undefined;
    this.container = undefined;
    
    console.log('–†–µ—Å—É—Ä—Å—ã InteractionManager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}