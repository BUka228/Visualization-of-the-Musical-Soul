/**
 * ResourceManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import * as THREE from 'three';

export interface ResourceStats {
  geometries: number;
  materials: number;
  textures: number;
  memoryUsage: number;
  reusedGeometries: number;
  reusedMaterials: number;
}

export class ResourceManager {
  private geometryCache: Map<string, THREE.BufferGeometry> = new Map();
  private materialCache: Map<string, THREE.Material> = new Map();
  private textureCache: Map<string, THREE.Texture> = new Map();
  
  // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  private stats: ResourceStats = {
    geometries: 0,
    materials: 0,
    textures: 0,
    memoryUsage: 0,
    reusedGeometries: 0,
    reusedMaterials: 0
  };

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è —Ç—Ä–µ–∫–∞
   */
  public getGeometry(genre: string, size: number): THREE.BufferGeometry {
    const key = this.getGeometryKey(genre, size);
    
    if (this.geometryCache.has(key)) {
      this.stats.reusedGeometries++;
      return this.geometryCache.get(key)!;
    }
    
    const geometry = this.createGeometryForGenre(genre, size);
    this.geometryCache.set(key, geometry);
    this.stats.geometries++;
    
    return geometry;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç—Ä–µ–∫–∞
   */
  public getMaterial(genre: string, color: string, popularity: number): THREE.MeshStandardMaterial {
    const key = this.getMaterialKey(genre, color, popularity);
    
    if (this.materialCache.has(key)) {
      this.stats.reusedMaterials++;
      return this.materialCache.get(key)! as THREE.MeshStandardMaterial;
    }
    
    const material = this.createMaterialForTrack(genre, color, popularity);
    this.materialCache.set(key, material);
    this.stats.materials++;
    
    return material;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É
   */
  public getTexture(url: string): Promise<THREE.Texture> {
    if (this.textureCache.has(url)) {
      return Promise.resolve(this.textureCache.get(url)!);
    }
    
    return new Promise((resolve, reject) => {
      const loader = new THREE.TextureLoader();
      loader.load(
        url,
        (texture) => {
          this.textureCache.set(url, texture);
          this.stats.textures++;
          resolve(texture);
        },
        undefined,
        (error) => {
          console.warn(`Failed to load texture: ${url}`, error);
          reject(error);
        }
      );
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
   */
  private getGeometryKey(genre: string, size: number): string {
    // –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const roundedSize = Math.round(size * 10) / 10;
    return `${genre.toLowerCase()}_${roundedSize}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
   */
  private getMaterialKey(genre: string, color: string, popularity: number): string {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const popularityRange = Math.floor(popularity / 20) * 20; // 0-19, 20-39, 40-59, 60-79, 80-99
    return `${genre.toLowerCase()}_${color}_${popularityRange}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∞–Ω—Ä–∞
   */
  private createGeometryForGenre(genre: string, size: number): THREE.BufferGeometry {
    const normalizedGenre = genre.toLowerCase();
    
    switch (normalizedGenre) {
      case 'metal':
      case 'rock':
      case 'punk':
        // –ö–æ–Ω—É—Å—ã –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
        return new THREE.ConeGeometry(size * 0.8, size * 1.5, 6);
        
      case 'electronic':
      case 'dance':
        // –ö—É–±—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏
        return new THREE.BoxGeometry(size, size, size);
        
      case 'jazz':
      case 'blues':
        // –¶–∏–ª–∏–Ω–¥—Ä—ã –¥–ª—è –¥–∂–∞–∑–∞ –∏ –±–ª—é–∑–∞
        return new THREE.CylinderGeometry(size * 0.7, size * 0.7, size * 1.2, 8);
        
      case 'classical':
        // –û–∫—Ç–∞—ç–¥—Ä—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏
        return new THREE.OctahedronGeometry(size);
        
      case 'hip-hop':
      case 'rap':
        // –î–æ–¥–µ–∫–∞—ç–¥—Ä—ã –¥–ª—è —Ö–∏–ø-—Ö–æ–ø–∞
        return new THREE.DodecahedronGeometry(size * 0.8);
        
      case 'pop':
      case 'pop-rock':
        // –°—Ñ–µ—Ä—ã –¥–ª—è –ø–æ–ø-–º—É–∑—ã–∫–∏
        return new THREE.SphereGeometry(size, 16, 12);
        
      case 'indie':
      case 'alternative':
      default:
        // –ò–∫–æ—Å–∞—ç–¥—Ä—ã (–∫—Ä–∏—Å—Ç–∞–ª–ª—ã) –¥–ª—è –∏–Ω–¥–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
        return new THREE.IcosahedronGeometry(size, 1);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç—Ä–µ–∫–∞ —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  private createMaterialForTrack(genre: string, color: string, popularity: number): THREE.MeshStandardMaterial {
    const threeColor = new THREE.Color(color);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∞–Ω—Ä–∞
    const normalizedGenre = genre.toLowerCase();
    let metalness = 0.3;
    let roughness = 0.4;
    let emissiveIntensity = 0.1;
    
    switch (normalizedGenre) {
      case 'metal':
      case 'rock':
        metalness = 0.8;
        roughness = 0.2;
        emissiveIntensity = 0.15;
        break;
        
      case 'electronic':
      case 'dance':
        metalness = 0.1;
        roughness = 0.1;
        emissiveIntensity = 0.3;
        break;
        
      case 'jazz':
      case 'blues':
        metalness = 0.6;
        roughness = 0.6;
        emissiveIntensity = 0.05;
        break;
        
      case 'classical':
        metalness = 0.1;
        roughness = 0.8;
        emissiveIntensity = 0.02;
        break;
        
      case 'pop':
      case 'pop-rock':
        metalness = 0.2;
        roughness = 0.3;
        emissiveIntensity = 0.2;
        break;
    }
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    const popularityFactor = popularity / 100;
    emissiveIntensity *= (0.5 + popularityFactor * 0.5); // –ë–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ —Å–≤–µ—Ç—è—Ç—Å—è —è—Ä—á–µ
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    const material = new THREE.MeshStandardMaterial({
      color: threeColor,
      metalness: metalness,
      roughness: roughness,
      emissive: threeColor.clone().multiplyScalar(0.3),
      emissiveIntensity: emissiveIntensity,
      transparent: false,
      opacity: 1.0
    });
    
    return material;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤
   */
  public preloadMaterials(genres: string[], colors: string[]): void {
    console.log('üé® –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
    
    const popularityRanges = [0, 20, 40, 60, 80];
    
    genres.forEach(genre => {
      colors.forEach(color => {
        popularityRanges.forEach(popularity => {
          this.getMaterial(genre, color, popularity);
        });
      });
    });
    
    console.log(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${this.stats.materials} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–π –¥–ª—è –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤
   */
  public preloadGeometries(genres: string[], sizes: number[]): void {
    console.log('üìê –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–π...');
    
    genres.forEach(genre => {
      sizes.forEach(size => {
        this.getGeometry(genre, size);
      });
    });
    
    console.log(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${this.stats.geometries} –≥–µ–æ–º–µ—Ç—Ä–∏–π`);
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
   */
  public optimizeResources(): void {
    console.log('üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    this.cleanupUnusedResources();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    this.updateMemoryStats();
    
    console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
   */
  private cleanupUnusedResources(): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    console.log(`üìä –¢–µ–∫—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã: ${this.geometryCache.size} –≥–µ–æ–º–µ—Ç—Ä–∏–π, ${this.materialCache.size} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, ${this.textureCache.size} —Ç–µ–∫—Å—Ç—É—Ä`);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  private updateMemoryStats(): void {
    let memoryUsage = 0;
    
    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è–º–∏
    this.geometryCache.forEach(geometry => {
      const positions = geometry.attributes.position;
      if (positions) {
        memoryUsage += positions.array.byteLength;
      }
      
      const normals = geometry.attributes.normal;
      if (normals) {
        memoryUsage += normals.array.byteLength;
      }
      
      const uvs = geometry.attributes.uv;
      if (uvs) {
        memoryUsage += uvs.array.byteLength;
      }
      
      if (geometry.index) {
        memoryUsage += geometry.index.array.byteLength;
      }
    });
    
    this.stats.memoryUsage = Math.round(memoryUsage / 1024 / 1024 * 100) / 100; // MB
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public getStats(): ResourceStats {
    this.updateMemoryStats();
    return { ...this.stats };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
   */
  public getCacheInfo(): {
    geometries: string[];
    materials: string[];
    textures: string[];
  } {
    return {
      geometries: Array.from(this.geometryCache.keys()),
      materials: Array.from(this.materialCache.keys()),
      textures: Array.from(this.textureCache.keys())
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
   */
  public clearCache(): void {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    this.geometryCache.forEach(geometry => {
      geometry.dispose();
    });
    this.geometryCache.clear();
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    this.materialCache.forEach(material => {
      material.dispose();
    });
    this.materialCache.clear();
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
    this.textureCache.forEach(texture => {
      texture.dispose();
    });
    this.textureCache.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats = {
      geometries: 0,
      materials: 0,
      textures: 0,
      memoryUsage: 0,
      reusedGeometries: 0,
      reusedMaterials: 0
    };
    
    console.log('‚úÖ –ö—ç—à —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—á–∏—â–µ–Ω');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public generateReport(): string {
    const stats = this.getStats();
    const cacheInfo = this.getCacheInfo();
    
    return `
=== –û—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ ===
–ì–µ–æ–º–µ—Ç—Ä–∏–∏: ${stats.geometries} (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${stats.reusedGeometries})
–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${stats.materials} (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${stats.reusedMaterials})
–¢–µ–∫—Å—Ç—É—Ä—ã: ${stats.textures}
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${stats.memoryUsage}MB

–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏: ${cacheInfo.geometries.length}
${cacheInfo.geometries.slice(0, 10).map(key => `- ${key}`).join('\n')}
${cacheInfo.geometries.length > 10 ? `... –∏ –µ—â–µ ${cacheInfo.geometries.length - 10}` : ''}

–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${cacheInfo.materials.length}
${cacheInfo.materials.slice(0, 10).map(key => `- ${key}`).join('\n')}
${cacheInfo.materials.length > 10 ? `... –∏ –µ—â–µ ${cacheInfo.materials.length - 10}` : ''}

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
- –ì–µ–æ–º–µ—Ç—Ä–∏–∏: ${stats.reusedGeometries > 0 ? Math.round(stats.reusedGeometries / (stats.geometries + stats.reusedGeometries) * 100) : 0}%
- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${stats.reusedMaterials > 0 ? Math.round(stats.reusedMaterials / (stats.materials + stats.reusedMaterials) * 100) : 0}%
========================================
    `.trim();
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
   */
  public dispose(): void {
    this.clearCache();
  }
}