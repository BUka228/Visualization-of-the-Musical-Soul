/**
 * LightingEffects - —Å–∏—Å—Ç–µ–º–∞ —Å–≤–µ—Ç–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ –±–ª–∏–∫–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º, –±–ª–∏–∫–∞–º–∏ –∏ —Å–≤–µ—Ç–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */

import * as THREE from 'three';
import { TrackObject } from '../types';

export class LightingEffects {
  private scene?: THREE.Scene;
  private camera?: THREE.Camera;
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
  private selectionLight?: THREE.PointLight;
  private selectionLightHelper?: THREE.PointLightHelper;
  private ambientPulseLight?: THREE.AmbientLight;
  
  // –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–≤–µ—á–µ–Ω–∏—è
  private glowObjects: Map<TrackObject, THREE.Mesh> = new Map();
  private selectedTrack?: TrackObject;
  
  // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  private time: number = 0;
  private pulseSpeed: number = 2.0;
  private glowIntensity: number = 0.5;
  
  // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  private glowMaterial?: THREE.MeshBasicMaterial;
  
  constructor() {
    console.log('üí° LightingEffects —Å–æ–∑–¥–∞–Ω');
  }

  initialize(scene: THREE.Scene, camera: THREE.Camera): void {
    this.scene = scene;
    this.camera = camera;
    
    this.createDynamicLights();
    this.createGlowMaterials();
    
    console.log('üí° LightingEffects –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
   */
  private createDynamicLights(): void {
    if (!this.scene) return;

    // –¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    this.selectionLight = new THREE.PointLight(0xffffff, 0, 50, 2);
    this.selectionLight.position.set(0, 0, 0);
    this.selectionLight.visible = false;
    this.scene.add(this.selectionLight);

    // –•–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    // this.selectionLightHelper = new THREE.PointLightHelper(this.selectionLight, 1);
    // this.scene.add(this.selectionLightHelper);

    // –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π –æ–∫—Ä—É–∂–∞—é—â–∏–π —Å–≤–µ—Ç –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.ambientPulseLight = new THREE.AmbientLight(0x404040, 0);
    this.scene.add(this.ambientPulseLight);

    console.log('üí° –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–µ—á–µ–Ω–∏—è
   */
  private createGlowMaterials(): void {
    // –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–≤–µ—á–µ–Ω–∏—è
    this.glowMaterial = new THREE.MeshBasicMaterial({
      color: 0xffffff,
      transparent: true,
      opacity: 0.3,
      blending: THREE.AdditiveBlending,
      side: THREE.BackSide,
      depthWrite: false
    });

    console.log('üí° –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   */
  activateSelectionEffects(trackObject: TrackObject): void {
    if (!this.scene || !this.selectionLight) return;

    this.selectedTrack = trackObject;

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç —Ä—è–¥–æ–º —Å –æ–±—ä–µ–∫—Ç–æ–º
    this.selectionLight.position.copy(trackObject.position);
    this.selectionLight.position.y += 5; // –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –æ–±—ä–µ–∫—Ç–∞
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Å–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∞–Ω—Ä–∞ —Ç—Ä–µ–∫–∞
    const trackColor = new THREE.Color(trackObject.trackData.color);
    this.selectionLight.color.copy(trackColor);
    this.selectionLight.intensity = 2.0;
    this.selectionLight.visible = true;

    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –æ–±—ä–µ–∫—Ç–∞
    this.createGlowEffect(trackObject);

    console.log(`üí° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackObject.trackData.name}`);
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
   */
  deactivateSelectionEffects(): void {
    if (!this.selectionLight) return;

    this.selectionLight.visible = false;
    this.selectionLight.intensity = 0;

    // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–≤–µ—á–µ–Ω–∏—è
    if (this.selectedTrack) {
      this.removeGlowEffect(this.selectedTrack);
    }

    this.selectedTrack = undefined;

    console.log('üí° –°–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –æ–±—ä–µ–∫—Ç–∞
   */
  private createGlowEffect(trackObject: TrackObject): void {
    if (!this.scene || !this.glowMaterial) return;

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.removeGlowEffect(trackObject);

    // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è (–Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞)
    const originalGeometry = trackObject.geometry;
    let glowGeometry: THREE.BufferGeometry;

    if (originalGeometry instanceof THREE.IcosahedronGeometry) {
      glowGeometry = new THREE.IcosahedronGeometry(
        originalGeometry.parameters.radius * 1.2,
        originalGeometry.parameters.detail
      );
    } else if (originalGeometry instanceof THREE.SphereGeometry) {
      glowGeometry = new THREE.SphereGeometry(
        originalGeometry.parameters.radius * 1.2,
        originalGeometry.parameters.widthSegments,
        originalGeometry.parameters.heightSegments
      );
    } else {
      // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–π
      glowGeometry = new THREE.SphereGeometry(trackObject.trackData.size * 1.2, 16, 16);
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å–≤–µ—á–µ–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–º —Ç—Ä–µ–∫–∞
    const glowMaterial = this.glowMaterial.clone();
    glowMaterial.color.setHex(parseInt(trackObject.trackData.color.replace('#', '0x')));

    // –°–æ–∑–¥–∞–µ–º –º–µ—à –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è
    const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);
    glowMesh.position.copy(trackObject.position);
    glowMesh.rotation.copy(trackObject.rotation);
    glowMesh.scale.copy(trackObject.scale);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    this.scene.add(glowMesh);
    this.glowObjects.set(trackObject, glowMesh);

    console.log(`‚ú® –°–æ–∑–¥–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackObject.trackData.name}`);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
   */
  private removeGlowEffect(trackObject: TrackObject): void {
    const glowMesh = this.glowObjects.get(trackObject);
    if (glowMesh && this.scene) {
      this.scene.remove(glowMesh);
      glowMesh.geometry.dispose();
      if (glowMesh.material instanceof THREE.Material) {
        glowMesh.material.dispose();
      }
      this.glowObjects.delete(trackObject);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏ —Å–≤–µ—Ç–∞ –≤ —Ä–∏—Ç–º –º—É–∑—ã–∫–∏
   */
  startMusicPulse(audioManager: any): void {
    if (!this.ambientPulseLight) return;

    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—É–ª—å—Å–∞—Ü–∏–∏
    const basePulse = () => {
      const intensity = 0.1 + Math.sin(this.time * this.pulseSpeed) * 0.05;
      this.ambientPulseLight!.intensity = intensity;
      
      // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
      const hue = (this.time * 0.1) % 1;
      this.ambientPulseLight!.color.setHSL(hue, 0.3, 0.5);
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä, –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –º—É–∑—ã–∫–æ–π
    if (audioManager && audioManager.isPlaying()) {
      const progress = audioManager.getProgress() / 100;
      const musicIntensity = 0.2 + Math.sin(progress * Math.PI * 8) * 0.1;
      this.ambientPulseLight.intensity = musicIntensity;
    } else {
      basePulse();
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É–ª—å—Å–∞—Ü–∏—é —Å–≤–µ—Ç–∞
   */
  stopMusicPulse(): void {
    if (this.ambientPulseLight) {
      this.ambientPulseLight.intensity = 0;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤—Å–ø—ã—à–∫–∏
   */
  createFlashEffect(position: THREE.Vector3, color: THREE.Color, intensity: number = 5.0): void {
    if (!this.scene) return;

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞ –¥–ª—è –≤—Å–ø—ã—à–∫–∏
    const flashLight = new THREE.PointLight(color, intensity, 30, 2);
    flashLight.position.copy(position);
    this.scene.add(flashLight);

    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤—Å–ø—ã—à–∫–∏
    let flashTime = 0;
    const flashDuration = 500; // 0.5 —Å–µ–∫—É–Ω–¥—ã

    const animateFlash = () => {
      flashTime += 16;
      const progress = flashTime / flashDuration;

      if (progress >= 1) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–ø—ã—à–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.scene?.remove(flashLight);
        return;
      }

      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
      const fadeProgress = 1 - Math.pow(progress, 2);
      flashLight.intensity = intensity * fadeProgress;

      requestAnimationFrame(animateFlash);
    };

    animateFlash();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∞—É—Ä—ã –≤–æ–∫—Ä—É–≥ –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
   */
  createAuraEffect(objects: TrackObject[], color: THREE.Color): void {
    if (!this.scene || objects.length === 0) return;

    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
    const center = new THREE.Vector3();
    objects.forEach(obj => center.add(obj.position));
    center.divideScalar(objects.length);

    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Å—Ñ–µ—Ä—É –∞—É—Ä—ã
    const auraGeometry = new THREE.SphereGeometry(15, 32, 32);
    const auraMaterial = new THREE.MeshBasicMaterial({
      color: color,
      transparent: true,
      opacity: 0.1,
      blending: THREE.AdditiveBlending,
      side: THREE.DoubleSide,
      depthWrite: false
    });

    const auraMesh = new THREE.Mesh(auraGeometry, auraMaterial);
    auraMesh.position.copy(center);
    this.scene.add(auraMesh);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –∞—É—Ä—ã
    let auraTime = 0;
    const auraDuration = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã

    const animateAura = () => {
      auraTime += 16;
      const progress = auraTime / auraDuration;

      if (progress >= 1) {
        // –£–¥–∞–ª—è–µ–º –∞—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.scene?.remove(auraMesh);
        auraGeometry.dispose();
        auraMaterial.dispose();
        return;
      }

      // –ü—É–ª—å—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
      const scale = 1 + Math.sin(progress * Math.PI * 4) * 0.2;
      const opacity = 0.1 * (1 - progress) * (1 + Math.sin(progress * Math.PI * 8) * 0.5);
      
      auraMesh.scale.setScalar(scale);
      auraMaterial.opacity = opacity;
      auraMesh.rotation.y += 0.01;

      requestAnimationFrame(animateAura);
    };

    animateAura();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
   */
  update(deltaTime: number, audioManager?: any): void {
    this.time += deltaTime * 0.001; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã

    this.updateSelectionLight();
    this.updateGlowEffects();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –≤ —Ä–∏—Ç–º –º—É–∑—ã–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫
    if (this.selectedTrack && audioManager) {
      this.startMusicPulse(audioManager);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   */
  private updateSelectionLight(): void {
    if (!this.selectionLight || !this.selectedTrack) return;

    // –°–ª–µ–¥—É–µ–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
    this.selectionLight.position.copy(this.selectedTrack.position);
    this.selectionLight.position.y += 5;

    // –ü—É–ª—å—Å–∞—Ü–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    const pulseFactor = 1 + Math.sin(this.time * this.pulseSpeed) * 0.3;
    this.selectionLight.intensity = 2.0 * pulseFactor;

    // –ù–µ–±–æ–ª—å—à–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ –ø–æ –∫—Ä—É–≥—É
    const radius = 3;
    const angle = this.time * 0.5;
    this.selectionLight.position.x += Math.cos(angle) * radius;
    this.selectionLight.position.z += Math.sin(angle) * radius;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–≤–µ—á–µ–Ω–∏—è
   */
  private updateGlowEffects(): void {
    this.glowObjects.forEach((glowMesh, trackObject) => {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–≤–æ—Ä–æ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
      glowMesh.position.copy(trackObject.position);
      glowMesh.rotation.copy(trackObject.rotation);
      
      // –ü—É–ª—å—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–≤–µ—á–µ–Ω–∏—è
      const pulseFactor = 1 + Math.sin(this.time * this.pulseSpeed * 1.5) * 0.1;
      glowMesh.scale.setScalar(pulseFactor);
      
      // –ü—É–ª—å—Å–∞—Ü–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
      const material = glowMesh.material as THREE.MeshBasicMaterial;
      if (material) {
        material.opacity = this.glowIntensity * (0.8 + Math.sin(this.time * this.pulseSpeed * 2) * 0.2);
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  setPulseSpeed(speed: number): void {
    this.pulseSpeed = speed;
  }

  setGlowIntensity(intensity: number): void {
    this.glowIntensity = Math.max(0, Math.min(1, intensity));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–µ—á–µ–Ω–∏—è
   */
  getActiveGlowCount(): number {
    return this.glowObjects.size;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   */
  isSelectionEffectsActive(): boolean {
    return this.selectedTrack !== undefined && this.selectionLight?.visible === true;
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  dispose(): void {
    console.log('üí° –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ LightingEffects...');

    // –£–¥–∞–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞
    if (this.selectionLight && this.scene) {
      this.scene.remove(this.selectionLight);
    }
    if (this.selectionLightHelper && this.scene) {
      this.scene.remove(this.selectionLightHelper);
    }
    if (this.ambientPulseLight && this.scene) {
      this.scene.remove(this.ambientPulseLight);
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–≤–µ—á–µ–Ω–∏—è
    this.glowObjects.forEach((glowMesh, trackObject) => {
      this.removeGlowEffect(trackObject);
    });
    this.glowObjects.clear();

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if (this.glowMaterial) {
      this.glowMaterial.dispose();
    }

    // –°–±—Ä–æ—Å —Å—Å—ã–ª–æ–∫
    this.scene = undefined;
    this.camera = undefined;
    this.selectedTrack = undefined;

    console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã LightingEffects –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}