/**
 * EffectsManager - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç–∏—Ü–∞–º–∏, –æ—Å–≤–µ—â–µ–Ω–∏–µ–º –∏ –¥—Ä—É–≥–∏–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
 */

import * as THREE from 'three';
import { TrackObject, AudioManager } from '../types';
import { ParticleSystem } from './ParticleSystem';
import { LightingEffects } from './LightingEffects';

export class EffectsManager {
  private scene?: THREE.Scene;
  private camera?: THREE.Camera;
  private audioManager?: AudioManager;
  
  // –°–∏—Å—Ç–µ–º—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  private particleSystem: ParticleSystem;
  private lightingEffects: LightingEffects;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  private selectedTrack?: TrackObject;
  private isInitialized: boolean = false;
  private effectsEnabled: boolean = true;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª—å—Å–∞—Ü–∏–∏ –≤ —Ä–∏—Ç–º –º—É–∑—ã–∫–∏
  private musicPulseEnabled: boolean = true;
  private lastAudioTime: number = 0;
  private pulseObjects: Set<TrackObject> = new Set();

  constructor() {
    this.particleSystem = new ParticleSystem();
    this.lightingEffects = new LightingEffects();
    
    console.log('üé≠ EffectsManager —Å–æ–∑–¥–∞–Ω');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  initialize(scene: THREE.Scene, camera: THREE.Camera, audioManager?: AudioManager): void {
    this.scene = scene;
    this.camera = camera;
    this.audioManager = audioManager;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.particleSystem.initialize(scene, camera);
    this.lightingEffects.initialize(scene, camera);
    
    this.isInitialized = true;
    
    console.log('üé≠ EffectsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   */
  activateSelectionEffects(trackObject: TrackObject): void {
    if (!this.isInitialized || !this.effectsEnabled) return;

    this.selectedTrack = trackObject;

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–æ–∫—Ä—É–≥ –æ–±—ä–µ–∫—Ç–∞
    this.particleSystem.activateSelectionParticles(trackObject);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.lightingEffects.activateSelectionEffects(trackObject);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏
    this.pulseObjects.add(trackObject);
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—Å–ø—ã—à–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
    const trackColor = new THREE.Color(trackObject.trackData.color);
    this.lightingEffects.createFlashEffect(trackObject.position, trackColor, 3.0);
    
    console.log(`üé≠ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackObject.trackData.name}`);
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
   */
  deactivateSelectionEffects(): void {
    if (!this.isInitialized) return;

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—ã
    this.particleSystem.deactivateSelectionParticles();
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.lightingEffects.deactivateSelectionEffects();
    
    // –£–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É–ª—å—Å–∞—Ü–∏–∏
    if (this.selectedTrack) {
      this.pulseObjects.delete(this.selectedTrack);
    }
    
    this.selectedTrack = undefined;
    
    console.log('üé≠ –≠—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
   */
  createTrackChangeExplosion(position: THREE.Vector3, color: string): void {
    if (!this.isInitialized || !this.effectsEnabled) return;

    const explosionColor = new THREE.Color(color);
    this.particleSystem.createExplosionEffect(position, explosionColor);
    this.lightingEffects.createFlashEffect(position, explosionColor, 5.0);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∞—É—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã —Ç—Ä–µ–∫–æ–≤ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
   */
  createGenreAura(tracks: TrackObject[], genreColor: string): void {
    if (!this.isInitialized || !this.effectsEnabled || tracks.length === 0) return;

    const auraColor = new THREE.Color(genreColor);
    this.lightingEffects.createAuraEffect(tracks, auraColor);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É–ª—å—Å–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∏—Ç–º –º—É–∑—ã–∫–∏
   */
  private updateMusicPulse(): void {
    if (!this.musicPulseEnabled || !this.audioManager || this.pulseObjects.size === 0) return;

    const isPlaying = this.audioManager.isPlaying();
    const currentTime = this.audioManager.getCurrentTime();
    
    if (isPlaying && currentTime !== this.lastAudioTime) {
      // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—É–ª—å—Å–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–µ–∫–∞
      const progress = this.audioManager.getProgress() / 100;
      const pulseIntensity = 0.1 + Math.sin(progress * Math.PI * 16) * 0.05;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –∫ –æ–±—ä–µ–∫—Ç–∞–º
      this.pulseObjects.forEach(trackObject => {
        if (trackObject.trackData) {
          // –ü—É–ª—å—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
          const basePulse = 1 + Math.sin(Date.now() * 0.005) * pulseIntensity;
          trackObject.scale.setScalar(basePulse);
          
          // –ü—É–ª—å—Å–∞—Ü–∏—è —Å–≤–µ—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
          const material = trackObject.material as THREE.MeshStandardMaterial;
          if (material) {
            material.emissiveIntensity = 0.1 + pulseIntensity;
          }
        }
      });
      
      this.lastAudioTime = currentTime;
    } else if (!isPlaying) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∫–æ–≥–¥–∞ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç
      this.pulseObjects.forEach(trackObject => {
        trackObject.scale.setScalar(1);
        const material = trackObject.material as THREE.MeshStandardMaterial;
        if (material) {
          material.emissiveIntensity = 0.1;
        }
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
   */
  createTrackAppearanceEffect(trackObject: TrackObject): void {
    if (!this.isInitialized || !this.effectsEnabled) return;

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Å —á–∞—Å—Ç–∏—Ü–∞–º–∏
    const trackColor = new THREE.Color(trackObject.trackData.color);
    this.particleSystem.createExplosionEffect(trackObject.position, trackColor);
    
    // –°–≤–µ—Ç–æ–≤–∞—è –≤—Å–ø—ã—à–∫–∞
    this.lightingEffects.createFlashEffect(trackObject.position, trackColor, 2.0);
    
    console.log(`‚ú® –°–æ–∑–¥–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackObject.trackData.name}`);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
   */
  createTrackDisappearanceEffect(trackObject: TrackObject): void {
    if (!this.isInitialized || !this.effectsEnabled) return;

    // –≠—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    const trackColor = new THREE.Color(trackObject.trackData.color);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ (—á–∞—Å—Ç–∏—Ü—ã —Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –∫ —Ü–µ–Ω—Ç—Ä—É)
    this.createImplodeEffect(trackObject.position, trackColor);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∏–º–ø–ª–æ–∑–∏–∏ (–æ–±—Ä–∞—Ç–Ω—ã–π –≤–∑—Ä—ã–≤)
   */
  private createImplodeEffect(position: THREE.Vector3, color: THREE.Color): void {
    if (!this.scene) return;

    const particleCount = 30;
    const geometry = new THREE.BufferGeometry();
    const positions = new Float32Array(particleCount * 3);
    const velocities = new Float32Array(particleCount * 3);
    const colors = new Float32Array(particleCount * 3);

    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–æ–∫—Ä—É–≥ –ø–æ–∑–∏—Ü–∏–∏
    for (let i = 0; i < particleCount; i++) {
      const i3 = i * 3;
      
      // –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞
      const radius = 5 + Math.random() * 5;
      const theta = Math.random() * Math.PI * 2;
      const phi = Math.acos(2 * Math.random() - 1);
      
      positions[i3] = position.x + radius * Math.sin(phi) * Math.cos(theta);
      positions[i3 + 1] = position.y + radius * Math.sin(phi) * Math.sin(theta);
      positions[i3 + 2] = position.z + radius * Math.cos(phi);
      
      // –°–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∫ —Ü–µ–Ω—Ç—Ä—É
      const direction = new THREE.Vector3(
        position.x - positions[i3],
        position.y - positions[i3 + 1],
        position.z - positions[i3 + 2]
      ).normalize();
      
      const speed = 0.05 + Math.random() * 0.05;
      velocities[i3] = direction.x * speed;
      velocities[i3 + 1] = direction.y * speed;
      velocities[i3 + 2] = direction.z * speed;
      
      // –¶–≤–µ—Ç —á–∞—Å—Ç–∏—Ü
      colors[i3] = color.r;
      colors[i3 + 1] = color.g;
      colors[i3 + 2] = color.b;
    }

    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.setAttribute('velocity', new THREE.BufferAttribute(velocities, 3));
    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    const material = new THREE.PointsMaterial({
      size: 2.0,
      vertexColors: true,
      transparent: true,
      opacity: 1.0,
      blending: THREE.AdditiveBlending,
      depthWrite: false
    });

    const implodeParticles = new THREE.Points(geometry, material);
    this.scene.add(implodeParticles);

    // –ê–Ω–∏–º–∞—Ü–∏—è –∏–º–ø–ª–æ–∑–∏–∏
    let implodeTime = 0;
    const implodeDuration = 1500; // 1.5 —Å–µ–∫—É–Ω–¥—ã

    const animateImplode = () => {
      implodeTime += 16;
      const progress = implodeTime / implodeDuration;

      if (progress >= 1) {
        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.scene?.remove(implodeParticles);
        geometry.dispose();
        material.dispose();
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
      const positions = geometry.attributes.position as THREE.BufferAttribute;
      const velocities = geometry.attributes.velocity as THREE.BufferAttribute;

      for (let i = 0; i < particleCount; i++) {
        const i3 = i * 3;
        
        positions.setX(i, positions.getX(i) + velocities.getX(i));
        positions.setY(i, positions.getY(i) + velocities.getY(i));
        positions.setZ(i, positions.getZ(i) + velocities.getZ(i));
        
        // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É
        velocities.setX(i, velocities.getX(i) * 1.02);
        velocities.setY(i, velocities.getY(i) * 1.02);
        velocities.setZ(i, velocities.getZ(i) * 1.02);
      }

      positions.needsUpdate = true;
      
      // –£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∫ –∫–æ–Ω—Ü—É
      material.opacity = 1 - progress * 0.5;

      requestAnimationFrame(animateImplode);
    };

    animateImplode();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
   */
  update(deltaTime: number): void {
    if (!this.isInitialized || !this.effectsEnabled) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.particleSystem.update(deltaTime);
    this.lightingEffects.update(deltaTime, this.audioManager);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –≤ —Ä–∏—Ç–º –º—É–∑—ã–∫–∏
    this.updateMusicPulse();
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã
   */
  setEffectsEnabled(enabled: boolean): void {
    this.effectsEnabled = enabled;
    
    if (!enabled) {
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
      this.deactivateSelectionEffects();
      this.pulseObjects.clear();
    }
    
    console.log(`üé≠ –≠—Ñ—Ñ–µ–∫—Ç—ã ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø—É–ª—å—Å–∞—Ü–∏—é –≤ —Ä–∏—Ç–º –º—É–∑—ã–∫–∏
   */
  setMusicPulseEnabled(enabled: boolean): void {
    this.musicPulseEnabled = enabled;
    
    if (!enabled) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
      this.pulseObjects.forEach(trackObject => {
        trackObject.scale.setScalar(1);
        const material = trackObject.material as THREE.MeshStandardMaterial;
        if (material) {
          material.emissiveIntensity = 0.1;
        }
      });
    }
    
    console.log(`üéµ –ü—É–ª—å—Å–∞—Ü–∏—è –≤ —Ä–∏—Ç–º –º—É–∑—ã–∫–∏ ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  setParticleSystemSettings(starCount?: number, selectionParticleCount?: number): void {
    // –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ ParticleSystem –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    console.log('üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }

  setLightingSettings(pulseSpeed?: number, glowIntensity?: number): void {
    if (pulseSpeed !== undefined) {
      this.lightingEffects.setPulseSpeed(pulseSpeed);
    }
    if (glowIntensity !== undefined) {
      this.lightingEffects.setGlowIntensity(glowIntensity);
    }
    console.log('üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  getEffectsStats(): {
    starCount: number;
    selectionParticleCount: number;
    activeGlowCount: number;
    pulseObjectsCount: number;
    isSelectionActive: boolean;
    isMusicPulseEnabled: boolean;
  } {
    return {
      starCount: this.particleSystem.getStarCount(),
      selectionParticleCount: this.particleSystem.getSelectionParticleCount(),
      activeGlowCount: this.lightingEffects.getActiveGlowCount(),
      pulseObjectsCount: this.pulseObjects.size,
      isSelectionActive: this.particleSystem.isSelectionParticlesActive(),
      isMusicPulseEnabled: this.musicPulseEnabled
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
   */
  isReady(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
   */
  areEffectsEnabled(): boolean {
    return this.effectsEnabled;
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  dispose(): void {
    console.log('üé≠ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ EffectsManager...');

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.particleSystem.dispose();
    this.lightingEffects.dispose();

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.pulseObjects.clear();
    this.selectedTrack = undefined;
    this.scene = undefined;
    this.camera = undefined;
    this.audioManager = undefined;
    this.isInitialized = false;

    console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã EffectsManager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}