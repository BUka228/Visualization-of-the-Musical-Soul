import { AudioManager as IAudioManager } from '../types';
import { TokenManager } from '../auth/TokenManager';

export class AudioManager implements IAudioManager {
  private currentAudio?: HTMLAudioElement;
  private volume: number = 0.5;
  private fadeInDuration: number = 500; // ms
  private fadeOutDuration: number = 300; // ms
  private isCurrentlyPlaying: boolean = false;
  private isTransitioning: boolean = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
  private currentTrackId?: string; // ID —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  
  // –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
  private onPlayStart?: () => void;
  private onPlayEnd?: () => void;
  private onError?: (error: Error) => void;

  constructor() {
    console.log('AudioManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }



  async playPreview(url: string, trackId?: string): Promise<void> {
    console.log(`üéµ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackId}`);
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    if (this.isTransitioning) {
      console.log('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å');
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫, —á—Ç–æ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
    if (trackId && this.currentTrackId === trackId && this.isCurrentlyPlaying) {
      console.log('üîÑ –¢—Ä–µ–∫ —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
      return;
    }

    this.isTransitioning = true;
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await this.stopPreviewSync();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
      this.currentTrackId = trackId;
      
      // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –Ω–∞—à –Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
      const audioBlob = await this.fetchAudioWithProxy(url);
      const blobUrl = URL.createObjectURL(audioBlob);
      
      console.log(`üéµ –°–æ–∑–¥–∞–Ω Blob URL –¥–ª—è –∞—É–¥–∏–æ: ${blobUrl}`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
      this.currentAudio = new Audio(blobUrl);
      this.currentAudio.crossOrigin = 'anonymous';
      this.currentAudio.preload = 'auto';
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      this.setupAudioEventListeners();
      
      this.currentAudio.volume = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª–µ–≤–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è fade-in
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
      await this.loadAndPlay();
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º fade-in —ç—Ñ—Ñ–µ–∫—Ç
      this.fadeIn();
      
      this.isCurrentlyPlaying = true;
      
      if (this.onPlayStart) {
        this.onPlayStart();
      }
      
      console.log('‚úÖ –ü—Ä–µ–≤—å—é –Ω–∞—á–∞—Ç–æ —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      const audioError = error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏–æ');
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–≤—å—é:', audioError.message);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.cleanup();
      
      if (this.onError) {
        this.onError(audioError);
      }
      
      throw audioError;
    } finally {
      this.isTransitioning = false;
    }
  }

  private async loadAndPlay(): Promise<void> {
    if (!this.currentAudio) {
      throw new Error('–ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    return new Promise((resolve, reject) => {
      if (!this.currentAudio) {
        reject(new Error('–ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'));
        return;
      }

      const handleCanPlay = () => {
        if (!this.currentAudio) return;
        
        this.currentAudio.removeEventListener('canplay', handleCanPlay);
        this.currentAudio.removeEventListener('error', handleError);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        const playPromise = this.currentAudio.play();
        
        if (playPromise !== undefined) {
          playPromise
            .then(() => resolve())
            .catch((error) => {
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
              this.isTransitioning = false;
              reject(new Error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${error.message}`));
            });
        } else {
          resolve();
        }
      };

      const handleError = () => {
        if (!this.currentAudio) return;
        
        this.currentAudio.removeEventListener('canplay', handleCanPlay);
        this.currentAudio.removeEventListener('error', handleError);
        
        const error = this.currentAudio.error;
        const errorMessage = error ? `–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.isTransitioning = false;
        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: ${errorMessage}`));
      };

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.currentAudio.addEventListener('canplay', handleCanPlay);
      this.currentAudio.addEventListener('error', handleError);
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      this.currentAudio.load();
    });
  }

  private setupAudioEventListeners(): void {
    if (!this.currentAudio) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    this.currentAudio.addEventListener('ended', () => {
      console.log('üéµ –ü—Ä–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      this.isCurrentlyPlaying = false;
      
      if (this.onPlayEnd) {
        this.onPlayEnd();
      }
      
      this.cleanup();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    this.currentAudio.addEventListener('error', (event) => {
      const target = event.target as HTMLAudioElement;
      const error = target.error;
      const errorMessage = error ? `–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', errorMessage);
      
      this.isCurrentlyPlaying = false;
      this.isTransitioning = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      
      if (this.onError) {
        this.onError(new Error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${errorMessage}`));
      }
      
      this.cleanup();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—É–∑—ã
    this.currentAudio.addEventListener('pause', () => {
      console.log('‚è∏Ô∏è –ü—Ä–µ–≤—å—é –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.isCurrentlyPlaying = false;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.currentAudio.addEventListener('play', () => {
      console.log('‚ñ∂Ô∏è –ü—Ä–µ–≤—å—é –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      this.isCurrentlyPlaying = true;
    });
  }

  stopPreview(): void {
    if (!this.currentAudio || !this.isCurrentlyPlaying) {
      return;
    }

    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–≤—å—é');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º fade-out —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    this.fadeOut().then(() => {
      this.cleanup();
    });

    this.isCurrentlyPlaying = false;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–≤—å—é —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è fade-out
   */
  private async stopPreviewSync(): Promise<void> {
    if (!this.currentAudio || !this.isCurrentlyPlaying) {
      return;
    }

    console.log('‚èπÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–≤—å—é');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º fade-out —ç—Ñ—Ñ–µ–∫—Ç –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await this.fadeOut();
    this.cleanup();
    this.isCurrentlyPlaying = false;
  }

  private fadeIn(): void {
    if (!this.currentAudio) return;

    const targetVolume = this.volume;
    const steps = 20;
    const stepDuration = this.fadeInDuration / steps;
    const volumeStep = targetVolume / steps;
    
    let currentStep = 0;

    const fadeInterval = setInterval(() => {
      if (!this.currentAudio || currentStep >= steps) {
        clearInterval(fadeInterval);
        return;
      }

      currentStep++;
      this.currentAudio.volume = Math.min(volumeStep * currentStep, targetVolume);

      if (currentStep >= steps) {
        clearInterval(fadeInterval);
      }
    }, stepDuration);
  }

  private fadeOut(): Promise<void> {
    return new Promise((resolve) => {
      if (!this.currentAudio) {
        resolve();
        return;
      }

      const initialVolume = this.currentAudio.volume;
      const steps = 15;
      const stepDuration = this.fadeOutDuration / steps;
      const volumeStep = initialVolume / steps;
      
      let currentStep = 0;

      const fadeInterval = setInterval(() => {
        if (!this.currentAudio || currentStep >= steps) {
          clearInterval(fadeInterval);
          resolve();
          return;
        }

        currentStep++;
        this.currentAudio.volume = Math.max(initialVolume - (volumeStep * currentStep), 0);

        if (currentStep >= steps) {
          clearInterval(fadeInterval);
          resolve();
        }
      }, stepDuration);
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private async fetchAudioWithProxy(yandexUrl: string): Promise<Blob> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ TokenManager
    const tokenData = TokenManager.getToken();
    
    if (!tokenData || !tokenData.token) {
      throw new Error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞—É–¥–∏–æ-–ø—Ä–æ–∫—Å–∏.");
    }

    // –î–µ–ª–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–∫—Å–∏
    const response = await fetch('/api/audioProxy', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        url: yandexUrl, 
        token: tokenData.token 
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${errorData.error || ''}`);
    }

    return response.blob();
  }

  private cleanup(): void {
    if (this.currentAudio) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å, –∑–∞–Ω—è—Ç—É—é Blob URL
      if (this.currentAudio.src.startsWith('blob:')) {
        URL.revokeObjectURL(this.currentAudio.src);
      }
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.currentAudio.removeEventListener('ended', () => {});
      this.currentAudio.removeEventListener('error', () => {});
      this.currentAudio.removeEventListener('pause', () => {});
      this.currentAudio.removeEventListener('play', () => {});
      
      // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
      this.currentAudio.src = '';
      this.currentAudio.load();
      
      this.currentAudio = undefined;
    }
    
    this.isCurrentlyPlaying = false;
    this.currentTrackId = undefined; // –û—á–∏—â–∞–µ–º ID —Ç—Ä–µ–∫–∞
  }

  setVolume(volume: number): void {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 1
    this.volume = Math.max(0, Math.min(1, volume));
    
    if (this.currentAudio) {
      this.currentAudio.volume = this.volume;
    }
    
    console.log(`üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${Math.round(this.volume * 100)}%`);
  }

  getCurrentTime(): number {
    if (!this.currentAudio) {
      return 0;
    }
    
    return this.currentAudio.currentTime;
  }

  isPlaying(): boolean {
    return this.isCurrentlyPlaying;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
   */
  getDuration(): number {
    if (!this.currentAudio) {
      return 0;
    }
    
    return this.currentAudio.duration || 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
   */
  getProgress(): number {
    if (!this.currentAudio) {
      return 0;
    }
    
    const duration = this.getDuration();
    const currentTime = this.getCurrentTime();
    
    if (duration === 0) {
      return 0;
    }
    
    return (currentTime / duration) * 100;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  setCurrentTime(time: number): void {
    if (!this.currentAudio) {
      return;
    }
    
    const duration = this.getDuration();
    const clampedTime = Math.max(0, Math.min(time, duration));
    
    this.currentAudio.currentTime = clampedTime;
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  pause(): void {
    if (this.currentAudio && this.isCurrentlyPlaying) {
      this.currentAudio.pause();
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  resume(): void {
    if (this.currentAudio && !this.isCurrentlyPlaying) {
      const playPromise = this.currentAudio.play();
      
      if (playPromise !== undefined) {
        playPromise.catch((error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
          
          if (this.onError) {
            this.onError(new Error(`–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`));
          }
        });
      }
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
  
  setOnPlayStart(callback: () => void): void {
    this.onPlayStart = callback;
  }

  setOnPlayEnd(callback: () => void): void {
    this.onPlayEnd = callback;
  }

  setOnError(callback: (error: Error) => void): void {
    this.onError = callback;
  }

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  dispose(): void {
    console.log('üóëÔ∏è –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ AudioManager...');
    
    this.stopPreview();
    this.cleanup();
    
    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.isTransitioning = false;
    this.currentTrackId = undefined;
    
    // –°–±—Ä–æ—Å –∫–æ–ª–ª–±—ç–∫–æ–≤
    this.onPlayStart = undefined;
    this.onPlayEnd = undefined;
    this.onError = undefined;
    
    console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã AudioManager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}