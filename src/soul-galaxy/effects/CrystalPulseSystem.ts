import * as THREE from 'three';
import { ProcessedTrack } from '../../types';
import { CrystalTrack } from '../types';

/**
 * –°–∏—Å—Ç–µ–º–∞ –ø—É–ª—å—Å–∞—Ü–∏–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∏—Ç–º–∏—á–Ω–æ–π –ø—É–ª—å—Å–∞—Ü–∏–µ–π –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ BPM –∏ —ç–Ω–µ—Ä–≥–∏–∏ —Ç—Ä–µ–∫–æ–≤
 */
export class CrystalPulseSystem {
  private crystalTracks: CrystalTrack[] = [];
  private scene?: THREE.Scene;
  private pulseGroups: Map<string, CrystalTrack[]> = new Map(); // –ì—Ä—É–ø–ø—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private globalTime: number = 0;
  private enabled: boolean = true;

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
  private static readonly CONFIG = {
    defaultBPM: 120,              // BPM –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    minPulseSpeed: 0.5,           // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª—å—Å–∞—Ü–∏–∏ (Hz)
    maxPulseSpeed: 4.0,           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª—å—Å–∞—Ü–∏–∏ (Hz)
    baseAmplitude: 0.15,          // –ë–∞–∑–æ–≤–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –ø—É–ª—å—Å–∞—Ü–∏–∏
    maxAmplitude: 0.4,            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –ø—É–ª—å—Å–∞—Ü–∏–∏
    energyInfluence: 0.3,         // –í–ª–∏—è–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –∞–º–ø–ª–∏—Ç—É–¥—É (0-1)
    popularityInfluence: 0.2,     // –í–ª–∏—è–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–∞ –∞–º–ø–ª–∏—Ç—É–¥—É (0-1)
    syncThreshold: 5,             // –ü–æ—Ä–æ–≥ BPM –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (¬±5 BPM)
    phaseVariation: 0.3,          // –í–∞—Ä–∏–∞—Ü–∏—è —Ñ–∞–∑—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    genrePulseModifiers: {        // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –∂–∞–Ω—Ä–æ–≤
      metal: { speedMultiplier: 1.2, amplitudeMultiplier: 1.3, sharpness: 1.4 },
      rock: { speedMultiplier: 1.1, amplitudeMultiplier: 1.1, sharpness: 1.2 },
      punk: { speedMultiplier: 1.4, amplitudeMultiplier: 1.2, sharpness: 1.5 },
      electronic: { speedMultiplier: 1.0, amplitudeMultiplier: 0.9, sharpness: 0.8 },
      jazz: { speedMultiplier: 0.8, amplitudeMultiplier: 0.8, sharpness: 0.7 },
      classical: { speedMultiplier: 0.7, amplitudeMultiplier: 0.7, sharpness: 0.6 },
      pop: { speedMultiplier: 1.0, amplitudeMultiplier: 1.0, sharpness: 1.0 },
      indie: { speedMultiplier: 0.9, amplitudeMultiplier: 0.9, sharpness: 0.9 },
      default: { speedMultiplier: 1.0, amplitudeMultiplier: 1.0, sharpness: 1.0 }
    }
  };

  initialize(scene: THREE.Scene, crystalTracks: CrystalTrack[]): void {
    console.log('üíì Initializing Crystal Pulse System...');
    
    this.scene = scene;
    this.crystalTracks = crystalTracks;
    this.globalTime = 0;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
    this.initializePulsation();
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.createSyncGroups();
    
    console.log(`‚úÖ Crystal Pulse System initialized for ${crystalTracks.length} crystals`);
    this.logPulseStats();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
   */
  private initializePulsation(): void {
    this.crystalTracks.forEach(crystal => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª—å—Å–∞—Ü–∏–∏
      this.setPulsationFromBPM(crystal, this.extractBPMFromTrack(crystal));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ–∞–∑—É –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
      crystal.pulsePhase = Math.random() * Math.PI * 2;
      
      // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞
      this.applyGenreModifiers(crystal);
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª—å—Å–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ BPM —Ç—Ä–µ–∫–∞
   */
  setPulsationFromBPM(crystal: CrystalTrack, bpm?: number): void {
    const genreModifier = this.getGenreModifier(crystal.genre);
    
    if (bpm && bpm > 0) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BPM –≤ —á–∞—Å—Ç–æ—Ç—É –ø—É–ª—å—Å–∞—Ü–∏–∏ (Hz)
      const baseFrequency = (bpm / 60) * genreModifier.speedMultiplier;
      crystal.pulseSpeed = Math.max(
        CrystalPulseSystem.CONFIG.minPulseSpeed,
        Math.min(CrystalPulseSystem.CONFIG.maxPulseSpeed, baseFrequency)
      );
      
      console.log(`üéµ Set BPM-based pulsation for "${crystal.name}": ${bpm} BPM ‚Üí ${crystal.pulseSpeed.toFixed(2)} Hz`);
    } else {
      // Fallback –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é —Ç—Ä–µ–∫–∞ (–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫–∞–∫ –ø—Ä–æ–∫—Å–∏)
      const energyFactor = crystal.popularity / 100;
      const baseFrequency = (CrystalPulseSystem.CONFIG.minPulseSpeed + 
                           energyFactor * (CrystalPulseSystem.CONFIG.maxPulseSpeed - CrystalPulseSystem.CONFIG.minPulseSpeed)) 
                           * genreModifier.speedMultiplier;
      
      crystal.pulseSpeed = baseFrequency;
      
      console.log(`‚ö° Set energy-based pulsation for "${crystal.name}": ${crystal.popularity}% energy ‚Üí ${crystal.pulseSpeed.toFixed(2)} Hz`);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏
    const popularityFactor = crystal.popularity / 100;
    const energyFactor = this.calculateEnergyFactor(crystal);
    
    crystal.pulseAmplitude = (CrystalPulseSystem.CONFIG.baseAmplitude + 
                             (popularityFactor * CrystalPulseSystem.CONFIG.popularityInfluence) +
                             (energyFactor * CrystalPulseSystem.CONFIG.energyInfluence)) 
                             * genreModifier.amplitudeMultiplier;
    
    crystal.pulseAmplitude = Math.min(CrystalPulseSystem.CONFIG.maxAmplitude, crystal.pulseAmplitude);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º BPM
   */
  private createSyncGroups(): void {
    this.pulseGroups.clear();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –ø–æ –ø–æ—Ö–æ–∂–µ–º—É BPM –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const bpmGroups: { [key: string]: CrystalTrack[] } = {};
    
    this.crystalTracks.forEach(crystal => {
      const bpm = this.extractBPMFromTrack(crystal);
      if (bpm) {
        // –û–∫—Ä—É–≥–ª—è–µ–º BPM –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ—Ä–æ–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const groupBPM = Math.round(bpm / CrystalPulseSystem.CONFIG.syncThreshold) * CrystalPulseSystem.CONFIG.syncThreshold;
        const groupKey = `bpm_${groupBPM}`;
        
        if (!bpmGroups[groupKey]) {
          bpmGroups[groupKey] = [];
        }
        bpmGroups[groupKey].push(crystal);
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    Object.entries(bpmGroups).forEach(([groupKey, crystals]) => {
      if (crystals.length > 1) {
        this.pulseGroups.set(groupKey, crystals);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∑—ã –≤ –≥—Ä—É–ø–ø–µ
        this.synchronizeGroup(crystals);
        
        console.log(`üîó Created sync group "${groupKey}" with ${crystals.length} crystals`);
      }
    });
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–∑—ã –ø—É–ª—å—Å–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
   */
  private synchronizeGroup(crystals: CrystalTrack[]): void {
    if (crystals.length === 0) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∑—É –ø–µ—Ä–≤–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –∫–∞–∫ –±–∞–∑–æ–≤—É—é
    const basePhase = crystals[0].pulsePhase;
    
    crystals.forEach((crystal, index) => {
      if (index > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        const phaseVariation = (Math.random() - 0.5) * CrystalPulseSystem.CONFIG.phaseVariation;
        crystal.pulsePhase = basePhase + phaseVariation;
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É–ª—å—Å–∞—Ü–∏—é –≤—Å–µ—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
   */
  updatePulsation(deltaTime: number): void {
    if (!this.enabled || this.crystalTracks.length === 0) {
      return;
    }
    
    this.globalTime += deltaTime * 0.001; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    
    this.crystalTracks.forEach(crystal => {
      this.updateCrystalPulsation(crystal, this.globalTime);
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É–ª—å—Å–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  private updateCrystalPulsation(crystal: CrystalTrack, time: number): void {
    if (!this.scene) return;
    
    // –ù–∞—Ö–æ–¥–∏–º mesh –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –≤ —Å—Ü–µ–Ω–µ
    const mesh = this.findCrystalMesh(crystal.id);
    if (!mesh) return;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é
    const pulseValue = this.calculatePulseValue(crystal, time);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –µ—Å–ª–∏ —ç—Ç–æ CrystalShaderMaterial
    if (mesh.material && 'updateTime' in mesh.material) {
      const shaderMaterial = mesh.material as any; // CrystalShaderMaterial
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —à–µ–π–¥–µ—Ä–∞
      shaderMaterial.updateTime(time);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –¥–ª—è fresnel —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
      if (this.scene && this.scene.userData.camera) {
        shaderMaterial.updateCameraPosition(this.scene.userData.camera.position);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø—É–ª—å—Å–∞—Ü–∏—é
      shaderMaterial.updateGlobalPulse(pulseValue);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø—É–ª—å—Å–∞—Ü–∏—é –∫ –º–∞—Å—à—Ç–∞–±—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    const scale = 1.0 + pulseValue * crystal.pulseAmplitude * 0.1; // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è –≤ —à–µ–π–¥–µ—Ä–µ
    mesh.scale.setScalar(scale);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  private calculatePulseValue(crystal: CrystalTrack, time: number): number {
    const genreModifier = this.getGenreModifier(crystal.genre);
    
    // –ë–∞–∑–æ–≤–∞—è —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
    const basePhase = time * crystal.pulseSpeed * 2 * Math.PI + crystal.pulsePhase;
    let pulseValue = Math.sin(basePhase);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç—Ä–æ—Ç—É –∂–∞–Ω—Ä–∞ (–¥–µ–ª–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –±–æ–ª–µ–µ —Ä–µ–∑–∫–æ–π –¥–ª—è –º–µ—Ç–∞–ª–ª–∞/–ø–∞–Ω–∫–∞)
    if (genreModifier.sharpness > 1.0) {
      pulseValue = Math.sign(pulseValue) * Math.pow(Math.abs(pulseValue), 1 / genreModifier.sharpness);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ø—É–ª—å—Å–∞—Ü–∏–∏
    const harmonic = Math.sin(basePhase * 2) * 0.2;
    pulseValue += harmonic;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É -1 –¥–æ 1
    return Math.max(-1, Math.min(1, pulseValue));
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç BPM –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
   */
  private extractBPMFromTrack(track: ProcessedTrack): number | undefined {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    const genreBPMRanges: { [genre: string]: { min: number; max: number } } = {
      metal: { min: 120, max: 180 },
      rock: { min: 100, max: 140 },
      punk: { min: 140, max: 200 },
      electronic: { min: 120, max: 140 },
      jazz: { min: 80, max: 120 },
      classical: { min: 60, max: 100 },
      pop: { min: 100, max: 130 },
      indie: { min: 90, max: 120 }
    };
    
    const range = genreBPMRanges[track.genre.toLowerCase()] || { min: 100, max: 130 };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à ID —Ç—Ä–µ–∫–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ BPM
    const hash = this.hashString(track.id);
    const normalizedHash = (hash % 1000) / 1000; // 0-1
    
    return Math.round(range.min + normalizedHash * (range.max - range.min));
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä —ç–Ω–µ—Ä–≥–∏–∏ —Ç—Ä–µ–∫–∞
   */
  private calculateEnergyFactor(track: ProcessedTrack): number {
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∂–∞–Ω—Ä–∞
    const popularityFactor = track.popularity / 100;
    const genreEnergyMap: { [genre: string]: number } = {
      metal: 0.9,
      punk: 0.95,
      rock: 0.8,
      electronic: 0.7,
      pop: 0.6,
      indie: 0.5,
      jazz: 0.4,
      classical: 0.3
    };
    
    const genreEnergy = genreEnergyMap[track.genre.toLowerCase()] || 0.5;
    return (popularityFactor * 0.6) + (genreEnergy * 0.4);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∂–∞–Ω—Ä–∞ –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏
   */
  private getGenreModifier(genre: string): typeof CrystalPulseSystem.CONFIG.genrePulseModifiers.default {
    const normalizedGenre = genre.toLowerCase();
    const modifiers = CrystalPulseSystem.CONFIG.genrePulseModifiers as { [key: string]: typeof CrystalPulseSystem.CONFIG.genrePulseModifiers.default };
    return modifiers[normalizedGenre] || CrystalPulseSystem.CONFIG.genrePulseModifiers.default;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç mesh –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –≤ —Å—Ü–µ–Ω–µ –ø–æ ID
   */
  private findCrystalMesh(trackId: string): THREE.Mesh | undefined {
    if (!this.scene) return undefined;
    
    let foundMesh: THREE.Mesh | undefined;
    
    this.scene.traverse((object) => {
      if (object instanceof THREE.Mesh && 
          object.userData.trackId === trackId && 
          object.userData.isCrystal) {
        foundMesh = object;
      }
    });
    
    return foundMesh;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private hashString(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return Math.abs(hash);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª—å—Å–∞—Ü–∏–∏
   */
  private logPulseStats(): void {
    const genreStats: { [genre: string]: { count: number; avgSpeed: number; avgAmplitude: number } } = {};
    
    this.crystalTracks.forEach(crystal => {
      if (!genreStats[crystal.genre]) {
        genreStats[crystal.genre] = { count: 0, avgSpeed: 0, avgAmplitude: 0 };
      }
      
      genreStats[crystal.genre].count++;
      genreStats[crystal.genre].avgSpeed += crystal.pulseSpeed;
      genreStats[crystal.genre].avgAmplitude += crystal.pulseAmplitude;
    });
    
    console.log('üìä Crystal Pulse Statistics:');
    console.log(`  Sync groups: ${this.pulseGroups.size}`);
    console.log('  Genre pulse characteristics:');
    
    Object.entries(genreStats).forEach(([genre, stats]) => {
      const avgSpeed = (stats.avgSpeed / stats.count).toFixed(2);
      const avgAmplitude = (stats.avgAmplitude / stats.count).toFixed(3);
      console.log(`    ${genre}: ${stats.count} crystals, ${avgSpeed} Hz avg, ${avgAmplitude} amplitude avg`);
    });
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

  /**
   * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—É–ª—å—Å–∞—Ü–∏–∏
   */
  setEnabled(enabled: boolean): void {
    this.enabled = enabled;
    console.log(`üíì Crystal pulse system ${enabled ? 'enabled' : 'disabled'}`);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏
   */
  setGlobalSpeedMultiplier(multiplier: number): void {
    this.crystalTracks.forEach(crystal => {
      crystal.pulseSpeed *= multiplier;
    });
    console.log(`‚ö° Applied global speed multiplier: ${multiplier}`);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–º–ø–ª–∏—Ç—É–¥—ã –ø—É–ª—å—Å–∞—Ü–∏–∏
   */
  setGlobalAmplitudeMultiplier(multiplier: number): void {
    this.crystalTracks.forEach(crystal => {
      crystal.pulseAmplitude *= multiplier;
      crystal.pulseAmplitude = Math.min(CrystalPulseSystem.CONFIG.maxAmplitude, crystal.pulseAmplitude);
    });
    console.log(`üìà Applied global amplitude multiplier: ${multiplier}`);
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∂–∞–Ω—Ä–∞ –∫ –∫—Ä–∏—Å—Ç–∞–ª–ª—É
   */
  private applyGenreModifiers(crystal: CrystalTrack): void {
    const modifier = this.getGenreModifier(crystal.genre);
    
    crystal.pulseSpeed *= modifier.speedMultiplier;
    crystal.pulseAmplitude *= modifier.amplitudeMultiplier;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    crystal.pulseSpeed = Math.max(
      CrystalPulseSystem.CONFIG.minPulseSpeed,
      Math.min(CrystalPulseSystem.CONFIG.maxPulseSpeed, crystal.pulseSpeed)
    );
    
    crystal.pulseAmplitude = Math.min(CrystalPulseSystem.CONFIG.maxAmplitude, crystal.pulseAmplitude);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ø—É–ª—å—Å–∞—Ü–∏–∏
   */
  getPulseStats(): {
    totalCrystals: number;
    syncGroups: number;
    enabled: boolean;
    avgPulseSpeed: number;
    avgAmplitude: number;
  } {
    const totalCrystals = this.crystalTracks.length;
    const avgPulseSpeed = totalCrystals > 0 
      ? this.crystalTracks.reduce((sum, c) => sum + c.pulseSpeed, 0) / totalCrystals 
      : 0;
    const avgAmplitude = totalCrystals > 0 
      ? this.crystalTracks.reduce((sum, c) => sum + c.pulseAmplitude, 0) / totalCrystals 
      : 0;
    
    return {
      totalCrystals,
      syncGroups: this.pulseGroups.size,
      enabled: this.enabled,
      avgPulseSpeed,
      avgAmplitude
    };
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã –ø—É–ª—å—Å–∞—Ü–∏–∏
   */
  dispose(): void {
    console.log('üóëÔ∏è Disposing Crystal Pulse System...');
    
    this.crystalTracks = [];
    this.pulseGroups.clear();
    this.scene = undefined;
    this.enabled = false;
    
    console.log('‚úÖ Crystal Pulse System disposed');
  }
}