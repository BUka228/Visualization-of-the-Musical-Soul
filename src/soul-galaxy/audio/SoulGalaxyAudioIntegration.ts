import * as THREE from 'three';
import { AudioManager } from '../../audio/AudioManager';
import { CrystalTrack } from '../types';
import { CrystalShaderMaterial } from '../materials/CrystalShaderMaterial';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã —Å Soul Galaxy –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
 */
export class SoulGalaxyAudioIntegration {
  private audioManager: AudioManager;
  private currentPlayingTrack?: CrystalTrack;
  private currentPlayingMesh?: THREE.Mesh;
  private isTransitioning: boolean = false;
  private initialized: boolean = false;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  private static readonly AUDIO_CONFIG = {
    fadeInDuration: 800,      // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö
    fadeOutDuration: 600,     // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è –∞—É–¥–∏–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö
    transitionDelay: 200,     // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    visualIndicatorDuration: 30000, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ (30 —Å–µ–∫)
    pulseAmplification: 1.4,  // –£—Å–∏–ª–µ–Ω–∏–µ –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
    glowIntensification: 1.6  // –£—Å–∏–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
  };

  // –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
  private onTrackPlayStart?: (track: CrystalTrack) => void;
  private onTrackPlayEnd?: (track: CrystalTrack) => void;
  private onAudioError?: (track: CrystalTrack, error: Error) => void;
  private onTransitionStart?: (track: CrystalTrack) => void;
  private onTransitionEnd?: (track: CrystalTrack) => void;
  private onRotationStart?: (track: CrystalTrack, mesh: THREE.Mesh) => void;
  private onRotationStop?: (track: CrystalTrack) => void;

  constructor() {
    this.audioManager = new AudioManager();
    this.setupAudioCallbacks();
    console.log('üéµ Soul Galaxy Audio Integration created');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  initialize(): void {
    console.log('üéµ Initializing Soul Galaxy Audio Integration...');
    
    this.initialized = true;
    
    console.log('‚úÖ Soul Galaxy Audio Integration initialized');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  private setupAudioCallbacks(): void {
    this.audioManager.setOnPlayStart(() => {
      console.log('üéµ Audio playback started');
      
      if (this.currentPlayingTrack) {
        this.startVisualPlaybackIndicator();
        
        if (this.onTrackPlayStart) {
          this.onTrackPlayStart(this.currentPlayingTrack);
        }
      }
    });

    this.audioManager.setOnPlayEnd(() => {
      console.log('üéµ Audio playback ended');
      
      if (this.currentPlayingTrack) {
        this.stopVisualPlaybackIndicator();
        
        if (this.onTrackPlayEnd) {
          this.onTrackPlayEnd(this.currentPlayingTrack);
        }
        
        this.currentPlayingTrack = undefined;
        this.currentPlayingMesh = undefined;
      }
    });

    this.audioManager.setOnError((error: Error) => {
      console.error('‚ùå Audio playback error:', error.message);
      
      if (this.currentPlayingTrack) {
        this.stopVisualPlaybackIndicator();
        
        if (this.onAudioError) {
          this.onAudioError(this.currentPlayingTrack, error);
        }
        
        this.currentPlayingTrack = undefined;
        this.currentPlayingMesh = undefined;
      }
    });
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫ —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
   */
  async playTrackWithTransition(track: CrystalTrack, crystalMesh: THREE.Mesh): Promise<void> {
    if (!this.initialized) {
      console.warn('‚ö†Ô∏è Soul Galaxy Audio Integration not initialized');
      return;
    }

    console.log(`üéµ Playing track with transition: ${track.name} by ${track.artist}`);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    await this.stopCurrentTrack();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–≤—å—é URL
    if (!track.previewUrl) {
      console.warn(`‚ö†Ô∏è No preview URL for track: ${track.name}`);
      this.showNoPreviewIndicator(track, crystalMesh);
      return;
    }

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
      this.currentPlayingTrack = track;
      this.currentPlayingMesh = crystalMesh;
      this.isTransitioning = true;

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
      if (this.onTransitionStart) {
        this.onTransitionStart(track);
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      await this.delay(SoulGalaxyAudioIntegration.AUDIO_CONFIG.transitionDelay);

      // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø–ª–∞–≤–Ω—ã–º –ø–æ—è–≤–ª–µ–Ω–∏–µ–º
      await this.audioManager.playPreview(track.previewUrl);

      this.isTransitioning = false;

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
      if (this.onTransitionEnd) {
        this.onTransitionEnd(track);
      }

      console.log(`‚úÖ Track playback started: ${track.name}`);

    } catch (error) {
      console.error(`‚ùå Failed to play track: ${track.name}`, error);
      
      this.isTransitioning = false;
      this.currentPlayingTrack = undefined;
      this.currentPlayingMesh = undefined;

      if (this.onAudioError && track) {
        this.onAudioError(track, error instanceof Error ? error : new Error('Unknown audio error'));
      }

      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
   */
  async stopCurrentTrack(): Promise<void> {
    if (!this.currentPlayingTrack) {
      return;
    }

    console.log(`üõë Stopping current track: ${this.currentPlayingTrack.name}`);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
    this.stopVisualPlaybackIndicator();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
    this.audioManager.stopPreview();

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.currentPlayingTrack = undefined;
    this.currentPlayingMesh = undefined;
    this.isTransitioning = false;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–µ
   */
  private startVisualPlaybackIndicator(): void {
    if (!this.currentPlayingMesh || !this.currentPlayingTrack) {
      return;
    }

    console.log('üé® Starting visual playback indicator');

    const material = this.currentPlayingMesh.material;
    if (material instanceof CrystalShaderMaterial) {
      // –£—Å–∏–ª–∏–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const currentAmplitude = material.uniforms.pulseAmplitude.value;
      const amplifiedAmplitude = currentAmplitude * SoulGalaxyAudioIntegration.AUDIO_CONFIG.pulseAmplification;
      material.uniforms.pulseAmplitude.value = Math.min(amplifiedAmplitude, 1.0);

      // –£—Å–∏–ª–∏–≤–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
      const currentIntensity = material.uniforms.emissiveIntensity.value;
      const amplifiedIntensity = currentIntensity * SoulGalaxyAudioIntegration.AUDIO_CONFIG.glowIntensification;
      material.setEmissiveIntensity(amplifiedIntensity);

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      this.addPlaybackIndicator();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if (this.onRotationStart) {
      this.onRotationStart(this.currentPlayingTrack, this.currentPlayingMesh);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private stopVisualPlaybackIndicator(): void {
    if (!this.currentPlayingMesh || !this.currentPlayingTrack) {
      return;
    }

    console.log('üé® Stopping visual playback indicator');

    const material = this.currentPlayingMesh.material;
    if (material instanceof CrystalShaderMaterial) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –ø—É–ª—å—Å–∞—Ü–∏—é
      const amplifiedAmplitude = material.uniforms.pulseAmplitude.value;
      const normalAmplitude = amplifiedAmplitude / SoulGalaxyAudioIntegration.AUDIO_CONFIG.pulseAmplification;
      material.uniforms.pulseAmplitude.value = Math.max(normalAmplitude, 0.05);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
      const amplifiedIntensity = material.uniforms.emissiveIntensity.value;
      const normalIntensity = amplifiedIntensity / SoulGalaxyAudioIntegration.AUDIO_CONFIG.glowIntensification;
      material.setEmissiveIntensity(Math.max(normalIntensity, 0.1));

      // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      this.removePlaybackIndicator();
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if (this.onRotationStop) {
      this.onRotationStop(this.currentPlayingTrack);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private addPlaybackIndicator(): void {
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–Ω–∫–∏–π –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π –æ—Ä–µ–æ–ª –≤–æ–∫—Ä—É–≥ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    // –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–µ–π–¥–µ—Ä –∏–ª–∏ —á–∞—Å—Ç–∏—Ü—ã
    console.log('üéµ Adding playback visual indicator');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—Ç–∏—Ü—ã –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
  }

  /**
   * –£–±–∏—Ä–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private removePlaybackIndicator(): void {
    console.log('üéµ Removing playback visual indicator');
    
    // –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–≤—å—é
   */
  private showNoPreviewIndicator(track: CrystalTrack, crystalMesh: THREE.Mesh): void {
    console.log(`‚ÑπÔ∏è Showing no preview indicator for: ${track.name}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–≤—å—é
    const material = crystalMesh.material;
    if (material instanceof CrystalShaderMaterial) {
      // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
      const originalColor = material.getGenreColor();
      const noPreviewColor = new THREE.Color(0x666666); // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
      
      material.setCustomColor(noPreviewColor);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        material.setCustomColor(originalColor);
      }, 2000);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫
   */
  getCurrentPlayingTrack(): CrystalTrack | undefined {
    return this.currentPlayingTrack;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ —Ç—Ä–µ–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
   */
  isTrackPlaying(track: CrystalTrack): boolean {
    return this.currentPlayingTrack?.id === track.id && this.audioManager.isPlaying();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
   */
  isInTransition(): boolean {
    return this.isTransitioning;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
   */
  getPlaybackProgress(): number {
    return this.audioManager.getProgress();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
   */
  getPlaybackDuration(): number {
    return this.audioManager.getDuration();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  getCurrentTime(): number {
    return this.audioManager.getCurrentTime();
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  setVolume(volume: number): void {
    this.audioManager.setVolume(volume);
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  pausePlayback(): void {
    this.audioManager.pause();
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  resumePlayback(): void {
    this.audioManager.resume();
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
   */
  setOnTrackPlayStart(callback: (track: CrystalTrack) => void): void {
    this.onTrackPlayStart = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
   */
  setOnTrackPlayEnd(callback: (track: CrystalTrack) => void): void {
    this.onTrackPlayEnd = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ
   */
  setOnAudioError(callback: (track: CrystalTrack, error: Error) => void): void {
    this.onAudioError = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  setOnTransitionStart(callback: (track: CrystalTrack) => void): void {
    this.onTransitionStart = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  setOnTransitionEnd(callback: (track: CrystalTrack) => void): void {
    this.onTransitionEnd = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  setOnRotationStart(callback: (track: CrystalTrack, mesh: THREE.Mesh) => void): void {
    this.onRotationStart = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  setOnRotationStop(callback: (track: CrystalTrack) => void): void {
    this.onRotationStop = callback;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  getAudioStats(): {
    initialized: boolean;
    isPlaying: boolean;
    isTransitioning: boolean;
    currentTrack: string | null;
    playbackProgress: number;
    playbackDuration: number;
  } {
    return {
      initialized: this.initialized,
      isPlaying: this.audioManager.isPlaying(),
      isTransitioning: this.isTransitioning,
      currentTrack: this.currentPlayingTrack ? 
        `${this.currentPlayingTrack.name} by ${this.currentPlayingTrack.artist}` : null,
      playbackProgress: this.getPlaybackProgress(),
      playbackDuration: this.getPlaybackDuration()
    };
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∞—É–¥–∏–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  dispose(): void {
    console.log('üóëÔ∏è Disposing Soul Galaxy Audio Integration...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    this.stopCurrentTrack();

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    this.audioManager.dispose();

    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏
    this.onTrackPlayStart = undefined;
    this.onTrackPlayEnd = undefined;
    this.onAudioError = undefined;
    this.onTransitionStart = undefined;
    this.onTransitionEnd = undefined;
    this.onRotationStart = undefined;
    this.onRotationStop = undefined;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.currentPlayingTrack = undefined;
    this.currentPlayingMesh = undefined;
    this.isTransitioning = false;
    this.initialized = false;

    console.log('‚úÖ Soul Galaxy Audio Integration disposed');
  }
}