import * as THREE from 'three';
import { CentralSphere } from './CentralSphere';
import { CrystalTrackSystem } from './CrystalTrackSystem';
import { CrystalTrack } from '../types';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–æ–π –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏
 */
export class CentralSphereIntegration {
  private centralSphere: CentralSphere;
  private crystalSystem?: CrystalTrackSystem;
  private scene?: THREE.Scene;
  private currentPlayingTrack?: CrystalTrack;
  private genreWaveTimer?: number;

  constructor() {
    this.centralSphere = new CentralSphere();
  }

  initialize(scene: THREE.Scene, crystalSystem: CrystalTrackSystem): void {
    this.scene = scene;
    this.crystalSystem = crystalSystem;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å—Ñ–µ—Ä—É
    this.centralSphere.initialize(scene);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –∞—É–¥–∏–æ —Å–æ–±—ã—Ç–∏–π
    this.setupAudioCallbacks();
    
    console.log('üåü Central Sphere Integration initialized');
  }

  private setupAudioCallbacks(): void {
    if (!this.crystalSystem) return;

    const audioIntegration = this.crystalSystem.getAudioIntegration();
    
    // –ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    audioIntegration.setOnTrackPlayStart(async (track: CrystalTrack, audioElement: HTMLAudioElement) => {
      await this.onTrackPlayStart(track, audioElement);
    });
    
    // –ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    audioIntegration.setOnTrackPlayEnd((track: CrystalTrack) => {
      this.onTrackPlayEnd(track);
    });
    
    // –ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É–¥–∏–æ
    audioIntegration.setOnAudioError((track: CrystalTrack, error: Error) => {
      this.onAudioError(track, error);
    });
  }

  private async onTrackPlayStart(track: CrystalTrack, audioElement: HTMLAudioElement): Promise<void> {
    console.log(`üéµ Central Sphere: Track started - ${track.name}`);
    
    this.currentPlayingTrack = track;
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å—Ñ–µ—Ä—É –∫ —Ç—Ä–µ–∫—É
    this.centralSphere.setCurrentTrack(track);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    try {
      await this.centralSphere.connectAudioSource(audioElement);
      console.log(`‚úÖ Audio source connected for ${track.name}`);
    } catch (error) {
      console.error(`‚ùå Failed to connect audio source for ${track.name}:`, error);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –≤–æ–ª–Ω—ã –ø–æ –∂–∞–Ω—Ä—É
    this.startGenreWaves(track);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å—Ñ–µ—Ä—ã
    this.centralSphere.setIntensity(1.5);
  }

  private onTrackPlayEnd(track: CrystalTrack): void {
    console.log(`üéµ Central Sphere: Track ended - ${track.name}`);
    
    this.currentPlayingTrack = undefined;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –≤–æ–ª–Ω—ã
    this.stopGenreWaves();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    this.centralSphere.setIntensity(1.0);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç
    this.centralSphere.setCurrentTrack(undefined);
  }

  private onAudioError(track: CrystalTrack, error: Error): void {
    console.warn(`‚ö†Ô∏è Central Sphere: Audio error for ${track.name}:`, error);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
    this.onTrackPlayEnd(track);
  }

  // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª—É—á–∏ —É–±—Ä–∞–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  private startGenreWaves(track: CrystalTrack): void {
    // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω—ã –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    this.genreWaveTimer = window.setInterval(() => {
      if (this.currentPlayingTrack) {
        const genreColor = new THREE.Color(track.color);
        this.centralSphere.createGenreWave(track.genre, genreColor);
      }
    }, 2000);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É —Å—Ä–∞–∑—É
    const genreColor = new THREE.Color(track.color);
    this.centralSphere.createGenreWave(track.genre, genreColor);
  }

  private stopGenreWaves(): void {
    if (this.genreWaveTimer) {
      clearInterval(this.genreWaveTimer);
      this.genreWaveTimer = undefined;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  update(deltaTime: number): void {
    this.centralSphere.update(deltaTime);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  getCentralSphere(): CentralSphere {
    return this.centralSphere;
  }

  getCurrentPlayingTrack(): CrystalTrack | undefined {
    return this.currentPlayingTrack;
  }

  // –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  createManualGenreWave(genre: string, color: THREE.Color): void {
    this.centralSphere.createGenreWave(genre, color);
  }

  // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª—É—á–∏ —É–±—Ä–∞–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
  setSphereSize(scale: number): void {
    this.centralSphere.setSize(scale);
  }

  setSphereIntensity(intensity: number): void {
    this.centralSphere.setIntensity(intensity);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  dispose(): void {
    console.log('üóëÔ∏è Disposing Central Sphere Integration...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    this.stopGenreWaves();
    
    // –û—á–∏—â–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å—Ñ–µ—Ä—É
    this.centralSphere.dispose();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
    this.crystalSystem = undefined;
    this.scene = undefined;
    this.currentPlayingTrack = undefined;
    
    console.log('‚úÖ Central Sphere Integration disposed');
  }
}