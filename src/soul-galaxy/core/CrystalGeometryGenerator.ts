import * as THREE from 'three';
import { ProcessedTrack } from '../../types';

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–µ—Ä–æ–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
export class CrystalGeometryGenerator {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  private static readonly CONFIG = {
    baseComplexity: 1,        // –ë–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (subdivisions)
    maxComplexity: 3,         // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    deformationStrength: 0.3, // –°–∏–ª–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ (0-1)
    facetVariation: 0.4,      // –í–∞—Ä–∏–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä–∞–Ω–µ–π
    sharpnessVariation: 0.6,  // –í–∞—Ä–∏–∞—Ü–∏—è –æ—Å—Ç—Ä–æ—Ç—ã –≥—Ä–∞–Ω–µ–π
    genreShapeFactors: {      // –§–∞–∫—Ç–æ—Ä—ã —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
      metal: { elongation: 1.2, sharpness: 1.4, roughness: 1.3 },
      rock: { elongation: 1.1, sharpness: 1.2, roughness: 1.1 },
      punk: { elongation: 0.9, sharpness: 1.5, roughness: 1.4 },
      electronic: { elongation: 1.3, sharpness: 0.8, roughness: 0.7 },
      jazz: { elongation: 1.0, sharpness: 0.9, roughness: 0.8 },
      classical: { elongation: 1.1, sharpness: 0.7, roughness: 0.6 },
      pop: { elongation: 1.0, sharpness: 1.0, roughness: 0.9 },
      indie: { elongation: 1.0, sharpness: 1.1, roughness: 1.0 },
      default: { elongation: 1.0, sharpness: 1.0, roughness: 1.0 }
    }
  };

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è —Ç—Ä–µ–∫–∞
   */
  static generateCrystalGeometry(track: ProcessedTrack): THREE.BufferGeometry {
    console.log(`üîÆ Generating crystal geometry for "${track.name}" (${track.genre})`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    const complexity = this.calculateComplexity(track);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Ñ–æ—Ä–º—ã –¥–ª—è –∂–∞–Ω—Ä–∞
    const shapeFactors = this.getGenreShapeFactors(track.genre);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é
    const baseGeometry = this.createBaseGeometry(track.size, complexity);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
    this.applyGenreDeformation(baseGeometry, shapeFactors, track);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    this.applyRandomVariations(baseGeometry, track);
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
    this.optimizeGeometry(baseGeometry);
    
    console.log(`‚úÖ Crystal geometry generated: ${baseGeometry.attributes.position.count} vertices`);
    return baseGeometry;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç—Ä–µ–∫–∞
   */
  private static calculateComplexity(track: ProcessedTrack): number {
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é
    const popularityFactor = track.popularity / 100;
    
    // –î–ª–∏–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
    const durationFactor = Math.min(1, track.duration / 300); // 5 –º–∏–Ω—É—Ç = –º–∞–∫—Å–∏–º—É–º
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
    const complexityFactor = (popularityFactor * 0.7) + (durationFactor * 0.3);
    
    const complexity = this.CONFIG.baseComplexity + 
                      Math.floor(complexityFactor * (this.CONFIG.maxComplexity - this.CONFIG.baseComplexity));
    
    return Math.max(this.CONFIG.baseComplexity, Math.min(this.CONFIG.maxComplexity, complexity));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä—ã —Ñ–æ—Ä–º—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
   */
  private static getGenreShapeFactors(genre: string): typeof CrystalGeometryGenerator.CONFIG.genreShapeFactors.default {
    const normalizedGenre = genre.toLowerCase();
    const shapeFactors = this.CONFIG.genreShapeFactors as { [key: string]: typeof CrystalGeometryGenerator.CONFIG.genreShapeFactors.default };
    return shapeFactors[normalizedGenre] || this.CONFIG.genreShapeFactors.default;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  private static createBaseGeometry(size: number, complexity: number): THREE.BufferGeometry {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ—Å–∞—ç–¥—Ä –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ (20 –≥—Ä–∞–Ω–µ–π)
    const geometry = new THREE.IcosahedronGeometry(size, complexity);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    this.addCustomAttributes(geometry);
    
    return geometry;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private static addCustomAttributes(geometry: THREE.BufferGeometry): void {
    const positionAttribute = geometry.attributes.position;
    const normalAttribute = geometry.attributes.normal;
    const vertexCount = positionAttribute.count;
    
    // –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏)
    const originalPositions = new Float32Array(vertexCount * 3);
    originalPositions.set(positionAttribute.array as Float32Array);
    geometry.setAttribute('originalPosition', new THREE.BufferAttribute(originalPositions, 3));
    
    // –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
    const randomValues = new Float32Array(vertexCount);
    for (let i = 0; i < vertexCount; i++) {
      randomValues[i] = Math.random();
    }
    geometry.setAttribute('randomValue', new THREE.BufferAttribute(randomValues, 1));
    
    // –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    const distances = new Float32Array(vertexCount);
    const positions = positionAttribute.array as Float32Array;
    for (let i = 0; i < vertexCount; i++) {
      const x = positions[i * 3];
      const y = positions[i * 3 + 1];
      const z = positions[i * 3 + 2];
      distances[i] = Math.sqrt(x * x + y * y + z * z);
    }
    geometry.setAttribute('distanceFromCenter', new THREE.BufferAttribute(distances, 1));
    
    // –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ñ–∞–∑—ã –ø—É–ª—å—Å–∞—Ü–∏–∏ (—Å–ª—É—á–∞–π–Ω–∞—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã)
    const pulsePhases = new Float32Array(vertexCount);
    for (let i = 0; i < vertexCount; i++) {
      pulsePhases[i] = Math.random() * Math.PI * 2;
    }
    geometry.setAttribute('pulsePhase', new THREE.BufferAttribute(pulsePhases, 1));
    
    // –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è BPM –º–Ω–æ–∂–∏—Ç–µ–ª—è (–µ–¥–∏–Ω–∏—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
    const bpmMultipliers = new Float32Array(vertexCount);
    for (let i = 0; i < vertexCount; i++) {
      bpmMultipliers[i] = 1.0;
    }
    geometry.setAttribute('bpmMultiplier', new THREE.BufferAttribute(bpmMultipliers, 1));
    
    // –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–µ–π –≥—Ä–∞–Ω–µ–π (–∫–æ–ø–∏—Ä—É–µ–º vertex normals)
    const facetNormals = new Float32Array(vertexCount * 3);
    if (normalAttribute) {
      facetNormals.set(normalAttribute.array as Float32Array);
    } else {
      // –ï—Å–ª–∏ –Ω–æ—Ä–º–∞–ª–∏ –µ—â–µ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
      geometry.computeVertexNormals();
      const computedNormals = geometry.attributes.normal.array as Float32Array;
      facetNormals.set(computedNormals);
    }
    geometry.setAttribute('facetNormal', new THREE.BufferAttribute(facetNormals, 3));
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞
   */
  private static applyGenreDeformation(
    geometry: THREE.BufferGeometry, 
    shapeFactors: typeof CrystalGeometryGenerator.CONFIG.genreShapeFactors.default,
    track: ProcessedTrack
  ): void {
    const positions = geometry.attributes.position.array as Float32Array;
    const randomValues = geometry.attributes.randomValue.array as Float32Array;
    const distances = geometry.attributes.distanceFromCenter.array as Float32Array;
    
    for (let i = 0; i < positions.length; i += 3) {
      const vertexIndex = i / 3;
      const random = randomValues[vertexIndex];
      const distance = distances[vertexIndex];
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      let x = positions[i];
      let y = positions[i + 1];
      let z = positions[i + 2];
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–ª–∏–Ω–µ–Ω–∏–µ (–¥–ª—è –º–µ—Ç–∞–ª–ª–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏)
      if (shapeFactors.elongation !== 1.0) {
        y *= shapeFactors.elongation;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç—Ä–æ—Ç—É (–¥–µ–ª–∞–µ–º –≥—Ä–∞–Ω–∏ –±–æ–ª–µ–µ –æ—Å—Ç—Ä—ã–º–∏)
      if (shapeFactors.sharpness > 1.0) {
        const sharpnessFactor = 1.0 + (shapeFactors.sharpness - 1.0) * random;
        const length = Math.sqrt(x * x + y * y + z * z);
        if (length > 0) {
          const normalizedX = x / length;
          const normalizedY = y / length;
          const normalizedZ = z / length;
          
          x = normalizedX * length * sharpnessFactor;
          y = normalizedY * length * sharpnessFactor;
          z = normalizedZ * length * sharpnessFactor;
        }
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å (—Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏)
      if (shapeFactors.roughness > 1.0) {
        const roughnessFactor = (random - 0.5) * this.CONFIG.deformationStrength * shapeFactors.roughness;
        const length = Math.sqrt(x * x + y * y + z * z);
        
        x += x * roughnessFactor;
        y += y * roughnessFactor;
        z += z * roughnessFactor;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      positions[i] = x;
      positions[i + 1] = y;
      positions[i + 2] = z;
    }
    
    geometry.attributes.position.needsUpdate = true;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  private static applyRandomVariations(geometry: THREE.BufferGeometry, track: ProcessedTrack): void {
    const positions = geometry.attributes.position.array as Float32Array;
    const randomValues = geometry.attributes.randomValue.array as Float32Array;
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ç—Ä–µ–∫–∞
    const seed = this.hashString(track.id);
    const rng = this.createSeededRandom(seed);
    
    for (let i = 0; i < positions.length; i += 3) {
      const vertexIndex = i / 3;
      const baseRandom = randomValues[vertexIndex];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º seeded random –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      const seededRandom = rng();
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –≥—Ä–∞–Ω–µ–π
      const facetVariation = (seededRandom - 0.5) * this.CONFIG.facetVariation;
      const variationFactor = 1.0 + facetVariation * baseRandom;
      
      positions[i] *= variationFactor;
      positions[i + 1] *= variationFactor;
      positions[i + 2] *= variationFactor;
    }
    
    geometry.attributes.position.needsUpdate = true;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private static optimizeGeometry(geometry: THREE.BufferGeometry): void {
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏ –ø–æ—Å–ª–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    geometry.computeVertexNormals();
    
    // –í—ã—á–∏—Å–ª—è–µ–º bounding sphere –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ culling
    geometry.computeBoundingSphere();
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤–µ—Ä—à–∏–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    // geometry.mergeVertices(); // –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å UV mapping, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GPU
    if (!geometry.index) {
      geometry = geometry.toNonIndexed();
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed
   */
  private static hashString(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return Math.abs(hash);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å seed
   */
  private static createSeededRandom(seed: number): () => number {
    let state = seed;
    return function() {
      state = (state * 1664525 + 1013904223) % 4294967296;
      return state / 4294967296;
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–∫–∞
   */
  static createAdvancedCrystalGeometry(track: ProcessedTrack): {
    geometry: THREE.BufferGeometry;
    facetCount: number;
    roughnessLevel: number;
  } {
    const geometry = this.generateCrystalGeometry(track);
    const shapeFactors = this.getGenreShapeFactors(track.genre);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const complexity = this.calculateComplexity(track);
    const baseFacets = 20; // –ò–∫–æ—Å–∞—ç–¥—Ä –∏–º–µ–µ—Ç 20 –≥—Ä–∞–Ω–µ–π
    const facetCount = baseFacets * Math.pow(4, complexity); // –ö–∞–∂–¥–æ–µ subdivision —É–º–Ω–æ–∂–∞–µ—Ç –Ω–∞ 4
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç–∏
    const roughnessLevel = shapeFactors.roughness * (0.5 + Math.random() * 0.5);
    
    return {
      geometry,
      facetCount,
      roughnessLevel
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è LOD (Level of Detail)
   */
  static createLODGeometry(track: ProcessedTrack, lodLevel: number): THREE.BufferGeometry {
    // –£–º–µ–Ω—å—à–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    const originalComplexity = this.calculateComplexity(track);
    const lodComplexity = Math.max(0, originalComplexity - lodLevel);
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    const geometry = new THREE.IcosahedronGeometry(track.size, lodComplexity);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    const shapeFactors = this.getGenreShapeFactors(track.genre);
    const positions = geometry.attributes.position.array as Float32Array;
    
    for (let i = 0; i < positions.length; i += 3) {
      // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∂–∞–Ω—Ä–∞
      if (shapeFactors.elongation !== 1.0) {
        positions[i + 1] *= shapeFactors.elongation;
      }
    }
    
    geometry.attributes.position.needsUpdate = true;
    geometry.computeVertexNormals();
    geometry.computeBoundingSphere();
    
    return geometry;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
   */
  static getGeometryStats(geometry: THREE.BufferGeometry): {
    vertexCount: number;
    faceCount: number;
    memoryUsage: number; // –≤ –±–∞–π—Ç–∞—Ö
  } {
    const vertexCount = geometry.attributes.position.count;
    const faceCount = geometry.index ? geometry.index.count / 3 : vertexCount / 3;
    
    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    let memoryUsage = 0;
    Object.values(geometry.attributes).forEach(attribute => {
      memoryUsage += attribute.array.byteLength;
    });
    if (geometry.index) {
      memoryUsage += geometry.index.array.byteLength;
    }
    
    return {
      vertexCount,
      faceCount,
      memoryUsage
    };
  }
}