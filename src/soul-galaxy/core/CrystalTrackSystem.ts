import * as THREE from 'three';
import { ProcessedTrack } from '../../types';
import { CrystalTrackSystem as ICrystalTrackSystem, CrystalTrack } from '../types';
import { CrystalGeometryGenerator } from './CrystalGeometryGenerator';
import { CrystalPulseSystem } from '../effects/CrystalPulseSystem';
import { CrystalShaderMaterial } from '../materials/CrystalShaderMaterial';
import { AlbumTextureManager } from '../materials/AlbumTextureManager';
import { TextureClaritySystem } from '../materials/TextureClaritySystem';
import { CrystalHoverSystem } from '../interaction/CrystalHoverSystem';
import { SoulGalaxyAudioIntegration } from '../audio/SoulGalaxyAudioIntegration';
import { CinematicCameraController } from '../camera/CinematicCameraController';
import { CrystalRotationSystem } from '../effects/CrystalRotationSystem';

/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–∫–∞–º–∏
 * –°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω–æ–µ –∑–≤–µ–∑–¥–Ω–æ–µ —Å–∫–æ–ø–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ —Å –º–µ–¥–ª–µ–Ω–Ω—ã–º –≤—Ä–∞—â–µ–Ω–∏–µ–º
 */
export class CrystalTrackSystem implements ICrystalTrackSystem {
  private scene?: THREE.Scene;
  private camera?: THREE.Camera;
  private crystalCluster?: THREE.Group;
  private crystalTracks: CrystalTrack[] = [];
  private clusterRotationSpeed: number = 0.001; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
  private initialized: boolean = false;
  private pulseSystem: CrystalPulseSystem;
  private albumTextureManager: AlbumTextureManager;
  private textureClaritySystem: TextureClaritySystem;
  private hoverSystem: CrystalHoverSystem;
  private audioIntegration: SoulGalaxyAudioIntegration;
  private cameraController?: CinematicCameraController;
  private rotationSystem: CrystalRotationSystem;

  constructor() {
    this.pulseSystem = new CrystalPulseSystem();
    this.albumTextureManager = new AlbumTextureManager({
      maxTextureSize: 512,
      cacheSize: 100,
      enableCompression: true,
      blurIntensity: 0.3,
      distortionStrength: 0.1,
      highQualityTextureSize: 1024,
      enableHighQualityPreload: true
    });
    this.textureClaritySystem = new TextureClaritySystem(this.albumTextureManager, {
      transitionDuration: 1500,
      enableSmoothInterpolation: true,
      preloadHighQuality: true
    });
    this.hoverSystem = new CrystalHoverSystem();
    this.audioIntegration = new SoulGalaxyAudioIntegration();
    this.rotationSystem = new CrystalRotationSystem({
      baseRotationSpeed: 0.3,
      bpmSpeedMultiplier: 0.005,
      transitionDuration: 2000,
      useEnergyFallback: true,
      rotationAxes: new THREE.Vector3(0.2, 1.0, 0.3)
    });
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
  private static readonly CLUSTER_CONFIG = {
    radius: 30,           // –†–∞–¥–∏—É—Å –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–∫–æ–ø–ª–µ–Ω–∏—è
    heightVariation: 15,  // –í–∞—Ä–∏–∞—Ü–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ
    minDistance: 2,       // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏
    rotationSpeed: 0.001  // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
  };

  initialize(scene: THREE.Scene, camera: THREE.Camera, container?: HTMLElement): void {
    console.log('üîÆ Initializing Crystal Track System...');
    
    this.scene = scene;
    this.camera = camera;
    this.initialized = true;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è HUD
    this.hoverSystem.initialize(scene, camera, container);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    this.audioIntegration.initialize();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
    this.setupRotationCallbacks();
    
    console.log('‚úÖ Crystal Track System initialized');
  }

  async createCrystalCluster(tracks: ProcessedTrack[]): Promise<void> {
    if (!this.initialized || !this.scene) {
      console.warn('‚ö†Ô∏è Crystal Track System not initialized');
      return;
    }

    console.log(`üåü Creating crystal cluster from ${tracks.length} tracks...`);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä
    this.clearCluster();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
    this.crystalCluster = new THREE.Group();
    this.crystalCluster.name = 'CrystalCluster';

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('üñºÔ∏è Preloading album textures...');
    await this.albumTextureManager.preloadTextures(tracks);
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞
    console.log('üé® Preloading high-quality textures for focus...');
    await this.textureClaritySystem.preloadHighQualityTextures(tracks);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ProcessedTrack –≤ CrystalTrack –∏ —Å–æ–∑–¥–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
    this.crystalTracks = await Promise.all(
      tracks.map((track, index) => this.createCrystalTrack(track, index, tracks.length))
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä
    this.crystalTracks.forEach(crystalTrack => {
      const crystalMesh = this.createCrystalMesh(crystalTrack);
      this.crystalCluster!.add(crystalMesh);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä –≤ —Å—Ü–µ–Ω—É
    this.scene.add(this.crystalCluster);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—É–ª—å—Å–∞—Ü–∏–∏
    this.pulseSystem.initialize(this.scene, this.crystalTracks);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
    this.hoverSystem.setCrystalTracks(this.crystalTracks, this.crystalCluster);

    console.log(`‚úÖ Crystal cluster created with ${this.crystalTracks.length} crystals`);
    this.logClusterStats();
    this.logTextureStats();
  }

  generateCrystalGeometry(track: ProcessedTrack): THREE.BufferGeometry {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    return CrystalGeometryGenerator.generateCrystalGeometry(track);
  }

  createCrystalMaterial(crystalTrack: CrystalTrack): THREE.ShaderMaterial {
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–µ–π–¥–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
    const genreModifiers = this.getGenreModifiers(crystalTrack.genre);
    
    const material = CrystalShaderMaterial.createForGenre(crystalTrack.genre, {
      albumTexture: crystalTrack.albumTexture,
      emissiveIntensity: crystalTrack.emissiveIntensity,
      pulseAmplitude: crystalTrack.pulseAmplitude * genreModifiers.amplitudeMultiplier,
      pulseSpeed: crystalTrack.pulseSpeed * genreModifiers.speedMultiplier,
      sharpness: genreModifiers.sharpness
    });
    
    return material;
  }

  updatePulsation(deltaTime: number): void {
    if (!this.initialized || this.crystalTracks.length === 0) {
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –ø—É–ª—å—Å–∞—Ü–∏–∏
    this.pulseSystem.updatePulsation(deltaTime);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    this.hoverSystem.update(deltaTime);
  }

  setPulsationFromBPM(track: ProcessedTrack, bpm?: number): void {
    const crystalTrack = this.crystalTracks.find(ct => ct.id === track.id);
    if (!crystalTrack) return;

    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ
    this.pulseSystem.setPulsationFromBPM(crystalTrack, bpm);
  }

  rotateCluster(deltaTime: number): void {
    if (!this.crystalCluster) return;

    // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Å–∫–æ–ø–ª–µ–Ω–∏—è
    this.crystalCluster.rotation.y += this.clusterRotationSpeed * deltaTime;
    this.crystalCluster.rotation.x += this.clusterRotationSpeed * 0.3 * deltaTime;
  }

  focusOnCrystal(crystal: CrystalTrack): void {
    // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–∫—É—Å–∞ - –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –≤ –∑–∞–¥–∞—á–∞—Ö –∫–∞–º–µ—Ä—ã
    console.log(`üéØ Focusing on crystal: ${crystal.name} by ${crystal.artist}`);
    
    crystal.isFocused = true;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–Ω–∏—è —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    const mesh = this.findCrystalMesh(crystal.id);
    if (mesh && mesh.material instanceof CrystalShaderMaterial) {
      mesh.material.setFocused(true);
      mesh.material.setEmissiveIntensity(0.8);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏
   */
  updateMousePosition(mouseX: number, mouseY: number): void {
    this.hoverSystem.updateMousePosition(mouseX, mouseY);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
   */
  getHoverSystem(): CrystalHoverSystem {
    return this.hoverSystem;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –Ω–∞–≤–µ–¥–µ–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª
   */
  getHoveredCrystal(): CrystalTrack | undefined {
    return this.hoverSystem.getHoveredCrystal();
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ)
   */
  clearHover(): void {
    this.hoverSystem.clearHover();
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞–º–µ—Ä—ã –¥–ª—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
   */
  setCameraController(cameraController: CinematicCameraController): void {
    this.cameraController = cameraController;
    console.log('üìπ Camera controller integrated with Crystal Track System');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫—Ä–∏—Å—Ç–∞–ª–ª—É –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
   */
  async handleCrystalClick(trackId: string): Promise<void> {
    const crystalTrack = this.crystalTracks.find(ct => ct.id === trackId);
    const crystalMesh = this.findCrystalMesh(trackId);
    
    if (!crystalTrack || !crystalMesh) {
      console.warn(`‚ö†Ô∏è Crystal not found for track ID: ${trackId}`);
      return;
    }

    console.log(`üéµ Crystal clicked: ${crystalTrack.name} by ${crystalTrack.artist}`);

    try {
      // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ
      this.clearHover();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (this.cameraController) {
        await this.focusOnCrystalWithAnimation(crystalTrack);
      } else {
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π —Ñ–æ–∫—É—Å
        this.focusOnCrystal(crystalTrack);
      }
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      await this.audioIntegration.playTrackWithTransition(crystalTrack, crystalMesh);
      
    } catch (error) {
      console.error(`‚ùå Failed to play crystal: ${crystalTrack.name}`, error);
    }
  }

  /**
   * –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–µ —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π –∫–∞–º–µ—Ä—ã
   */
  async focusOnCrystalWithAnimation(crystal: CrystalTrack): Promise<void> {
    if (!this.cameraController) {
      console.warn('‚ö†Ô∏è Camera controller not available, using basic focus');
      this.focusOnCrystal(crystal);
      return;
    }

    console.log(`üé¨ Starting cinematic focus on crystal: ${crystal.name} by ${crystal.artist}`);

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫–∞–º–µ—Ä—ã
      await this.cameraController.focusOnCrystal(crystal);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
      crystal.isFocused = true;
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–Ω–∏—è —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
      const mesh = this.findCrystalMesh(crystal.id);
      if (mesh && mesh.material instanceof CrystalShaderMaterial) {
        mesh.material.setFocused(true);
        mesh.material.setEmissiveIntensity(0.8);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–µ
        await this.textureClaritySystem.transitionToHighQuality(
          crystal,
          mesh.material,
          () => {
            console.log(`üé® High-quality texture transition completed for ${crystal.name}`);
          }
        );
      }
      
      console.log(`‚úÖ Cinematic focus completed on crystal: ${crystal.name}`);
      
    } catch (error) {
      console.error(`‚ùå Failed to focus on crystal with animation: ${crystal.name}`, error);
      // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π —Ñ–æ–∫—É—Å
      this.focusOnCrystal(crystal);
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–º–µ—Ä—É –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  async returnCameraToPreviousPosition(): Promise<void> {
    if (!this.cameraController) {
      console.warn('‚ö†Ô∏è Camera controller not available');
      return;
    }

    console.log('üîÑ Returning camera to previous position');

    try {
      // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å —Ç–µ–∫—É—â–µ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
      const focusedCrystal = this.cameraController.getFocusedCrystal();
      if (focusedCrystal) {
        focusedCrystal.isFocused = false;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç—É—Ä—É
        const mesh = this.findCrystalMesh(focusedCrystal.id);
        if (mesh && mesh.material instanceof CrystalShaderMaterial) {
          mesh.material.setFocused(false);
          mesh.material.setEmissiveIntensity(0.3);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ä–µ–¥–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–µ
          await this.textureClaritySystem.transitionToMediumQuality(
            focusedCrystal,
            mesh.material,
            () => {
              console.log(`üé® Medium-quality texture transition completed for ${focusedCrystal.name}`);
            }
          );
        }
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞–º–µ—Ä—ã
      await this.cameraController.returnToPreviousPosition();
      
      console.log('‚úÖ Camera returned to previous position');
      
    } catch (error) {
      console.error('‚ùå Failed to return camera to previous position:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–∞–º–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞
   */
  isCameraFocused(): boolean {
    return this.cameraController ? this.cameraController.isFocused() : false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª (—á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É)
   */
  getFocusedCrystal(): CrystalTrack | undefined {
    return this.cameraController ? this.cameraController.getFocusedCrystal() : undefined;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
   */
  getAudioIntegration(): SoulGalaxyAudioIntegration {
    return this.audioIntegration;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
   */
  getRotationSystem(): CrystalRotationSystem {
    return this.rotationSystem;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫
   */
  getCurrentPlayingTrack(): CrystalTrack | undefined {
    return this.audioIntegration.getCurrentPlayingTrack();
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  async stopCurrentPlayback(): Promise<void> {
    await this.audioIntegration.stopCurrentTrack();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ —Ç—Ä–µ–∫
   */
  isTrackPlaying(trackId: string): boolean {
    const crystalTrack = this.crystalTracks.find(ct => ct.id === trackId);
    return crystalTrack ? this.audioIntegration.isTrackPlaying(crystalTrack) : false;
  }

  dispose(): void {
    console.log('üóëÔ∏è Disposing Crystal Track System...');
    
    // Dispose of the rotation system
    this.rotationSystem.dispose();
    
    // Dispose of the audio integration
    this.audioIntegration.dispose();
    
    // Dispose of the hover system
    this.hoverSystem.dispose();
    
    // Dispose of the pulse system
    this.pulseSystem.dispose();
    
    // Dispose of the texture clarity system
    this.textureClaritySystem.dispose();
    
    // Dispose of the album texture manager
    this.albumTextureManager.dispose();
    
    this.clearCluster();
    this.crystalTracks = [];
    this.scene = undefined;
    this.camera = undefined;
    this.initialized = false;
    
    console.log('‚úÖ Crystal Track System disposed');
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private async createCrystalTrack(track: ProcessedTrack, index: number, total: number): Promise<CrystalTrack> {
    // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ
    const position = this.calculateClusterPosition(index, total);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const crystalData = CrystalGeometryGenerator.createAdvancedCrystalGeometry(track);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∞–ª—å–±–æ–º–∞
    let albumTexture: THREE.Texture | undefined;
    try {
      albumTexture = await this.albumTextureManager.getAlbumTexture(track);
    } catch (error) {
      console.warn(`Failed to load album texture for ${track.name}:`, error);
      albumTexture = this.albumTextureManager.getFallbackTexture(track.genre);
    }
    
    return {
      ...track,
      position,
      crystalGeometry: crystalData.geometry,
      facetCount: crystalData.facetCount,
      roughnessLevel: crystalData.roughnessLevel,
      pulseSpeed: 1.0 + Math.random() * 2.0, // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª—å—Å–∞—Ü–∏–∏
      pulseAmplitude: 0.1 + Math.random() * 0.1,
      pulsePhase: Math.random() * Math.PI * 2,
      genreColor: new THREE.Color(track.color),
      emissiveIntensity: 0.3,
      albumTexture,
      isFocused: false,
      isHovered: false,
      distanceFromCenter: position.length()
    };
  }

  private calculateClusterPosition(index: number, total: number): THREE.Vector3 {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–∫–æ–ø–ª–µ–Ω–∏—è
    const phi = Math.acos(1 - 2 * (index / total)); // –ü–æ–ª—è—Ä–Ω—ã–π —É–≥–æ–ª
    const theta = Math.sqrt(total * Math.PI) * phi; // –ê–∑–∏–º—É—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª (—Å–ø–∏—Ä–∞–ª—å –§–∏–±–æ–Ω–∞—á—á–∏)
    
    // –í–∞—Ä–∏–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
    const radiusVariation = 0.7 + Math.random() * 0.6; // 0.7 - 1.3
    const radius = CrystalTrackSystem.CLUSTER_CONFIG.radius * radiusVariation;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const x = radius * Math.sin(phi) * Math.cos(theta);
    const y = radius * Math.cos(phi) + (Math.random() - 0.5) * CrystalTrackSystem.CLUSTER_CONFIG.heightVariation;
    const z = radius * Math.sin(phi) * Math.sin(theta);
    
    return new THREE.Vector3(x, y, z);
  }

  private createCrystalMesh(crystalTrack: CrystalTrack): THREE.Mesh {
    const geometry = crystalTrack.crystalGeometry;
    const material = this.createCrystalMaterial(crystalTrack);
    
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.copy(crystalTrack.position);
    mesh.castShadow = true;
    mesh.receiveShadow = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    mesh.userData = {
      trackId: crystalTrack.id,
      trackName: crystalTrack.name,
      artist: crystalTrack.artist,
      genre: crystalTrack.genre,
      isCrystal: true
    };
    
    return mesh;
  }

  private findCrystalMesh(trackId: string): THREE.Mesh | undefined {
    if (!this.crystalCluster) return undefined;
    
    return this.crystalCluster.children.find(child => 
      child instanceof THREE.Mesh && child.userData.trackId === trackId
    ) as THREE.Mesh | undefined;
  }

  private clearCluster(): void {
    if (this.crystalCluster && this.scene) {
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤—Å–µ—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
      this.crystalCluster.children.forEach(child => {
        if (child instanceof THREE.Mesh) {
          child.geometry.dispose();
          if (child.material instanceof THREE.Material) {
            child.material.dispose();
          }
        }
      });
      
      // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä –∏–∑ —Å—Ü–µ–Ω—ã
      this.scene.remove(this.crystalCluster);
      this.crystalCluster = undefined;
    }
  }

  private logClusterStats(): void {
    if (this.crystalTracks.length === 0) return;
    
    const genreCount: { [genre: string]: number } = {};
    let totalDistance = 0;
    
    this.crystalTracks.forEach(crystal => {
      genreCount[crystal.genre] = (genreCount[crystal.genre] || 0) + 1;
      totalDistance += crystal.distanceFromCenter;
    });
    
    const avgDistance = totalDistance / this.crystalTracks.length;
    
    console.log('üìä Crystal Cluster Statistics:');
    console.log(`  Total crystals: ${this.crystalTracks.length}`);
    console.log(`  Average distance from center: ${avgDistance.toFixed(2)}`);
    console.log('  Genre distribution:');
    
    Object.entries(genreCount)
      .sort(([,a], [,b]) => b - a)
      .forEach(([genre, count]) => {
        console.log(`    ${genre}: ${count} crystals`);
      });
  }

  private logTextureStats(): void {
    const stats = this.albumTextureManager.getCacheStats();
    
    console.log('üñºÔ∏è Album Texture Statistics:');
    console.log(`  Cached textures: ${stats.cachedTextures}`);
    console.log(`  Loading textures: ${stats.loadingTextures}`);
    console.log(`  Fallback textures: ${stats.fallbackTextures}`);
    console.log(`  Estimated memory usage: ${(stats.memoryUsage / 1024 / 1024).toFixed(2)} MB`);
    
    // Log texture distribution by genre
    const texturesByGenre: { [genre: string]: { loaded: number; fallback: number } } = {};
    
    this.crystalTracks.forEach(crystal => {
      if (!texturesByGenre[crystal.genre]) {
        texturesByGenre[crystal.genre] = { loaded: 0, fallback: 0 };
      }
      
      if (crystal.albumTexture) {
        // Check if it's a fallback texture by checking if track has imageUrl
        if (crystal.imageUrl) {
          texturesByGenre[crystal.genre].loaded++;
        } else {
          texturesByGenre[crystal.genre].fallback++;
        }
      }
    });
    
    console.log('  Texture distribution by genre:');
    Object.entries(texturesByGenre)
      .sort(([,a], [,b]) => (b.loaded + b.fallback) - (a.loaded + a.fallback))
      .forEach(([genre, counts]) => {
        const total = counts.loaded + counts.fallback;
        console.log(`    ${genre}: ${total} total (${counts.loaded} loaded, ${counts.fallback} fallback)`);
      });
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
  getCrystalTracks(): CrystalTrack[] {
    return [...this.crystalTracks];
  }

  getCrystalCluster(): THREE.Group | undefined {
    return this.crystalCluster;
  }

  getClusterRotationSpeed(): number {
    return this.clusterRotationSpeed;
  }

  setClusterRotationSpeed(speed: number): void {
    this.clusterRotationSpeed = speed;
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤—Ä–∞—â–µ–Ω–∏—è —Å –∞—É–¥–∏–æ
   */
  private setupRotationCallbacks(): void {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
    this.audioIntegration.setOnRotationStart((track: CrystalTrack, mesh: THREE.Mesh) => {
      console.log(`üîÑ Starting rotation for playing crystal: ${track.name} by ${track.artist}`);
      this.rotationSystem.startRotation(track, mesh);
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    this.audioIntegration.setOnRotationStop((track: CrystalTrack) => {
      console.log(`‚èπÔ∏è Stopping rotation for crystal: ${track.name} by ${track.artist}`);
      this.rotationSystem.stopRotation(track.id);
    });

    console.log('üîó Crystal rotation callbacks configured');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –∂–∞–Ω—Ä–∞
   */
  private getGenreModifiers(genre: string): {
    speedMultiplier: number;
    amplitudeMultiplier: number;
    sharpness: number;
  } {
    const genrePulseModifiers: { [key: string]: { speedMultiplier: number; amplitudeMultiplier: number; sharpness: number } } = {
      metal: { speedMultiplier: 1.2, amplitudeMultiplier: 1.3, sharpness: 1.4 },
      rock: { speedMultiplier: 1.1, amplitudeMultiplier: 1.1, sharpness: 1.2 },
      punk: { speedMultiplier: 1.4, amplitudeMultiplier: 1.2, sharpness: 1.5 },
      electronic: { speedMultiplier: 1.0, amplitudeMultiplier: 0.9, sharpness: 0.8 },
      jazz: { speedMultiplier: 0.8, amplitudeMultiplier: 0.8, sharpness: 0.7 },
      classical: { speedMultiplier: 0.7, amplitudeMultiplier: 0.7, sharpness: 0.6 },
      pop: { speedMultiplier: 1.0, amplitudeMultiplier: 1.0, sharpness: 1.0 },
      indie: { speedMultiplier: 0.9, amplitudeMultiplier: 0.9, sharpness: 0.9 },
      hiphop: { speedMultiplier: 1.1, amplitudeMultiplier: 1.0, sharpness: 1.1 },
      default: { speedMultiplier: 1.0, amplitudeMultiplier: 1.0, sharpness: 1.0 }
    };

    const normalizedGenre = genre.toLowerCase();
    return genrePulseModifiers[normalizedGenre] || genrePulseModifiers.default;
  }
}