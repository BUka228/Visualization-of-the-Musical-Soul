import * as THREE from 'three';
import { CrystalTrack } from '../types';

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
 */
export class SimpleZoomSystem {
    private camera: THREE.PerspectiveCamera;
    private scene: THREE.Scene;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    private isZooming: boolean = false;
    private targetCrystal?: CrystalTrack;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    private zoomDistance: number = 25.0; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏)
    private animationDuration: number = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    
    // –ê–Ω–∏–º–∞—Ü–∏—è
    private animationId?: number;
    
    // –ö–æ–ª–ª–±—ç–∫–∏
    private onZoomStart?: (crystal: CrystalTrack) => void;
    private onZoomComplete?: (crystal: CrystalTrack) => void;
    
    constructor(camera: THREE.PerspectiveCamera, scene: THREE.Scene) {
        this.camera = camera;
        this.scene = scene;
        
        console.log('üîç Simple Zoom System initialized');
    }
    
    /**
     * –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –∫—Ä–∏—Å—Ç–∞–ª–ª—É
     */
    public async zoomToCrystal(crystal: CrystalTrack): Promise<void> {
        if (this.isZooming) {
            console.warn('‚ö†Ô∏è Zoom animation already in progress, skipping');
            return;
        }
        
        console.log(`üîç Zooming to crystal: ${crystal.name} by ${crystal.artist}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
        const crystalPosition = this.getCrystalWorldPosition(crystal);
        if (!crystalPosition) {
            console.error(`‚ùå Could not find crystal position for ${crystal.name}`);
            return;
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        const targetPosition = this.calculateSafeZoomPosition(crystalPosition);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑—É–º–Ω–∞
        if (!this.isValidCameraPosition(targetPosition, crystalPosition)) {
            console.error(`‚ùå Invalid camera position calculated for ${crystal.name}`);
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isZooming = true;
        this.targetCrystal = crystal;
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        if (this.onZoomStart) {
            this.onZoomStart(crystal);
        }
        
        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
            await this.animateToPosition(targetPosition, crystalPosition);
            
            console.log(`‚úÖ Zoom completed to crystal: ${crystal.name}`);
        } catch (error) {
            console.error(`‚ùå Zoom animation failed for ${crystal.name}:`, error);
        } finally {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
            this.isZooming = false;
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
            if (this.onZoomComplete) {
                this.onZoomComplete(crystal);
            }
        }
    }
    
    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç –∫–∞–º–µ—Ä—É –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    private animateToPosition(targetPosition: THREE.Vector3, lookAtTarget: THREE.Vector3): Promise<void> {
        return new Promise((resolve) => {
            const startPosition = this.camera.position.clone();
            const startTime = performance.now();
            
            const animate = () => {
                const elapsed = performance.now() - startTime;
                const progress = Math.min(elapsed / this.animationDuration, 1.0);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º easing (ease-out –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è)
                const easedProgress = 1 - Math.pow(1 - progress, 3);
                
                // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
                const currentPosition = startPosition.clone().lerp(targetPosition, easedProgress);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–∞–º–µ—Ä–µ
                this.camera.position.copy(currentPosition);
                this.camera.lookAt(lookAtTarget);
                this.camera.updateMatrixWorld();
                
                if (progress < 1.0) {
                    this.animationId = requestAnimationFrame(animate);
                } else {
                    this.animationId = undefined;
                    resolve();
                }
            };
            
            animate();
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∏—Ä–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
     */
    private getCrystalWorldPosition(crystal: CrystalTrack): THREE.Vector3 | null {
        // –ò—â–µ–º mesh –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –≤ —Å—Ü–µ–Ω–µ
        const meshes: THREE.Mesh[] = [];
        
        this.scene.traverse((object) => {
            if (object instanceof THREE.Mesh && 
                object.userData.trackId === crystal.id && 
                object.userData.isCrystal) {
                meshes.push(object);
            }
        });
        
        if (meshes.length > 0) {
            const mesh = meshes[0];
            const worldPosition = new THREE.Vector3();
            mesh.getWorldPosition(worldPosition);
            console.log(`‚úÖ Found crystal mesh for ${crystal.name}, world position:`, worldPosition);
            return worldPosition;
        }
        
        // Fallback –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
        if (crystal.position) {
            console.log(`üîÑ Using crystal data position for ${crystal.name}:`, crystal.position);
            return crystal.position.clone();
        }
        
        console.error(`‚ùå Could not find position for crystal: ${crystal.name}`);
        return null;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
     */
    private calculateSafeZoomPosition(crystalPosition: THREE.Vector3): THREE.Vector3 {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ –∫—Ä–∏—Å—Ç–∞–ª–ª—É
        const directionFromCenter = crystalPosition.clone().normalize();
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –ü–û–ó–ê–î–ò –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ (–º–µ–∂–¥—É –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–º –∏ —Ü–µ–Ω—Ç—Ä–æ–º)
        // —á—Ç–æ–±—ã –∫–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–µ–ª–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã
        const cameraPosition = crystalPosition.clone()
            .sub(directionFromCenter.multiplyScalar(this.zoomDistance));
        
        console.log(`üìê Calculated zoom position (behind crystal):`, {
            crystal: crystalPosition,
            camera: cameraPosition,
            distance: cameraPosition.distanceTo(crystalPosition),
            directionToCenter: directionFromCenter.clone().negate()
        });
        
        return cameraPosition;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω–æ–π
     */
    private isValidCameraPosition(cameraPosition: THREE.Vector3, crystalPosition: THREE.Vector3): boolean {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç NaN –∏–ª–∏ Infinity
        if (!isFinite(cameraPosition.x) || !isFinite(cameraPosition.y) || !isFinite(cameraPosition.z)) {
            console.error('‚ùå Camera position contains invalid values:', cameraPosition);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ —Ä–∞–∑—É–º–Ω–æ–µ
        const distance = cameraPosition.distanceTo(crystalPosition);
        if (distance < 1 || distance > 1000) {
            console.error(`‚ùå Invalid distance to crystal: ${distance}`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        const distanceFromCenter = cameraPosition.length();
        if (distanceFromCenter > 5000) { // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2000 –¥–æ 5000
            console.error(`‚ùå Camera too far from center: ${distanceFromCenter}`);
            return false;
        }
        
        return true;
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
     */
    public stopAnimation(): void {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = undefined;
        }
        
        this.isZooming = false;
        
        console.log('‚èπÔ∏è Zoom animation stopped');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
     */
    public getIsZooming(): boolean {
        return this.isZooming;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ü–µ–ª–µ–≤–æ–π –∫—Ä–∏—Å—Ç–∞–ª–ª
     */
    public getTargetCrystal(): CrystalTrack | undefined {
        return this.targetCrystal;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
     */
    public setCallbacks(callbacks: {
        onZoomStart?: (crystal: CrystalTrack) => void;
        onZoomComplete?: (crystal: CrystalTrack) => void;
    }): void {
        this.onZoomStart = callbacks.onZoomStart;
        this.onZoomComplete = callbacks.onZoomComplete;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã
     */
    public setSettings(settings: {
        zoomDistance?: number;
        animationDuration?: number;
    }): void {
        if (settings.zoomDistance !== undefined) {
            this.zoomDistance = Math.max(5, settings.zoomDistance);
        }
        if (settings.animationDuration !== undefined) {
            this.animationDuration = Math.max(100, settings.animationDuration);
        }
        
        console.log('‚öôÔ∏è Zoom system settings updated:', {
            zoomDistance: this.zoomDistance,
            animationDuration: this.animationDuration
        });
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    public dispose(): void {
        console.log('üóëÔ∏è Disposing Simple Zoom System...');
        
        this.stopAnimation();
        
        this.isZooming = false;
        this.targetCrystal = undefined;
        
        this.onZoomStart = undefined;
        this.onZoomComplete = undefined;
        
        console.log('‚úÖ Simple Zoom System disposed');
    }
}