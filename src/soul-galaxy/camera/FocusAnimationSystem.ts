import * as THREE from 'three';
import { CrystalTrack } from '../types';
import { DepthOfFieldSystem } from './DepthOfFieldSystem';

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞
 */
export interface FocusAnimationSettings {
    transitionDuration: number;     // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    easing: 'linear' | 'easeInOut' | 'easeOut' | 'easeIn';
    optimalDistance: number;        // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    optimalAngle: number;          // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
    returnDuration: number;         // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    enableDepthOfField: boolean;    // –í–∫–ª—é—á–∞—Ç—å –ª–∏ depth of field –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞
 */
interface FocusState {
    isAnimating: boolean;
    isReturning: boolean;
    isFocused: boolean;
    startTime: number;
    duration: number;
    startPosition: THREE.Vector3;
    targetPosition: THREE.Vector3;
    startTarget: THREE.Vector3;
    targetTarget: THREE.Vector3;
    focusedCrystal?: CrystalTrack;
    savedPosition?: THREE.Vector3;
    savedTarget?: THREE.Vector3;
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–µ
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∑–∫—É—é —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É —Å—Ü–µ–Ω—ã —Å –±—ã—Å—Ç—Ä—ã–º –∏ –ø–ª–∞–≤–Ω—ã–º –ø–æ–ª–µ—Ç–æ–º –∫–∞–º–µ—Ä—ã
 */
export class FocusAnimationSystem {
    private camera: THREE.PerspectiveCamera;
    private depthOfFieldSystem?: DepthOfFieldSystem;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    private settings: FocusAnimationSettings = {
        transitionDuration: 1.5,        // 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        easing: 'easeInOut',
        optimalDistance: 8.0,           // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
        optimalAngle: Math.PI / 6,      // 30 –≥—Ä–∞–¥—É—Å–æ–≤
        returnDuration: 2.0,            // 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        enableDepthOfField: true
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    private focusState: FocusState = {
        isAnimating: false,
        isReturning: false,
        isFocused: false,
        startTime: 0,
        duration: 0,
        startPosition: new THREE.Vector3(),
        targetPosition: new THREE.Vector3(),
        startTarget: new THREE.Vector3(),
        targetTarget: new THREE.Vector3()
    };
    
    // –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    private onFocusStart?: (crystal: CrystalTrack) => void;
    private onFocusComplete?: (crystal: CrystalTrack) => void;
    private onReturnStart?: () => void;
    private onReturnComplete?: () => void;
    
    constructor(camera: THREE.PerspectiveCamera, depthOfFieldSystem?: DepthOfFieldSystem) {
        this.camera = camera;
        this.depthOfFieldSystem = depthOfFieldSystem;
        
        console.log('üéØ Focus Animation System created');
    }
    
    /**
     * –ù–∞—á–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–µ
     */
    public async focusOnCrystal(crystal: CrystalTrack): Promise<void> {
        if (this.focusState.isAnimating) {
            console.warn('‚ö†Ô∏è Focus animation already in progress');
            return;
        }
        
        console.log(`üéØ Starting focus animation on crystal: ${crystal.name} by ${crystal.artist}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        this.saveCameraPosition();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
        const optimalPosition = this.calculateOptimalCameraPosition(crystal);
        const targetPoint = crystal.position.clone();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        this.focusState = {
            isAnimating: true,
            isReturning: false,
            isFocused: false,
            startTime: performance.now(),
            duration: this.settings.transitionDuration * 1000, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            startPosition: this.camera.position.clone(),
            targetPosition: optimalPosition,
            startTarget: this.getCameraLookAtTarget(),
            targetTarget: targetPoint,
            focusedCrystal: crystal
        };
        
        // –í–∫–ª—é—á–∞–µ–º depth of field –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if (this.settings.enableDepthOfField && this.depthOfFieldSystem) {
            this.depthOfFieldSystem.enableDepthOfField({
                focus: this.settings.optimalDistance,
                aperture: 0.05,
                maxblur: 0.02
            });
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –Ω–∞—á–∞–ª–∞ —Ñ–æ–∫—É—Å–∞
        if (this.onFocusStart) {
            this.onFocusStart(crystal);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        return new Promise((resolve) => {
            const checkComplete = () => {
                if (!this.focusState.isAnimating && this.focusState.isFocused) {
                    resolve();
                } else {
                    requestAnimationFrame(checkComplete);
                }
            };
            checkComplete();
        });
    }
    
    /**
     * –ù–∞—á–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    public async returnToPreviousPosition(): Promise<void> {
        if (this.focusState.isAnimating || !this.focusState.isFocused) {
            console.warn('‚ö†Ô∏è Cannot return: not focused or animation in progress');
            return;
        }
        
        if (!this.focusState.savedPosition || !this.focusState.savedTarget) {
            console.warn('‚ö†Ô∏è No saved camera position to return to');
            return;
        }
        
        console.log('üîÑ Starting return animation to previous position');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        this.focusState = {
            ...this.focusState,
            isAnimating: true,
            isReturning: true,
            isFocused: false,
            startTime: performance.now(),
            duration: this.settings.returnDuration * 1000,
            startPosition: this.camera.position.clone(),
            targetPosition: this.focusState.savedPosition.clone(),
            startTarget: this.getCameraLookAtTarget(),
            targetTarget: this.focusState.savedTarget.clone()
        };
        
        // –û—Ç–∫–ª—é—á–∞–µ–º depth of field
        if (this.depthOfFieldSystem) {
            this.depthOfFieldSystem.disableDepthOfField();
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if (this.onReturnStart) {
            this.onReturnStart();
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        return new Promise((resolve) => {
            const checkComplete = () => {
                if (!this.focusState.isAnimating && !this.focusState.isReturning) {
                    resolve();
                } else {
                    requestAnimationFrame(checkComplete);
                }
            };
            checkComplete();
        });
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
     */
    private calculateOptimalCameraPosition(crystal: CrystalTrack): THREE.Vector3 {
        const crystalPosition = crystal.position.clone();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ –∫—Ä–∏—Å—Ç–∞–ª–ª—É
        const directionFromCenter = crystalPosition.clone().normalize();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —É–≥–ª–∞
        const offsetAngle = this.settings.optimalAngle;
        const perpendicular = new THREE.Vector3()
            .crossVectors(directionFromCenter, new THREE.Vector3(0, 1, 0))
            .normalize();
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è –±–æ–ª–µ–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —É–≥–ª–∞
        const rotationMatrix = new THREE.Matrix4().makeRotationAxis(perpendicular, offsetAngle);
        const optimalDirection = directionFromCenter.clone().applyMatrix4(rotationMatrix);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
        const optimalPosition = crystalPosition.clone()
            .add(optimalDirection.multiplyScalar(this.settings.optimalDistance));
        
        console.log(`üìê Calculated optimal camera position:`, {
            crystal: crystalPosition,
            camera: optimalPosition,
            distance: optimalPosition.distanceTo(crystalPosition)
        });
        
        return optimalPosition;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –∫–∞–º–µ—Ä—ã (—Ç–æ—á–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ —Å–º–æ—Ç—Ä–∏—Ç)
     */
    private getCameraLookAtTarget(): THREE.Vector3 {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–º–æ—Ç—Ä–∏—Ç –∫–∞–º–µ—Ä–∞
        const direction = new THREE.Vector3();
        this.camera.getWorldDirection(direction);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ü–µ–Ω—ã –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ
        const distance = this.camera.position.length();
        return this.camera.position.clone().add(direction.multiplyScalar(distance));
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
     */
    private saveCameraPosition(): void {
        this.focusState.savedPosition = this.camera.position.clone();
        this.focusState.savedTarget = this.getCameraLookAtTarget();
        
        console.log('üíæ Camera position saved:', {
            position: this.focusState.savedPosition,
            target: this.focusState.savedTarget
        });
    }
    
    /**
     * –§—É–Ω–∫—Ü–∏–∏ easing –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
     */
    private applyEasing(t: number, easingType: string): number {
        switch (easingType) {
            case 'linear':
                return t;
            case 'easeIn':
                return t * t;
            case 'easeOut':
                return 1 - Math.pow(1 - t, 2);
            case 'easeInOut':
                return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;
            default:
                return t;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–æ–∫—É—Å–∞ (–¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ü–∏–∫–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
     */
    public update(deltaTime: number): void {
        if (!this.focusState.isAnimating) {
            return;
        }
        
        const currentTime = performance.now();
        const elapsed = currentTime - this.focusState.startTime;
        const progress = Math.min(elapsed / this.focusState.duration, 1.0);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º easing
        const easedProgress = this.applyEasing(progress, this.settings.easing);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
        const currentPosition = this.focusState.startPosition.clone()
            .lerp(this.focusState.targetPosition, easedProgress);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–µ–ª—å –∫–∞–º–µ—Ä—ã
        const currentTarget = this.focusState.startTarget.clone()
            .lerp(this.focusState.targetTarget, easedProgress);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.camera.position.copy(currentPosition);
        this.camera.lookAt(currentTarget);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º depth of field —Ñ–æ–∫—É—Å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (this.settings.enableDepthOfField && this.depthOfFieldSystem && 
            this.focusState.focusedCrystal && !this.focusState.isReturning) {
            const distanceToTarget = this.camera.position.distanceTo(this.focusState.focusedCrystal.position);
            this.depthOfFieldSystem.setFocus(distanceToTarget, true);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (progress >= 1.0) {
            this.completeAnimation();
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
     */
    private completeAnimation(): void {
        const wasReturning = this.focusState.isReturning;
        const focusedCrystal = this.focusState.focusedCrystal;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.focusState.isAnimating = false;
        
        if (wasReturning) {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            this.focusState.isReturning = false;
            this.focusState.isFocused = false;
            this.focusState.focusedCrystal = undefined;
            
            console.log('‚úÖ Return animation completed');
            
            if (this.onReturnComplete) {
                this.onReturnComplete();
            }
        } else {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞
            this.focusState.isFocused = true;
            
            console.log(`‚úÖ Focus animation completed on crystal: ${focusedCrystal?.name}`);
            
            if (this.onFocusComplete && focusedCrystal) {
                this.onFocusComplete(focusedCrystal);
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞
     */
    public isFocused(): boolean {
        return this.focusState.isFocused;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è
     */
    public isAnimating(): boolean {
        return this.focusState.isAnimating;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª
     */
    public getFocusedCrystal(): CrystalTrack | undefined {
        return this.focusState.focusedCrystal;
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
     */
    public stopAnimation(): void {
        if (this.focusState.isAnimating) {
            console.log('‚èπÔ∏è Stopping focus animation');
            this.focusState.isAnimating = false;
            this.focusState.isReturning = false;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    public setSettings(newSettings: Partial<FocusAnimationSettings>): void {
        this.settings = { ...this.settings, ...newSettings };
        console.log('‚öôÔ∏è Focus animation settings updated:', this.settings);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    public getSettings(): FocusAnimationSettings {
        return { ...this.settings };
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
     */
    public setCallbacks(callbacks: {
        onFocusStart?: (crystal: CrystalTrack) => void;
        onFocusComplete?: (crystal: CrystalTrack) => void;
        onReturnStart?: () => void;
        onReturnComplete?: () => void;
    }): void {
        this.onFocusStart = callbacks.onFocusStart;
        this.onFocusComplete = callbacks.onFocusComplete;
        this.onReturnStart = callbacks.onReturnStart;
        this.onReturnComplete = callbacks.onReturnComplete;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    public applyPreset(preset: 'fast' | 'smooth' | 'cinematic' | 'dramatic'): void {
        const presets: { [key: string]: Partial<FocusAnimationSettings> } = {
            fast: {
                transitionDuration: 0.8,
                returnDuration: 1.0,
                easing: 'easeOut',
                optimalDistance: 6.0,
                optimalAngle: Math.PI / 8
            },
            smooth: {
                transitionDuration: 1.5,
                returnDuration: 2.0,
                easing: 'easeInOut',
                optimalDistance: 8.0,
                optimalAngle: Math.PI / 6
            },
            cinematic: {
                transitionDuration: 2.5,
                returnDuration: 3.0,
                easing: 'easeInOut',
                optimalDistance: 10.0,
                optimalAngle: Math.PI / 4,
                enableDepthOfField: true
            },
            dramatic: {
                transitionDuration: 3.0,
                returnDuration: 2.5,
                easing: 'easeIn',
                optimalDistance: 12.0,
                optimalAngle: Math.PI / 3,
                enableDepthOfField: true
            }
        };
        
        const presetSettings = presets[preset];
        if (presetSettings) {
            this.setSettings(presetSettings);
            console.log(`üé¨ Applied focus animation preset: ${preset}`);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public getPerformanceStats(): {
        isAnimating: boolean;
        isFocused: boolean;
        animationProgress: number;
        focusedCrystal?: string;
    } {
        let animationProgress = 0;
        if (this.focusState.isAnimating) {
            const elapsed = performance.now() - this.focusState.startTime;
            animationProgress = Math.min(elapsed / this.focusState.duration, 1.0);
        }
        
        return {
            isAnimating: this.focusState.isAnimating,
            isFocused: this.focusState.isFocused,
            animationProgress,
            focusedCrystal: this.focusState.focusedCrystal?.name
        };
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    public dispose(): void {
        console.log('üóëÔ∏è Disposing Focus Animation System...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.stopAnimation();
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.focusState = {
            isAnimating: false,
            isReturning: false,
            isFocused: false,
            startTime: 0,
            duration: 0,
            startPosition: new THREE.Vector3(),
            targetPosition: new THREE.Vector3(),
            startTarget: new THREE.Vector3(),
            targetTarget: new THREE.Vector3()
        };
        
        // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏
        this.onFocusStart = undefined;
        this.onFocusComplete = undefined;
        this.onReturnStart = undefined;
        this.onReturnComplete = undefined;
        
        console.log('‚úÖ Focus Animation System disposed');
    }
}