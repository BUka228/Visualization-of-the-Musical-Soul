import * as THREE from 'three';
import { CrystalTrack } from '../types';
import { CrystalShaderMaterial } from '../materials/CrystalShaderMaterial';
import { MinimalistHUD } from '../ui/MinimalistHUD';

/**
 * –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
 * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –≤—Å–ø—ã—Ö–∏–≤–∞–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º raycasting
 */
export class CrystalHoverSystem {
  private scene?: THREE.Scene;
  private camera?: THREE.Camera;
  private raycaster: THREE.Raycaster;
  private mouse: THREE.Vector2;
  private crystalTracks: CrystalTrack[] = [];
  private crystalMeshes: THREE.Mesh[] = [];
  private hoveredCrystal?: CrystalTrack;
  private initialized: boolean = false;
  private hud?: MinimalistHUD;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  private static readonly HOVER_CONFIG = {
    glowIntensity: 1.5,           // –£—Å–∏–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    transitionDuration: 200,      // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º—Å
    pulseAmplification: 1.3,      // –£—Å–∏–ª–µ–Ω–∏–µ –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    emissiveBoost: 0.8,          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
    scaleBoost: 1.1              // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  };

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è raycasting
  private static readonly RAYCAST_CONFIG = {
    maxDistance: 1000,           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è raycasting
    updateFrequency: 60,         // –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (FPS)
    batchSize: 50,              // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    frustumCulling: true        // –í–∫–ª—é—á–∏—Ç—å frustum culling –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  private lastUpdateTime: number = 0;
  private updateInterval: number = 1000 / CrystalHoverSystem.RAYCAST_CONFIG.updateFrequency;
  private visibleCrystals: THREE.Mesh[] = [];
  private frustum: THREE.Frustum = new THREE.Frustum();

  // –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
  private onCrystalHovered?: (crystal: CrystalTrack) => void;
  private onCrystalUnhovered?: (crystal: CrystalTrack) => void;

  constructor() {
    this.raycaster = new THREE.Raycaster();
    this.mouse = new THREE.Vector2();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ raycaster –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    this.raycaster.far = CrystalHoverSystem.RAYCAST_CONFIG.maxDistance;
    
    console.log('üéØ Crystal Hover System created');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏
   */
  initialize(scene: THREE.Scene, camera: THREE.Camera, container?: HTMLElement): void {
    console.log('üéØ Initializing Crystal Hover System...');
    
    this.scene = scene;
    this.camera = camera;
    this.initialized = true;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HUD –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if (container) {
      this.hud = new MinimalistHUD(container);
      this.hud.initialize();
      console.log('üé® Minimalist HUD integrated with hover system');
    }
    
    console.log('‚úÖ Crystal Hover System initialized');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
   */
  setCrystalTracks(crystalTracks: CrystalTrack[], crystalCluster: THREE.Group): void {
    if (!this.initialized) {
      console.warn('‚ö†Ô∏è Crystal Hover System not initialized');
      return;
    }

    console.log(`üéØ Setting up hover tracking for ${crystalTracks.length} crystals...`);
    
    this.crystalTracks = crystalTracks;
    this.crystalMeshes = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ mesh –æ–±—ä–µ–∫—Ç—ã –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
    crystalCluster.children.forEach(child => {
      if (child instanceof THREE.Mesh && child.userData.isCrystal) {
        this.crystalMeshes.push(child);
      }
    });
    
    console.log(`‚úÖ Hover tracking set up for ${this.crystalMeshes.length} crystal meshes`);
    this.logHoverSystemStats();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
   */
  updateMousePosition(mouseX: number, mouseY: number): void {
    if (!this.initialized) return;
    
    // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞ –∫–∞–º–µ—Ä—ã
    if (this.isCameraFocusAnimating()) {
      return;
    }
    
    this.mouse.set(mouseX, mouseY);
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã
    const currentTime = performance.now();
    if (currentTime - this.lastUpdateTime < this.updateInterval) {
      return;
    }
    
    this.lastUpdateTime = currentTime;
    this.checkHoverIntersections();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private checkHoverIntersections(): void {
    if (!this.scene || !this.camera || this.crystalMeshes.length === 0) {
      return;
    }

    // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º hover –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞ –∫–∞–º–µ—Ä—ã
    if (this.isCameraFocusAnimating()) {
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º raycaster
    this.raycaster.setFromCamera(this.mouse, this.camera);
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º frustum culling –¥–ª—è –æ—Ç—Å–µ—á–µ–Ω–∏—è –Ω–µ–≤–∏–¥–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    if (CrystalHoverSystem.RAYCAST_CONFIG.frustumCulling) {
      this.updateVisibleCrystals();
    } else {
      this.visibleCrystals = this.crystalMeshes;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –≤–∏–¥–∏–º—ã–º–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏
    const intersects = this.raycaster.intersectObjects(this.visibleCrystals, false);
    
    if (intersects.length > 0) {
      const intersectedMesh = intersects[0].object as THREE.Mesh;
      const trackId = intersectedMesh.userData.trackId;
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CrystalTrack
      const crystalTrack = this.crystalTracks.find(ct => ct.id === trackId);
      
      if (crystalTrack && crystalTrack !== this.hoveredCrystal) {
        this.hoverCrystal(crystalTrack, intersectedMesh);
      }
    } else {
      // –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π - —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
      if (this.hoveredCrystal) {
        this.unhoverCrystal();
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private updateVisibleCrystals(): void {
    if (!this.camera) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º frustum –∫–∞–º–µ—Ä—ã
    const matrix = new THREE.Matrix4().multiplyMatrices(
      (this.camera as THREE.PerspectiveCamera).projectionMatrix,
      (this.camera as THREE.PerspectiveCamera).matrixWorldInverse
    );
    this.frustum.setFromProjectionMatrix(matrix);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–∏–º—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
    this.visibleCrystals = this.crystalMeshes.filter(mesh => {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ bounding sphere
      const sphere = new THREE.Sphere();
      mesh.geometry.computeBoundingSphere();
      if (mesh.geometry.boundingSphere) {
        sphere.copy(mesh.geometry.boundingSphere);
        sphere.applyMatrix4(mesh.matrixWorld);
        return this.frustum.intersectsSphere(sphere);
      }
      return true;
    });
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫ –∫—Ä–∏—Å—Ç–∞–ª–ª—É
   */
  private hoverCrystal(crystalTrack: CrystalTrack, mesh: THREE.Mesh): void {
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    if (this.hoveredCrystal) {
      this.unhoverCrystal();
    }
    
    console.log(`‚ú® Hovering crystal: ${crystalTrack.name} by ${crystalTrack.artist}`);
    
    this.hoveredCrystal = crystalTrack;
    crystalTrack.isHovered = true;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É
    if (mesh.material instanceof CrystalShaderMaterial) {
      this.applyHoverEffects(mesh.material);
    }
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    this.animateHoverTransition(mesh, true);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ HUD
    if (this.hud) {
      this.hud.showTrackInfo(crystalTrack);
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫
    if (this.onCrystalHovered) {
      this.onCrystalHovered(crystalTrack);
    }
  }

  /**
   * –£–±–∏—Ä–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  private unhoverCrystal(): void {
    if (!this.hoveredCrystal) return;
    
    console.log(`üí´ Unhovering crystal: ${this.hoveredCrystal.name}`);
    
    // –ù–∞—Ö–æ–¥–∏–º mesh –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    const mesh = this.findCrystalMesh(this.hoveredCrystal.id);
    
    if (mesh) {
      // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏
      if (mesh.material instanceof CrystalShaderMaterial) {
        this.removeHoverEffects(mesh.material);
      }
      
      // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
      this.animateHoverTransition(mesh, false);
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ HUD
    if (this.hud) {
      this.hud.hideTrackInfo();
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫
    if (this.onCrystalUnhovered) {
      this.onCrystalUnhovered(this.hoveredCrystal);
    }
    
    this.hoveredCrystal.isHovered = false;
    this.hoveredCrystal = undefined;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  private applyHoverEffects(material: CrystalShaderMaterial): void {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –≤ —à–µ–π–¥–µ—Ä–µ
    material.setHovered(true);
    
    // –£—Å–∏–ª–∏–≤–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
    const currentIntensity = material.uniforms.emissiveIntensity.value;
    const boostedIntensity = currentIntensity * CrystalHoverSystem.HOVER_CONFIG.glowIntensity;
    material.setEmissiveIntensity(boostedIntensity + CrystalHoverSystem.HOVER_CONFIG.emissiveBoost);
    
    // –£—Å–∏–ª–∏–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é
    const currentAmplitude = material.uniforms.pulseAmplitude.value;
    const boostedAmplitude = currentAmplitude * CrystalHoverSystem.HOVER_CONFIG.pulseAmplification;
    material.uniforms.pulseAmplitude.value = Math.min(boostedAmplitude, 1.0); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º
  }

  /**
   * –£–±–∏—Ä–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  private removeHoverEffects(material: CrystalShaderMaterial): void {
    // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –≤ —à–µ–π–¥–µ—Ä–µ
    material.setHovered(false);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–Ω–∏—è
    const boostedIntensity = material.uniforms.emissiveIntensity.value;
    const normalIntensity = (boostedIntensity - CrystalHoverSystem.HOVER_CONFIG.emissiveBoost) / 
                           CrystalHoverSystem.HOVER_CONFIG.glowIntensity;
    material.setEmissiveIntensity(Math.max(normalIntensity, 0.1)); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –ø—É–ª—å—Å–∞—Ü–∏—é
    const boostedAmplitude = material.uniforms.pulseAmplitude.value;
    const normalAmplitude = boostedAmplitude / CrystalHoverSystem.HOVER_CONFIG.pulseAmplification;
    material.uniforms.pulseAmplitude.value = Math.max(normalAmplitude, 0.05); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
  }

  /**
   * –ê–Ω–∏–º–∏—Ä—É–µ—Ç –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
   */
  private animateHoverTransition(mesh: THREE.Mesh, isHovering: boolean): void {
    const targetScale = isHovering ? CrystalHoverSystem.HOVER_CONFIG.scaleBoost : 1.0;
    const duration = CrystalHoverSystem.HOVER_CONFIG.transitionDuration;
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –º–∞—Å—à—Ç–∞–±–∞
    const startScale = mesh.scale.x;
    const startTime = performance.now();
    
    const animate = () => {
      const elapsed = performance.now() - startTime;
      const progress = Math.min(elapsed / duration, 1.0);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º easing —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      const easedProgress = this.easeOutCubic(progress);
      const currentScale = startScale + (targetScale - startScale) * easedProgress;
      
      mesh.scale.setScalar(currentScale);
      
      if (progress < 1.0) {
        requestAnimationFrame(animate);
      }
    };
    
    animate();
  }

  /**
   * Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
   */
  private easeOutCubic(t: number): number {
    return 1 - Math.pow(1 - t, 3);
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç mesh –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –ø–æ ID —Ç—Ä–µ–∫–∞
   */
  private findCrystalMesh(trackId: string): THREE.Mesh | undefined {
    return this.crystalMeshes.find(mesh => mesh.userData.trackId === trackId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –Ω–∞–≤–µ–¥–µ–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª
   */
  getHoveredCrystal(): CrystalTrack | undefined {
    return this.hoveredCrystal;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª
   */
  setOnCrystalHovered(callback: (crystal: CrystalTrack) => void): void {
    this.onCrystalHovered = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å–Ω—è—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Å –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
   */
  setOnCrystalUnhovered(callback: (crystal: CrystalTrack) => void): void {
    this.onCrystalUnhovered = callback;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –¥—Ä—É–≥–æ–º –∫—Ä–∏—Å—Ç–∞–ª–ª–µ)
   */
  clearHover(): void {
    if (this.hoveredCrystal) {
      this.unhoverCrystal();
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É (–¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ü–∏–∫–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
   */
  update(deltaTime: number): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º HUD –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (this.hud) {
      this.hud.update(deltaTime);
    }
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏
   */
  private logHoverSystemStats(): void {
    console.log('üìä Crystal Hover System Statistics:');
    console.log(`  Total crystals: ${this.crystalTracks.length}`);
    console.log(`  Crystal meshes: ${this.crystalMeshes.length}`);
    console.log(`  Update frequency: ${CrystalHoverSystem.RAYCAST_CONFIG.updateFrequency} FPS`);
    console.log(`  Max raycast distance: ${CrystalHoverSystem.RAYCAST_CONFIG.maxDistance}`);
    console.log(`  Frustum culling: ${CrystalHoverSystem.RAYCAST_CONFIG.frustumCulling ? 'enabled' : 'disabled'}`);
    console.log(`  Hover glow intensity: ${CrystalHoverSystem.HOVER_CONFIG.glowIntensity}x`);
    console.log(`  Transition duration: ${CrystalHoverSystem.HOVER_CONFIG.transitionDuration}ms`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è —Ñ–æ–∫—É—Å–∞ –∫–∞–º–µ—Ä—ã
   */
  private isCameraFocusAnimating(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ–∫—É—Å–∞
    if (typeof window !== 'undefined' && (window as any).isCameraFocusAnimating === true) {
      return true;
    }
    
    // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—ã
    if (typeof window !== 'undefined') {
      const cameraController = (window as any).cameraController;
      if (cameraController && typeof cameraController.isCameraAnimating === 'function') {
        return cameraController.isCameraAnimating();
      }
      
      const focusAnimationSystem = (window as any).focusAnimationSystem;
      if (focusAnimationSystem && typeof focusAnimationSystem.isAnimating === 'function') {
        return focusAnimationSystem.isAnimating();
      }
    }
    
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceStats(): {
    totalCrystals: number;
    visibleCrystals: number;
    updateFrequency: number;
    lastUpdateTime: number;
  } {
    return {
      totalCrystals: this.crystalTracks.length,
      visibleCrystals: this.visibleCrystals.length,
      updateFrequency: CrystalHoverSystem.RAYCAST_CONFIG.updateFrequency,
      lastUpdateTime: this.lastUpdateTime
    };
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã
   */
  dispose(): void {
    console.log('üóëÔ∏è Disposing Crystal Hover System...');
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
    this.clearHover();
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã HUD
    if (this.hud) {
      this.hud.dispose();
      this.hud = undefined;
    }
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤—ã
    this.crystalTracks = [];
    this.crystalMeshes = [];
    this.visibleCrystals = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.hoveredCrystal = undefined;
    this.scene = undefined;
    this.camera = undefined;
    this.initialized = false;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏
    this.onCrystalHovered = undefined;
    this.onCrystalUnhovered = undefined;
    
    console.log('‚úÖ Crystal Hover System disposed');
  }
}