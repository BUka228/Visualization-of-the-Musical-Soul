import * as THREE from 'three';
import { SceneManager as ISceneManager, ProcessedTrack, SceneConfig } from '../types';
import { InteractionManager } from '../interaction/InteractionManager';
import { AnimationManager } from '../animation/AnimationManager';
import { EffectsManager } from '../effects/EffectsManager';
import { PerformanceOptimizer } from '../performance/PerformanceOptimizer';
import { PerformanceWarning } from '../performance/PerformanceMonitor';
import { SoulGalaxyRenderer } from '../soul-galaxy/core/SoulGalaxyRenderer';

export class SceneManager implements ISceneManager {
  private scene: THREE.Scene;
  private camera: THREE.PerspectiveCamera;
  private renderer: THREE.WebGLRenderer;
  private container: HTMLElement;
  private config: SceneConfig;
  
  // –û—Å–≤–µ—â–µ–Ω–∏–µ
  private ambientLight: THREE.AmbientLight;
  private directionalLight: THREE.DirectionalLight;
  
  // –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
  private testObject?: THREE.Mesh;
  
  // Classic track objects removed - Soul Galaxy handles visualization
  
  // –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  private interactionManager: InteractionManager;
  
  // –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–π
  private animationManager: AnimationManager;
  
  // –ú–µ–Ω–µ–¥–∂–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  private effectsManager: EffectsManager;
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private performanceOptimizer: PerformanceOptimizer;

  // Soul Galaxy —Å–∏—Å—Ç–µ–º–∞
  private soulGalaxyRenderer: SoulGalaxyRenderer;

  constructor(container: HTMLElement, config: SceneConfig) {
    this.container = container;
    this.config = config;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Three.js
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera();
    this.renderer = new THREE.WebGLRenderer();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è
    this.ambientLight = new THREE.AmbientLight();
    this.directionalLight = new THREE.DirectionalLight();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    this.interactionManager = new InteractionManager();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–π
    this.animationManager = new AnimationManager();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.effectsManager = new EffectsManager();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.performanceOptimizer = new PerformanceOptimizer(this.scene, this.camera, this.renderer);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    this.soulGalaxyRenderer = new SoulGalaxyRenderer();
  }

  initializeScene(): void {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D-—Å—Ü–µ–Ω—ã...');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω—ã
    this.setupScene();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
    this.setupCamera();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    this.setupRenderer();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è
    this.setupLighting();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    this.createTestObject();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    this.interactionManager.initialize(this);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–π
    this.animationManager.initialize(this);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.effectsManager.initialize(this.scene, this.camera, this.interactionManager.getAudioManager());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
    this.soulGalaxyRenderer.initialize(this.scene, this.camera);
    
    // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    this.startRenderLoop();
    
    console.log('3D-—Å—Ü–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  }

  private setupScene(): void {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ (–∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)
    this.scene.background = new THREE.Color(0x000011);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–º–∞–Ω–∞ –¥–ª—è –≥–ª—É–±–∏–Ω—ã
    this.scene.fog = new THREE.Fog(0x000011, 50, 200);
  }

  private setupCamera(): void {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã
    this.camera = new THREE.PerspectiveCamera(
      75, // field of view
      this.container.clientWidth / this.container.clientHeight, // aspect ratio
      0.1, // near clipping plane
      1000 // far clipping plane
    );
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    this.camera.position.set(0, 0, this.config.cameraDistance);
    this.camera.lookAt(0, 0, 0);
  }

  private setupRenderer(): void {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebGL —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    this.renderer = new THREE.WebGLRenderer({
      antialias: true, // —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
      alpha: true // –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    });
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);
    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    this.renderer.shadowMap.enabled = true;
    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    this.renderer.outputColorSpace = THREE.SRGBColorSpace;
    this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
    this.renderer.toneMappingExposure = 1.0;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ canvas –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.container.appendChild(this.renderer.domElement);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', this.handleResize.bind(this));
  }

  private setupLighting(): void {
    // –ú—è–≥–∫–æ–µ –æ–±—â–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
    this.ambientLight = new THREE.AmbientLight(0x404040, 0.4);
    this.scene.add(this.ambientLight);
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç
    this.directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
    this.directionalLight.position.set(50, 50, 50);
    this.directionalLight.castShadow = true;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–Ω–µ–π
    this.directionalLight.shadow.mapSize.width = 2048;
    this.directionalLight.shadow.mapSize.height = 2048;
    this.directionalLight.shadow.camera.near = 0.5;
    this.directionalLight.shadow.camera.far = 500;
    this.directionalLight.shadow.camera.left = -100;
    this.directionalLight.shadow.camera.right = 100;
    this.directionalLight.shadow.camera.top = 100;
    this.directionalLight.shadow.camera.bottom = -100;
    
    this.scene.add(this.directionalLight);
    
    console.log('–û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: AmbientLight + DirectionalLight');
  }

  private createTestObject(): void {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    const geometry = new THREE.IcosahedronGeometry(2, 0);
    const material = new THREE.MeshStandardMaterial({
      color: 0x4169E1, // —Å–∏–Ω–∏–π —Ü–≤–µ—Ç (indie –∂–∞–Ω—Ä)
      metalness: 0.3,
      roughness: 0.4,
      emissive: 0x001122,
      emissiveIntensity: 0.1
    });
    
    this.testObject = new THREE.Mesh(geometry, material);
    this.testObject.position.set(0, 0, 0);
    this.testObject.castShadow = true;
    this.testObject.receiveShadow = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º userData –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    this.testObject.userData = { isTestObject: true };
    
    this.scene.add(this.testObject);
    
    console.log('–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É');
  }

  private startRenderLoop(): void {
    const animate = () => {
      requestAnimationFrame(animate);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      this.interactionManager.update();
      
      // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
      if (this.testObject && !this.interactionManager.isAnimationPaused()) {
        this.testObject.rotation.x += 0.01;
        this.testObject.rotation.y += 0.01;
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
      this.updateScene();
      
      // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
      this.renderer.render(this.scene, this.camera);
    };
    
    animate();
    console.log('–¶–∏–∫–ª —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω');
  }

  private handleResize(): void {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    const width = this.container.clientWidth;
    const height = this.container.clientHeight;
    
    this.camera.aspect = width / height;
    this.camera.updateProjectionMatrix();
    
    this.renderer.setSize(width, height);
    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  }

  createTrackObjects(tracks: ProcessedTrack[]): void {
    console.log(`üåå –°–æ–∑–¥–∞–Ω–∏–µ ${tracks.length} –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤ –≤ Soul Galaxy —Ä–µ–∂–∏–º–µ...`);
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    this.clearTrackObjects();
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    if (this.testObject) {
      this.scene.remove(this.testObject);
      this.testObject.geometry.dispose();
      if (this.testObject.material instanceof THREE.Material) {
        this.testObject.material.dispose();
      }
      this.testObject = undefined;
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä
    this.soulGalaxyRenderer.createCrystalCluster(tracks);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä –∏–∑ ${tracks.length} —Ç—Ä–µ–∫–æ–≤`);
    this.logGenreDistribution(tracks);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    this.animationManager.startAnimation();
    console.log('üé¨ –ê–Ω–∏–º–∞—Ü–∏–∏ Soul Galaxy –∑–∞–ø—É—â–µ–Ω—ã');
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Ç—Ä–µ–∫–æ–≤ –∏–∑ —Å—Ü–µ–Ω—ã (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä)
   */
  private clearTrackObjects(): void {
    // Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–∏—Å—Ç–∫–æ–π —Å–≤–æ–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ TrackObject –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä–∞–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  private logGenreDistribution(tracks: ProcessedTrack[]): void {
    const genreCount: { [genre: string]: number } = {};
    
    tracks.forEach(track => {
      genreCount[track.genre] = (genreCount[track.genre] || 0) + 1;
    });
    
    console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∂–∞–Ω—Ä–∞–º:');
    Object.entries(genreCount)
      .sort(([,a], [,b]) => b - a)
      .forEach(([genre, count]) => {
        console.log(`  ${genre}: ${count} —Ç—Ä–µ–∫–æ–≤`);
      });
  }

  updateScene(): void {
    // AnimationManager —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.effectsManager.update(16); // ~60 FPS
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.performanceOptimizer.update(16); // ~60 FPS
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä
    this.soulGalaxyRenderer.updateScene(16); // ~60 FPS
  }

  dispose(): void {
    console.log('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ SceneManager...');
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Soul Galaxy —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    this.soulGalaxyRenderer.dispose();
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.performanceOptimizer.dispose();
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.effectsManager.dispose();
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–π
    this.animationManager.dispose();
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    this.interactionManager.dispose();
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    window.removeEventListener('resize', this.handleResize.bind(this));
    
    // –û—á–∏—Å—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç—Ä–µ–∫–æ–≤
    this.clearTrackObjects();
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if (this.testObject) {
      this.scene.remove(this.testObject);
      this.testObject.geometry.dispose();
      if (this.testObject.material instanceof THREE.Material) {
        this.testObject.material.dispose();
      }
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    this.renderer.dispose();
    
    // –£–¥–∞–ª–µ–Ω–∏–µ canvas –∏–∑ DOM
    if (this.container.contains(this.renderer.domElement)) {
      this.container.removeChild(this.renderer.domElement);
    }
    
    console.log('–†–µ—Å—É—Ä—Å—ã SceneManager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º
  getScene(): THREE.Scene {
    return this.scene;
  }

  getCamera(): THREE.Camera {
    return this.camera;
  }

  getRenderer(): THREE.WebGLRenderer {
    return this.renderer;
  }

  // Classic track objects removed - Soul Galaxy handles visualization

  getTestObject(): THREE.Mesh | undefined {
    return this.testObject;
  }

  getInteractionManager(): InteractionManager {
    return this.interactionManager;
  }

  getAnimationManager(): AnimationManager {
    return this.animationManager;
  }

  getEffectsManager(): EffectsManager {
    return this.effectsManager;
  }

  getPerformanceOptimizer(): PerformanceOptimizer {
    return this.performanceOptimizer;
  }

  // Soul Galaxy is now the only mode - no mode switching needed

  getSoulGalaxyRenderer(): SoulGalaxyRenderer {
    return this.soulGalaxyRenderer;
  }
}