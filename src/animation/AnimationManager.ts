/**
 * AnimationManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –≤ 3D-—Å—Ü–µ–Ω–µ
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∞–Ω–∏–º–∞—Ü–∏–π –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–º–µ—Ä—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */

import * as THREE from 'three';
import { AnimationManager as IAnimationManager, TrackObject, SceneManager } from '../types';

export class AnimationManager implements IAnimationManager {
  private sceneManager?: SceneManager;
  private animationActive: boolean = false;
  private isPaused: boolean = false;
  private animationId?: number;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
  private globalRotationSpeed: number = 0.0005; // –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
  private objectRotationSpeed: number = 0.01; // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –æ—Å–∏
  private appearanceAnimationDuration: number = 2000; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–º—Å)
  
  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
  private appearanceStartTime?: number;
  
  // –ö–∞–º–µ—Ä–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
  private camera?: THREE.Camera;
  private originalCameraPosition?: THREE.Vector3;
  private targetCameraPosition?: THREE.Vector3;
  private cameraAnimationProgress: number = 0;
  private cameraAnimationDuration: number = 1000; // –º—Å
  private isCameraAnimating: boolean = false;

  constructor() {
    console.log('üé¨ AnimationManager —Å–æ–∑–¥–∞–Ω');
  }

  initialize(sceneManager: SceneManager): void {
    this.sceneManager = sceneManager;
    this.camera = sceneManager.getCamera();
    
    if (this.camera) {
      this.originalCameraPosition = this.camera.position.clone();
    }
    
    console.log('üé¨ AnimationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  startAnimation(): void {
    if (this.animationActive) return;
    
    this.animationActive = true;
    this.isPaused = false;
    this.appearanceStartTime = Date.now();
    
    console.log('‚ñ∂Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
    this.animate();
  }

  stopAnimation(): void {
    if (!this.animationActive) return;
    
    this.animationActive = false;
    
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = undefined;
    }
    
    console.log('‚èπÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  toggleAnimation(): void {
    this.isPaused = !this.isPaused;
    console.log(`‚èØÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è ${this.isPaused ? '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞'}`);
  }

  private animate(): void {
    if (!this.animationActive) return;
    
    const currentTime = Date.now();
    const deltaTime = 16; // ~60 FPS
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
    if (!this.isPaused) {
      this.updateTrackAnimations(currentTime, deltaTime);
      this.updateAppearanceAnimation(currentTime);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–∞—É–∑—ã
    this.updateCameraAnimation(currentTime);
    
    this.animationId = requestAnimationFrame(() => this.animate());
  }

  private updateTrackAnimations(currentTime: number, deltaTime: number): void {
    if (!this.sceneManager) return;
    
    const trackObjects = this.sceneManager.getTrackObjects();
    if (!trackObjects) return;
    
    trackObjects.forEach((trackObject: TrackObject, index: number) => {
      // –û—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ü–µ–Ω—ã
      this.updateOrbitalRotation(trackObject, currentTime, index);
      
      // –í—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Å–∏
      this.updateSelfRotation(trackObject, deltaTime);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      if (trackObject.isSelected) {
        trackObject.updatePulse(currentTime);
      }
    });
  }

  private updateOrbitalRotation(trackObject: TrackObject, currentTime: number, index: number): void {
    if (trackObject.isSelected) return; // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–º –≤—Ä–∞—â–µ–Ω–∏–∏
    
    const originalPos = trackObject.originalPosition;
    const radius = originalPos.length();
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    const phaseOffset = index * 0.1 + trackObject.trackData.id.charCodeAt(0) * 0.01;
    const angle = currentTime * this.globalRotationSpeed + phaseOffset;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Ä–±–∏—Ç–µ
    const cosAngle = Math.cos(angle);
    const sinAngle = Math.sin(angle);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤—ã—Å–æ—Ç—É (Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É)
    const originalY = originalPos.y;
    
    // –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å XZ –¥–ª—è –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    const projectedRadius = Math.sqrt(originalPos.x * originalPos.x + originalPos.z * originalPos.z);
    
    trackObject.position.set(
      cosAngle * projectedRadius,
      originalY, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Å–æ—Ç—É
      sinAngle * projectedRadius
    );
  }

  private updateSelfRotation(trackObject: TrackObject, deltaTime: number): void {
    // –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–æ–∫—Ä—É–≥ —Å–≤–æ–µ–π –æ—Å–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
    const rotationSpeedX = this.objectRotationSpeed * (0.5 + Math.sin(trackObject.trackData.id.charCodeAt(0)) * 0.5);
    const rotationSpeedY = this.objectRotationSpeed * (0.5 + Math.cos(trackObject.trackData.id.charCodeAt(1) || 0) * 0.5);
    const rotationSpeedZ = this.objectRotationSpeed * (0.5 + Math.sin(trackObject.trackData.id.charCodeAt(2) || 0) * 0.5);
    
    trackObject.rotation.x += rotationSpeedX;
    trackObject.rotation.y += rotationSpeedY;
    trackObject.rotation.z += rotationSpeedZ;
  }

  private updateAppearanceAnimation(currentTime: number): void {
    if (!this.appearanceStartTime || !this.sceneManager) return;
    
    const elapsed = currentTime - this.appearanceStartTime;
    const progress = Math.min(elapsed / this.appearanceAnimationDuration, 1);
    
    if (progress >= 1) {
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      this.appearanceStartTime = undefined;
      return;
    }
    
    const trackObjects = this.sceneManager.getTrackObjects();
    if (!trackObjects) return;
    
    // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    trackObjects.forEach((trackObject: TrackObject, index: number) => {
      const delay = (index / trackObjects.length) * 0.5; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 50% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const objectProgress = Math.max(0, Math.min(1, (progress - delay) / (1 - delay)));
      
      if (objectProgress > 0) {
        // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        const scale = this.easeOutCubic(objectProgress);
        const opacity = this.easeOutQuad(objectProgress);
        
        trackObject.scale.setScalar(scale);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        const material = trackObject.material as THREE.MeshStandardMaterial;
        if (material) {
          material.transparent = true;
          material.opacity = opacity;
          
          // –ö–æ–≥–¥–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          if (objectProgress >= 1) {
            material.transparent = false;
            material.opacity = 1;
          }
        }
      }
    });
  }

  private updateCameraAnimation(currentTime: number): void {
    if (!this.isCameraAnimating || !this.camera || !this.originalCameraPosition || !this.targetCameraPosition) {
      return;
    }
    
    this.cameraAnimationProgress += 16; // deltaTime
    const progress = Math.min(this.cameraAnimationProgress / this.cameraAnimationDuration, 1);
    const easedProgress = this.easeInOutCubic(progress);
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
    this.camera.position.lerpVectors(this.originalCameraPosition, this.targetCameraPosition, easedProgress);
    
    if (progress >= 1) {
      this.isCameraAnimating = false;
      this.cameraAnimationProgress = 0;
      console.log('üì∑ –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }

  animateTrackSelection(trackObject: TrackObject): void {
    console.log(`üéØ –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞: ${trackObject.trackData.name}`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    trackObject.position.copy(trackObject.originalPosition);
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∫ –æ–±—ä–µ–∫—Ç—É
    this.animateCameraToTrack(trackObject);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ (–≤–∫–ª—é—á–∞–µ—Ç –ø—É–ª—å—Å–∞—Ü–∏—é)
    trackObject.setSelected(true);
  }

  animateTrackDeselection(): void {
    console.log('üéØ –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–º–µ—Ä—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    this.animateCameraReset();
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ InteractionManager
  }

  animateCameraToTrack(trackObject: TrackObject): void {
    if (!this.camera) return;
    
    this.originalCameraPosition = this.camera.position.clone();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã (–±–ª–∏–∂–µ –∫ –æ–±—ä–µ–∫—Ç—É)
    const direction = trackObject.position.clone().normalize();
    const distance = 15; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–∞
    this.targetCameraPosition = trackObject.position.clone().add(direction.multiplyScalar(distance));
    
    this.isCameraAnimating = true;
    this.cameraAnimationProgress = 0;
    
    console.log('üì∑ –ù–∞—á–∞—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∫ —Ç—Ä–µ–∫—É');
  }

  animateCameraReset(): void {
    if (!this.camera) return;
    
    this.originalCameraPosition = this.camera.position.clone();
    this.targetCameraPosition = new THREE.Vector3(0, 0, 100); // –ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã
    
    this.isCameraAnimating = true;
    this.cameraAnimationProgress = 0;
    
    console.log('üì∑ –ù–∞—á–∞—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞–º–µ—Ä—ã');
  }

  // –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (easing functions)
  private easeOutCubic(t: number): number {
    return 1 - Math.pow(1 - t, 3);
  }

  private easeOutQuad(t: number): number {
    return 1 - (1 - t) * (1 - t);
  }

  private easeInOutCubic(t: number): number {
    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  isAnimating(): boolean {
    return this.animationActive;
  }

  isPausedState(): boolean {
    return this.isPaused;
  }

  isCameraAnimatingState(): boolean {
    return this.isCameraAnimating;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
  setGlobalRotationSpeed(speed: number): void {
    this.globalRotationSpeed = speed;
  }

  setObjectRotationSpeed(speed: number): void {
    this.objectRotationSpeed = speed;
  }

  setAppearanceAnimationDuration(duration: number): void {
    this.appearanceAnimationDuration = duration;
  }

  setCameraAnimationDuration(duration: number): void {
    this.cameraAnimationDuration = duration;
  }

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  dispose(): void {
    this.stopAnimation();
    this.sceneManager = undefined;
    this.camera = undefined;
    this.originalCameraPosition = undefined;
    this.targetCameraPosition = undefined;
    
    console.log('üé¨ AnimationManager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
  }
}