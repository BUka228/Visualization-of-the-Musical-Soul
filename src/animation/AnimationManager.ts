/**
 * AnimationManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –≤ 3D-—Å—Ü–µ–Ω–µ
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∞–Ω–∏–º–∞—Ü–∏–π –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–º–µ—Ä—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */

import * as THREE from 'three';
import { AnimationManager as IAnimationManager, SceneManager } from '../types';

export class AnimationManager implements IAnimationManager {
  private sceneManager?: SceneManager;
  private animationActive: boolean = false;
  private isPaused: boolean = false;
  private animationId?: number;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
  private globalRotationSpeed: number = 0.0005; // –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
  private objectRotationSpeed: number = 0.01; // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –æ—Å–∏
  private appearanceAnimationDuration: number = 2000; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–º—Å)
  
  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
  private appearanceStartTime?: number;
  
  // –ö–∞–º–µ—Ä–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
  private camera?: THREE.Camera;
  private originalCameraPosition?: THREE.Vector3;
  private targetCameraPosition?: THREE.Vector3;
  private cameraAnimationProgress: number = 0;
  private cameraAnimationDuration: number = 1000; // –º—Å
  private isCameraAnimating: boolean = false;

  constructor() {
    console.log('üé¨ AnimationManager —Å–æ–∑–¥–∞–Ω');
  }

  initialize(sceneManager: SceneManager): void {
    this.sceneManager = sceneManager;
    this.camera = sceneManager.getCamera();
    
    if (this.camera) {
      this.originalCameraPosition = this.camera.position.clone();
    }
    
    console.log('üé¨ AnimationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  startAnimation(): void {
    if (this.animationActive) return;
    
    this.animationActive = true;
    this.isPaused = false;
    this.appearanceStartTime = Date.now();
    
    console.log('‚ñ∂Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
    this.animate();
  }

  stopAnimation(): void {
    if (!this.animationActive) return;
    
    this.animationActive = false;
    
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = undefined;
    }
    
    console.log('‚èπÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  toggleAnimation(): void {
    this.isPaused = !this.isPaused;
    console.log(`‚èØÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è ${this.isPaused ? '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞'}`);
  }

  private animate(): void {
    if (!this.animationActive) return;
    
    const currentTime = Date.now();
    const deltaTime = 16; // ~60 FPS
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
    if (!this.isPaused) {
      this.updateTrackAnimations(currentTime, deltaTime);
      this.updateAppearanceAnimation(currentTime);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–∞—É–∑—ã
    this.updateCameraAnimation(currentTime);
    
    this.animationId = requestAnimationFrame(() => this.animate());
  }

  private updateTrackAnimations(currentTime: number, deltaTime: number): void {
    if (!this.sceneManager) return;
    
    // Soul Galaxy renderer handles its own animations
    // Classic track object animations are no longer needed
  }

  // Classic track object animation methods removed - Soul Galaxy handles its own animations

  private updateAppearanceAnimation(currentTime: number): void {
    if (!this.appearanceStartTime || !this.sceneManager) return;
    
    const elapsed = currentTime - this.appearanceStartTime;
    const progress = Math.min(elapsed / this.appearanceAnimationDuration, 1);
    
    if (progress >= 1) {
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      this.appearanceStartTime = undefined;
      return;
    }
    
    // Soul Galaxy renderer handles its own appearance animations
    // Classic track object appearance animations are no longer needed
  }

  private updateCameraAnimation(currentTime: number): void {
    if (!this.isCameraAnimating || !this.camera || !this.originalCameraPosition || !this.targetCameraPosition) {
      return;
    }
    
    // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –∏–¥–µ—Ç —Ñ–æ–∫—É—Å –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª
    if (this.isFocusAnimationActive()) {
      console.log('‚è∏Ô∏è Camera animation paused due to focus animation');
      return;
    }
    
    this.cameraAnimationProgress += 16; // deltaTime
    const progress = Math.min(this.cameraAnimationProgress / this.cameraAnimationDuration, 1);
    const easedProgress = this.easeInOutCubic(progress);
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
    this.camera.position.lerpVectors(this.originalCameraPosition, this.targetCameraPosition, easedProgress);
    
    if (progress >= 1) {
      this.isCameraAnimating = false;
      this.cameraAnimationProgress = 0;
      console.log('üì∑ –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }

  animateTrackSelection(trackId: string): void {
    console.log(`üéØ –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞: ${trackId}`);
    
    // Soul Galaxy renderer handles track selection animations
    // Classic track object selection animations are no longer needed
  }

  animateTrackDeselection(): void {
    console.log('üéØ –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–º–µ—Ä—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    this.animateCameraReset();
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ InteractionManager
  }

  animateCameraToTrack(trackId: string): void {
    if (!this.camera) return;
    
    console.log(`üì∑ –ù–∞—á–∞—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∫ —Ç—Ä–µ–∫—É: ${trackId}`);
    
    // Soul Galaxy renderer handles camera animations to tracks
    // Classic track object camera animations are no longer needed
  }

  animateCameraReset(): void {
    if (!this.camera) return;
    
    this.originalCameraPosition = this.camera.position.clone();
    this.targetCameraPosition = new THREE.Vector3(0, 0, 100); // –ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã
    
    this.isCameraAnimating = true;
    this.cameraAnimationProgress = 0;
    
    console.log('üì∑ –ù–∞—á–∞—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞–º–µ—Ä—ã');
  }

  // –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (easing functions)
  private easeOutCubic(t: number): number {
    return 1 - Math.pow(1 - t, 3);
  }

  private easeOutQuad(t: number): number {
    return 1 - (1 - t) * (1 - t);
  }

  private easeInOutCubic(t: number): number {
    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª
   */
  private isFocusAnimationActive(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ–∫—É—Å–∞
    if (typeof window !== 'undefined' && (window as any).isCameraFocusAnimating === true) {
      return true;
    }
    
    // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—ã
    if (typeof window !== 'undefined') {
      const cameraController = (window as any).cameraController;
      if (cameraController && typeof cameraController.isCameraAnimating === 'function') {
        return cameraController.isCameraAnimating();
      }
      
      const focusAnimationSystem = (window as any).focusAnimationSystem;
      if (focusAnimationSystem && typeof focusAnimationSystem.isAnimating === 'function') {
        return focusAnimationSystem.isAnimating();
      }
    }
    
    return false;
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  isAnimating(): boolean {
    return this.animationActive;
  }

  isPausedState(): boolean {
    return this.isPaused;
  }

  isCameraAnimatingState(): boolean {
    return this.isCameraAnimating;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
  setGlobalRotationSpeed(speed: number): void {
    this.globalRotationSpeed = speed;
  }

  setObjectRotationSpeed(speed: number): void {
    this.objectRotationSpeed = speed;
  }

  setAppearanceAnimationDuration(duration: number): void {
    this.appearanceAnimationDuration = duration;
  }

  setCameraAnimationDuration(duration: number): void {
    this.cameraAnimationDuration = duration;
  }

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  dispose(): void {
    this.stopAnimation();
    this.sceneManager = undefined;
    this.camera = undefined;
    this.originalCameraPosition = undefined;
    this.targetCameraPosition = undefined;
    
    console.log('üé¨ AnimationManager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
  }
}