/**
 * Mock API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
 * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
 */

import { YandexTrackData } from '../data/DataLoader';

export class MockYandexAPI {
  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  static async testToken(token: string): Promise<{ isValid: boolean; error?: string }> {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    if (!token || token.length < 20) {
      return { isValid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞' };
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await new Promise(resolve => setTimeout(resolve, 500));

    // –°—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const isValid = token.includes('Session_id') || token.length > 50;
    
    return { 
      isValid, 
      error: isValid ? undefined : '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫' 
    };
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤
   */
  static async getLikedTracks(token: string): Promise<any[]> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤
    return [];
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–∫–∞
   */
  static async getTrackDetails(trackId: string, token: string): Promise<any> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await new Promise(resolve => setTimeout(resolve, 200));

    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞
    const baseTrack = {
      id: trackId,
      title: `Track ${trackId}`,
      artists: [{ name: 'Mock Artist', genres: ['rock'] }],
      albums: [{ title: 'Mock Album' }],
      duration_ms: 180000,
      available: true,
      cover_uri: 'avatars.yandex.net/get-music-content/mock/400x400'
    };

    return baseTrack;
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ç—Ä–µ–∫–∞
   */
  static async getTrackPreview(trackId: string, token: string): Promise<string | null> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await new Promise(resolve => setTimeout(resolve, 300));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
    return 'https://www.learningcontainer.com/wp-content/uploads/2020/02/Kalimba.mp3';
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  static async saveData(data: any): Promise<void> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 500));

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('music_data_backup', JSON.stringify(data));
    
    console.log('Mock API: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
  }
}

/**
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ fetch –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ API endpoints
 */
export function setupMockAPI(): void {
  const originalFetch = window.fetch;

  window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {
    const url = typeof input === 'string' ? input : input.toString();

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º API –≤—ã–∑–æ–≤—ã –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
    if (url.includes('/api/yandex-music/')) {
      try {
        const body = init?.body ? JSON.parse(init.body as string) : {};
        const token = body.token || '';

        if (url.includes('/test')) {
          const result = await MockYandexAPI.testToken(token);
          return new Response(JSON.stringify(result), {
            status: result.isValid ? 200 : 401,
            headers: { 'Content-Type': 'application/json' }
          });
        }

        if (url.includes('/liked-tracks')) {
          const tracks = await MockYandexAPI.getLikedTracks(token);
          return new Response(JSON.stringify({ tracks }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
        }

        if (url.includes('/track-details')) {
          const track = await MockYandexAPI.getTrackDetails(body.trackId, token);
          return new Response(JSON.stringify({ track }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
        }

        if (url.includes('/track-preview')) {
          const previewUrl = await MockYandexAPI.getTrackPreview(body.trackId, token);
          return new Response(JSON.stringify({ preview_url: previewUrl }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
        }
      } catch (error) {
        return new Response(JSON.stringify({ error: 'Mock API Error' }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (url.includes('/api/save-music-data')) {
      try {
        const data = init?.body ? JSON.parse(init.body as string) : {};
        await MockYandexAPI.saveData(data);
        
        return new Response(JSON.stringify({ success: true }), {
          status: 200,
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (error) {
        return new Response(JSON.stringify({ error: 'Save failed' }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
    return originalFetch(input, init);
  };

  console.log('üîß Mock API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
}