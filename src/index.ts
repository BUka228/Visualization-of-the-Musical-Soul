import { MusicGalaxyApp, AppConfig, AppState, ProcessedTrack } from './types';
import { SceneManager } from './scene/SceneManager';
import { DataLoader } from './data/DataLoader';
import { DataProcessor } from './data/DataProcessor';
import { UIManager } from './ui/UIManager';
import { FirstLoadScreen } from './ui/FirstLoadScreen';
import { BurgerMenu } from './ui/BurgerMenu';
import { TokenManager } from './auth/TokenManager';
import { setupMockAPI } from './api/MockYandexAPI';
import { Vector3 } from 'three';

// –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV === 'development') {
  import('./scene/test-scene');
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_CONFIG: AppConfig = {
  scene: {
    galaxyRadius: 50,
    objectMinSize: 0.5,
    objectMaxSize: 3.0,
    animationSpeed: 0.001,
    cameraDistance: 100,
    genreColors: {
      'metal': '#FF0000',
      'rock': '#FF4500',
      'indie': '#4169E1',
      'pop': '#FFD700',
      'electronic': '#9400D3',
      'jazz': '#228B22',
      'classical': '#F5F5DC',
      'hip-hop': '#8B4513',
      'default': '#FFFFFF'
    }
  },
  api: {
    baseUrl: 'https://api.music.yandex.net',
    clientId: 'demo-client-id',
    redirectUri: window.location.origin
  },
  audio: {
    defaultVolume: 0.7,
    fadeInDuration: 500,
    fadeOutDuration: 300
  },
  animation: {
    rotationSpeed: 0.001,
    cameraTransitionDuration: 1000,
    objectAppearDuration: 2000
  }
};

class MusicGalaxyApplication implements MusicGalaxyApp {
  private config: AppConfig;
  private state: AppState;
  private container?: HTMLElement;
  private sceneManager?: SceneManager;
  private uiManager?: UIManager;
  private firstLoadScreen?: FirstLoadScreen;
  private burgerMenu?: BurgerMenu;

  constructor(config: Partial<AppConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config };
    this.state = {
      isInitialized: false,
      isLoading: false,
      isAuthenticated: false,
      tracks: [],
      genreStats: {},
      animationPaused: false
    };
  }

  async initialize(container: HTMLElement): Promise<void> {
    console.log('Initializing Music Galaxy 3D...');
    
    this.container = container;
    this.state.isLoading = true;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGL
      if (!this.checkWebGLSupport()) {
        throw new Error('WebGL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      }

      console.log('WebGL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      await this.checkFirstLoadRequirement();
      
    } catch (error) {
      this.state.isLoading = false;
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showError(error as Error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private async checkFirstLoadRequirement(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–æ–∫–µ–Ω–∞
    const hasValidData = await DataLoader.checkDataFileExists();
    const hasValidToken = TokenManager.hasValidToken();
    const dataIsFresh = await DataLoader.checkDataFreshness();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏:
    // 1. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–æ–±—â–µ
    // 2. –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    // 3. –ï—Å—Ç—å —Ç–æ–∫–µ–Ω, –Ω–æ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    const needsFirstLoad = !hasValidData || 
                          (!dataIsFresh && !hasValidToken) || 
                          (TokenManager.getToken() && !hasValidToken);

    if (needsFirstLoad) {
      await this.showFirstLoadScreen();
    } else {
      await this.initializeMainApp();
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private async showFirstLoadScreen(): Promise<void> {
    this.firstLoadScreen = new FirstLoadScreen(this.container!);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    window.addEventListener('first-load-completed', (event: any) => {
      this.handleFirstLoadCompleted(event.detail);
    });

    const shown = await this.firstLoadScreen.show();
    if (!shown) {
      // –≠–∫—Ä–∞–Ω –Ω–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω, –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
      await this.initializeMainApp();
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private async handleFirstLoadCompleted(detail: any): Promise<void> {
    console.log('–ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', detail);
    
    if (this.firstLoadScreen) {
      this.firstLoadScreen.hide();
      this.firstLoadScreen = undefined;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await this.initializeMainApp();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   */
  private async initializeMainApp(): Promise<void> {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    this.uiManager = new UIManager();
    this.uiManager.initialize();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
    this.burgerMenu = new BurgerMenu();
    this.burgerMenu.initialize();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D-—Å—Ü–µ–Ω—ã
    this.sceneManager = new SceneManager(this.container!, this.config.scene);
    this.sceneManager.initializeScene();
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è UI Manager —Å SceneManager
    this.sceneManager.setUIManager(this.uiManager);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    await this.loadMusicData();
    
    this.state.isInitialized = true;
    this.state.isLoading = false;
    
    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingElement = document.getElementById('loading');
    if (loadingElement) {
      loadingElement.style.display = 'none';
    }
    
    console.log('Music Galaxy 3D –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  }

  private async loadMusicData(): Promise<void> {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      const isFresh = await DataLoader.checkDataFreshness();
      if (!isFresh) {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        this.showDataUpdateNotification();
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const musicData = await DataLoader.loadMusicData();
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DataProcessor
      const dataProcessor = new DataProcessor();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const convertedTracks = dataProcessor.convertYandexTrackData(musicData.tracks);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è 3D-—Å—Ü–µ–Ω—ã
      const processedTracks = dataProcessor.processTrackData(convertedTracks);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å—Ü–µ–Ω—É
      this.loadTracks(processedTracks);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é DataProcessor
      const genreStats = dataProcessor.analyzeGenres(convertedTracks);
      this.state.genreStats = genreStats;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ UIManager
      if (this.uiManager) {
        this.uiManager.updateAppState(this.state);
      }
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedTracks.length} —Ç—Ä–µ–∫–æ–≤`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  async loadTracks(tracks: ProcessedTrack[]): Promise<void> {
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ ${tracks.length} —Ç—Ä–µ–∫–æ–≤ –≤ 3D-—Å—Ü–µ–Ω—É...`);
    
    this.state.tracks = tracks;
    
    if (this.sceneManager) {
      // –°–æ–∑–¥–∞–µ–º 3D-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–æ–≤
      await this.sceneManager.createTrackObjects(tracks);
      console.log('3D-–æ–±—ä–µ–∫—Ç—ã —Ç—Ä–µ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã');
    }
  }

  selectTrack(trackId: string): void {
    console.log(`–í—ã–±–æ—Ä —Ç—Ä–µ–∫–∞: ${trackId}`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
  }

  resetView(): void {
    console.log('–°–±—Ä–æ—Å –≤–∏–¥–∞ –∫–∞–º–µ—Ä—ã');
    if (this.sceneManager) {
      this.sceneManager.getInteractionManager().resetCamera();
    }
  }

  toggleAnimation(): void {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏');
    if (this.sceneManager) {
      this.sceneManager.getInteractionManager().toggleAnimation();
      this.state.animationPaused = this.sceneManager.getAnimationManager().isPausedState();
    }
  }

  dispose(): void {
    console.log('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (this.sceneManager) {
      this.sceneManager.dispose();
      this.sceneManager = undefined;
    }
    
    if (this.uiManager) {
      this.uiManager.dispose();
      this.uiManager = undefined;
    }
    
    if (this.burgerMenu) {
      this.burgerMenu.dispose();
      this.burgerMenu = undefined;
    }
    
    if (this.firstLoadScreen) {
      this.firstLoadScreen.hide();
      this.firstLoadScreen = undefined;
    }
    
    this.state.isInitialized = false;
  }

  getState(): AppState {
    return { ...this.state };
  }

  private checkWebGLSupport(): boolean {
    try {
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      return !!context;
    } catch (e) {
      return false;
    }
  }



  private updateStatsUI(): void {
    const statsContainer = document.getElementById('genre-stats');
    if (!statsContainer) return;
    
    const sortedGenres = Object.entries(this.state.genreStats)
      .sort(([,a], [,b]) => b.count - a.count);
    
    statsContainer.innerHTML = `
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º</h3>
      <div class="genre-list">
        ${sortedGenres.map(([genre, stats]) => `
          <div class="genre-item" style="border-left: 4px solid ${stats.color}">
            <span class="genre-name">${genre}</span>
            <span class="genre-count">${stats.count} —Ç—Ä–µ–∫–æ–≤ (${stats.percentage.toFixed(1)}%)</span>
          </div>
        `).join('')}
      </div>
      <div class="total-tracks">
        –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${this.state.tracks.length}
      </div>
    `;
  }

  private async showDataUpdateNotification(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateStatus = await DataLoader.getDataUpdateStatus();
      
      const notification = document.createElement('div');
      notification.className = 'data-update-notification';
      
      let ageInfo = '';
      if (updateStatus.lastUpdate && updateStatus.hoursOld) {
        const lastUpdateStr = updateStatus.lastUpdate.toLocaleString('ru');
        ageInfo = `<p><small>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdateStr} (${updateStatus.hoursOld.toFixed(1)} —á. –Ω–∞–∑–∞–¥)</small></p>`;
      }
      
      notification.innerHTML = `
        <div style="
          background: #ffd93d; 
          color: #333; 
          padding: 15px; 
          border-radius: 8px; 
          margin: 10px;
          border-left: 4px solid #ffb700;
          position: relative;
        ">
          <h4>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏</h4>
          ${ageInfo}
          <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏:</p>
          <code style="background: #f0f0f0; padding: 5px; border-radius: 4px; display: block; margin: 10px 0;">npm run collect-data</code>
          <details style="margin-top: 10px;">
            <summary style="cursor: pointer; font-weight: bold;">üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</summary>
            <pre style="background: #f0f0f0; padding: 10px; border-radius: 4px; margin-top: 5px; font-size: 12px; white-space: pre-wrap;">${updateStatus.instructions}</pre>
          </details>
          <button onclick="this.parentElement.parentElement.remove()" style="
            position: absolute;
            top: 10px;
            right: 15px;
            background: none; 
            border: none; 
            font-size: 18px; 
            cursor: pointer;
            color: #666;
          ">√ó</button>
        </div>
      `;
      
      document.body.insertBefore(notification, document.body.firstChild);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ –∏–∑-–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 15000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
      const notification = document.createElement('div');
      notification.className = 'data-update-notification';
      notification.innerHTML = `
        <div style="
          background: #ffd93d; 
          color: #333; 
          padding: 15px; 
          border-radius: 8px; 
          margin: 10px;
          border-left: 4px solid #ffb700;
        ">
          <h4>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏</h4>
          <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:</p>
          <code style="background: #f0f0f0; padding: 5px; border-radius: 4px;">npm run collect-data</code>
          <button onclick="this.parentElement.parentElement.remove()" style="
            float: right; 
            background: none; 
            border: none; 
            font-size: 18px; 
            cursor: pointer;
          ">√ó</button>
        </div>
      `;
      
      document.body.insertBefore(notification, document.body.firstChild);
      
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 10000);
    }
  }

  private showError(error: Error): void {
    const loadingElement = document.getElementById('loading');
    if (loadingElement) {
      loadingElement.innerHTML = `
        <div style="color: #ff6b6b; text-align: center;">
          <h3>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h3>
          <p>${error.message}</p>
          <button onclick="location.reload()" style="
            background: #ff6b6b; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 4px; 
            cursor: pointer;
            margin-top: 10px;
          ">
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      `;
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mock API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  setupMockAPI();
  
  const container = document.getElementById('canvas-container');
  if (!container) {
    console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä canvas-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const app = new MusicGalaxyApplication();
  
  try {
    await app.initialize(container);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π UI
    setupBasicUIEventHandlers(app);
    
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error);
  }
});

function setupBasicUIEventHandlers(app: MusicGalaxyApp): void {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  document.addEventListener('keydown', (event) => {
    switch (event.code) {
      case 'KeyR':
        app.resetView();
        break;
      case 'Space':
        event.preventDefault();
        app.toggleAnimation();
        break;
    }
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { MusicGalaxyApplication, DEFAULT_CONFIG };
export { AudioManager } from './audio/AudioManager';
export { SceneManager } from './scene/SceneManager';
export { DataProcessor } from './data/DataProcessor';
export * from './types';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  (window as any).MusicGalaxyApplication = MusicGalaxyApplication;
  (window as any).SceneManager = SceneManager;
  (window as any).DataProcessor = DataProcessor;
}