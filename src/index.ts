import { MusicGalaxyApp, AppConfig, AppState, ProcessedTrack } from './types';
import { SceneManager } from './scene/SceneManager';
import { DataLoader } from './data/DataLoader';
import { Vector3 } from 'three';

// –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV === 'development') {
  import('./scene/test-scene');
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_CONFIG: AppConfig = {
  scene: {
    galaxyRadius: 50,
    objectMinSize: 0.5,
    objectMaxSize: 3.0,
    animationSpeed: 0.001,
    cameraDistance: 100,
    genreColors: {
      'metal': '#FF0000',
      'rock': '#FF4500',
      'indie': '#4169E1',
      'pop': '#FFD700',
      'electronic': '#9400D3',
      'jazz': '#228B22',
      'classical': '#F5F5DC',
      'hip-hop': '#8B4513',
      'default': '#FFFFFF'
    }
  },
  api: {
    baseUrl: 'https://api.music.yandex.net',
    clientId: 'demo-client-id',
    redirectUri: window.location.origin
  },
  audio: {
    defaultVolume: 0.7,
    fadeInDuration: 500,
    fadeOutDuration: 300
  },
  animation: {
    rotationSpeed: 0.001,
    cameraTransitionDuration: 1000,
    objectAppearDuration: 2000
  }
};

class MusicGalaxyApplication implements MusicGalaxyApp {
  private config: AppConfig;
  private state: AppState;
  private container?: HTMLElement;
  private sceneManager?: SceneManager;

  constructor(config: Partial<AppConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config };
    this.state = {
      isInitialized: false,
      isLoading: false,
      isAuthenticated: false,
      tracks: [],
      genreStats: {},
      animationPaused: false
    };
  }

  async initialize(container: HTMLElement): Promise<void> {
    console.log('Initializing Music Galaxy 3D...');
    
    this.container = container;
    this.state.isLoading = true;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGL
      if (!this.checkWebGLSupport()) {
        throw new Error('WebGL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      }

      console.log('WebGL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', this.config);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D-—Å—Ü–µ–Ω—ã
      this.sceneManager = new SceneManager(container, this.config.scene);
      this.sceneManager.initializeScene();
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
      await this.loadMusicData();
      
      this.state.isInitialized = true;
      this.state.isLoading = false;
      
      // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingElement = document.getElementById('loading');
      if (loadingElement) {
        loadingElement.style.display = 'none';
      }
      
      console.log('Music Galaxy 3D –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      this.state.isLoading = false;
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showError(error as Error);
      throw error;
    }
  }

  private async loadMusicData(): Promise<void> {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      const isFresh = await DataLoader.checkDataFreshness();
      if (!isFresh) {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        this.showDataUpdateNotification();
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const musicData = await DataLoader.loadMusicData();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è 3D-—Å—Ü–µ–Ω—ã
      const processedTracks = this.processTracksForScene(musicData.tracks);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å—Ü–µ–Ω—É
      this.loadTracks(processedTracks);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateGenreStats(processedTracks);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedTracks.length} —Ç—Ä–µ–∫–æ–≤`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  loadTracks(tracks: ProcessedTrack[]): void {
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ ${tracks.length} —Ç—Ä–µ–∫–æ–≤ –≤ 3D-—Å—Ü–µ–Ω—É...`);
    
    this.state.tracks = tracks;
    
    if (this.sceneManager) {
      // –°–æ–∑–¥–∞–µ–º 3D-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–æ–≤
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ 3D-–æ–±—ä–µ–∫—Ç–æ–≤ —Ç—Ä–µ–∫–æ–≤...');
    }
  }

  selectTrack(trackId: string): void {
    console.log(`–í—ã–±–æ—Ä —Ç—Ä–µ–∫–∞: ${trackId}`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
  }

  resetView(): void {
    console.log('–°–±—Ä–æ—Å –≤–∏–¥–∞ –∫–∞–º–µ—Ä—ã');
    if (this.sceneManager) {
      this.sceneManager.getInteractionManager().resetCamera();
    }
  }

  toggleAnimation(): void {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏');
    if (this.sceneManager) {
      this.sceneManager.getInteractionManager().toggleAnimation();
      this.state.animationPaused = this.sceneManager.getInteractionManager().isAnimationPaused();
    }
  }

  dispose(): void {
    console.log('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (this.sceneManager) {
      this.sceneManager.dispose();
      this.sceneManager = undefined;
    }
    
    this.state.isInitialized = false;
  }

  getState(): AppState {
    return { ...this.state };
  }

  private checkWebGLSupport(): boolean {
    try {
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      return !!context;
    } catch (e) {
      return false;
    }
  }

  private processTracksForScene(tracks: any[]): ProcessedTrack[] {
    return tracks.map((track, index) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –∂–∞–Ω—Ä—É
      const color = this.config.scene.genreColors[track.genre] || this.config.scene.genreColors.default;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä (–±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä + —Å–ª—É—á–∞–π–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è)
      const baseSize = this.config.scene.objectMinSize;
      const sizeRange = this.config.scene.objectMaxSize - this.config.scene.objectMinSize;
      const size = baseSize + (track.duration / 600) * sizeRange; // –†–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ
      const position = this.generateSpherePosition(this.config.scene.galaxyRadius);
      
      return {
        id: track.id,
        name: track.title,
        artist: track.artist,
        album: track.album,
        genre: track.genre,
        duration: track.duration,
        popularity: Math.random() * 100, // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        previewUrl: track.preview_url,
        imageUrl: track.cover_url,
        color,
        size: Math.max(baseSize, Math.min(size, this.config.scene.objectMaxSize)),
        position
      };
    });
  }

  private generateSpherePosition(radius: number): Vector3 {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ñ–µ—Ä—ã
    const theta = Math.random() * Math.PI * 2; // –ê–∑–∏–º—É—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª
    const phi = Math.acos(2 * Math.random() - 1); // –ü–æ–ª—è—Ä–Ω—ã–π —É–≥–æ–ª
    const r = radius * (0.5 + Math.random() * 0.5); // –†–∞–¥–∏—É—Å —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
    
    return new Vector3(
      r * Math.sin(phi) * Math.cos(theta),
      r * Math.sin(phi) * Math.sin(theta),
      r * Math.cos(phi)
    );
  }

  private updateGenreStats(tracks: ProcessedTrack[]): void {
    const stats: { [genre: string]: { count: number; percentage: number; color: string } } = {};
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
    tracks.forEach(track => {
      if (!stats[track.genre]) {
        stats[track.genre] = {
          count: 0,
          percentage: 0,
          color: this.config.scene.genreColors[track.genre] || this.config.scene.genreColors.default
        };
      }
      stats[track.genre].count++;
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const totalTracks = tracks.length;
    Object.keys(stats).forEach(genre => {
      stats[genre].percentage = (stats[genre].count / totalTracks) * 100;
    });
    
    this.state.genreStats = stats;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.updateStatsUI();
  }

  private updateStatsUI(): void {
    const statsContainer = document.getElementById('genre-stats');
    if (!statsContainer) return;
    
    const sortedGenres = Object.entries(this.state.genreStats)
      .sort(([,a], [,b]) => b.count - a.count);
    
    statsContainer.innerHTML = `
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º</h3>
      <div class="genre-list">
        ${sortedGenres.map(([genre, stats]) => `
          <div class="genre-item" style="border-left: 4px solid ${stats.color}">
            <span class="genre-name">${genre}</span>
            <span class="genre-count">${stats.count} —Ç—Ä–µ–∫–æ–≤ (${stats.percentage.toFixed(1)}%)</span>
          </div>
        `).join('')}
      </div>
      <div class="total-tracks">
        –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${this.state.tracks.length}
      </div>
    `;
  }

  private async showDataUpdateNotification(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateStatus = await DataLoader.getDataUpdateStatus();
      
      const notification = document.createElement('div');
      notification.className = 'data-update-notification';
      
      let ageInfo = '';
      if (updateStatus.lastUpdate && updateStatus.hoursOld) {
        const lastUpdateStr = updateStatus.lastUpdate.toLocaleString('ru');
        ageInfo = `<p><small>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdateStr} (${updateStatus.hoursOld.toFixed(1)} —á. –Ω–∞–∑–∞–¥)</small></p>`;
      }
      
      notification.innerHTML = `
        <div style="
          background: #ffd93d; 
          color: #333; 
          padding: 15px; 
          border-radius: 8px; 
          margin: 10px;
          border-left: 4px solid #ffb700;
          position: relative;
        ">
          <h4>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏</h4>
          ${ageInfo}
          <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏:</p>
          <code style="background: #f0f0f0; padding: 5px; border-radius: 4px; display: block; margin: 10px 0;">npm run collect-data</code>
          <details style="margin-top: 10px;">
            <summary style="cursor: pointer; font-weight: bold;">üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</summary>
            <pre style="background: #f0f0f0; padding: 10px; border-radius: 4px; margin-top: 5px; font-size: 12px; white-space: pre-wrap;">${updateStatus.instructions}</pre>
          </details>
          <button onclick="this.parentElement.parentElement.remove()" style="
            position: absolute;
            top: 10px;
            right: 15px;
            background: none; 
            border: none; 
            font-size: 18px; 
            cursor: pointer;
            color: #666;
          ">√ó</button>
        </div>
      `;
      
      document.body.insertBefore(notification, document.body.firstChild);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ –∏–∑-–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 15000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
      const notification = document.createElement('div');
      notification.className = 'data-update-notification';
      notification.innerHTML = `
        <div style="
          background: #ffd93d; 
          color: #333; 
          padding: 15px; 
          border-radius: 8px; 
          margin: 10px;
          border-left: 4px solid #ffb700;
        ">
          <h4>‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏</h4>
          <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:</p>
          <code style="background: #f0f0f0; padding: 5px; border-radius: 4px;">npm run collect-data</code>
          <button onclick="this.parentElement.parentElement.remove()" style="
            float: right; 
            background: none; 
            border: none; 
            font-size: 18px; 
            cursor: pointer;
          ">√ó</button>
        </div>
      `;
      
      document.body.insertBefore(notification, document.body.firstChild);
      
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 10000);
    }
  }

  private showError(error: Error): void {
    const loadingElement = document.getElementById('loading');
    if (loadingElement) {
      loadingElement.innerHTML = `
        <div style="color: #ff6b6b; text-align: center;">
          <h3>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h3>
          <p>${error.message}</p>
          <button onclick="location.reload()" style="
            background: #ff6b6b; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 4px; 
            cursor: pointer;
            margin-top: 10px;
          ">
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      `;
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
  const container = document.getElementById('canvas-container');
  if (!container) {
    console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä canvas-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const app = new MusicGalaxyApplication();
  
  try {
    await app.initialize(container);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π UI
    setupUIEventHandlers(app);
    
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error);
  }
});

function setupUIEventHandlers(app: MusicGalaxyApp): void {
  // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const collectDataButton = document.getElementById('collect-data-button');
  if (collectDataButton) {
    collectDataButton.addEventListener('click', () => {
      showDataCollectionInstructions();
    });
  }

  // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã
  const resetCameraButton = document.getElementById('reset-camera');
  if (resetCameraButton) {
    resetCameraButton.addEventListener('click', () => {
      app.resetView();
    });
  }

  // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã –∞–Ω–∏–º–∞—Ü–∏–∏
  const toggleAnimationButton = document.getElementById('toggle-animation');
  if (toggleAnimationButton) {
    toggleAnimationButton.addEventListener('click', () => {
      app.toggleAnimation();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  document.addEventListener('keydown', (event) => {
    switch (event.code) {
      case 'KeyR':
        app.resetView();
        break;
      case 'Space':
        event.preventDefault();
        app.toggleAnimation();
        break;
    }
  });
}

function showDataCollectionInstructions(): void {
  const modal = document.createElement('div');
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  `;
  
  modal.innerHTML = `
    <div style="
      background: #1a1a1a;
      color: white;
      padding: 30px;
      border-radius: 12px;
      max-width: 600px;
      max-height: 80vh;
      overflow-y: auto;
      border: 1px solid #333;
    ">
      <h2 style="margin-top: 0; color: #4fc3f7;">üéµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏</h2>
      
      <div style="margin: 20px 0;">
        <h3>üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
        <ol style="line-height: 1.6;">
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ <a href="https://music.yandex.ru" target="_blank" style="color: #4fc3f7;">music.yandex.ru</a> –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ</li>
          <li>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å</li>
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ DevTools (–Ω–∞–∂–º–∏—Ç–µ F12)</li>
          <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É <strong>Application</strong> ‚Üí <strong>Cookies</strong></li>
          <li>–ù–∞–π–¥–∏—Ç–µ cookie —Å –∏–º–µ–Ω–µ–º <code style="background: #333; padding: 2px 4px; border-radius: 3px;">Session_id</code></li>
          <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤)</li>
        </ol>
      </div>
      
      <div style="margin: 20px 0;">
        <h3>üíª –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞:</h3>
        <p>–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:</p>
        <div style="background: #333; padding: 15px; border-radius: 8px; font-family: monospace;">
          npm run collect-data
        </div>
        <p style="margin-top: 10px; font-size: 14px; color: #ccc;">
          –ò–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: <code style="background: #333; padding: 2px 4px;">python scripts/collect_yandex_music_data.py</code>
        </p>
      </div>
      
      <div style="margin: 20px 0;">
        <h3>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:</h3>
        <ul style="line-height: 1.6; color: #ccc;">
          <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏</li>
          <li>–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è</li>
          <li>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Ñ–∞–π–ª <code>src/data/music_data.json</code></li>
          <li>–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
        </ul>
      </div>
      
      <div style="text-align: center; margin-top: 30px;">
        <button onclick="this.closest('div').parentElement.remove()" style="
          background: #4fc3f7;
          color: white;
          border: none;
          padding: 12px 24px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 16px;
        ">
          –ü–æ–Ω—è—Ç–Ω–æ
        </button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { MusicGalaxyApplication, DEFAULT_CONFIG };
export * from './types';