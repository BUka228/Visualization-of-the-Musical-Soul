/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Yandex Music API –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
 */

const https = require('https');

const TOKEN = 'available';

function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const req = https.request(url, options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({ status: res.statusCode, data: jsonData, headers: res.headers });
                } catch (error) {
                    resolve({ status: res.statusCode, data: data, headers: res.headers });
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

async function testYandexAPI() {
    console.log('üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Music API');
    console.log('================================');
    console.log(`–¢–æ–∫–µ–Ω: ${TOKEN.substring(0, 10)}...`);
    console.log('');

    const headers = {
        'Authorization': `OAuth ${TOKEN}`,
        'User-Agent': 'Yandex-Music-API/1.0',
        'Content-Type': 'application/json'
    };

    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        const userResponse = await makeRequest('https://api.music.yandex.net/account/status', {
            method: 'GET',
            headers: headers
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${userResponse.status}`);
        
        if (userResponse.status !== 200) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${JSON.stringify(userResponse.data, null, 2)}`);
            return;
        }

        const userId = userResponse.data.result?.account?.uid;
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! User ID: ${userId}`);
        console.log('');

        if (!userId) {
            console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤
        console.log('‚ù§Ô∏è –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
        const likesResponse = await makeRequest(`https://api.music.yandex.net/users/${userId}/likes/tracks`, {
            method: 'GET',
            headers: headers
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${likesResponse.status}`);
        
        if (likesResponse.status !== 200) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–æ–≤: ${JSON.stringify(likesResponse.data, null, 2)}`);
            return;
        }

        const trackIds = likesResponse.data.result?.library?.tracks?.map(track => track.id) || [];
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤: ${trackIds.length}`);
        console.log('');

        if (trackIds.length === 0) {
            console.log('   ‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤');
            return;
        }

        // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤—ã—Ö 5 —Ç—Ä–µ–∫–∞—Ö
        console.log('üéµ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö...');
        const testTrackIds = trackIds.slice(0, 5);
        console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏: ${testTrackIds.join(', ')}`);

        const tracksResponse = await makeRequest('https://api.music.yandex.net/tracks', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                'track-ids': testTrackIds,
                'with-positions': false
            })
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${tracksResponse.status}`);
        
        if (tracksResponse.status !== 200) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤: ${JSON.stringify(tracksResponse.data, null, 2)}`);
            return;
        }

        const tracks = tracksResponse.data.result || [];
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}`);
        console.log('');

        if (tracks.length > 0) {
            console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤:');
            
            const availableCount = tracks.filter(t => t.available).length;
            const unavailableCount = tracks.filter(t => !t.available).length;
            
            console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã—Ö: ${availableCount}`);
            console.log(`   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: ${unavailableCount}`);
            console.log('');

            console.log('üéº –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–∫–æ–≤:');
            tracks.slice(0, 3).forEach((track, index) => {
                console.log(`   ${index + 1}. "${track.title}" - ${track.artists?.map(a => a.name).join(', ')}`);
                console.log(`      –ê–ª—å–±–æ–º: ${track.albums?.[0]?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                console.log(`      –î–æ—Å—Ç—É–ø–µ–Ω: ${track.available ? '‚úÖ' : '‚ùå'}`);
                console.log(`      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor((track.durationMs || 0) / 1000)}—Å`);
                console.log(`      ID: ${track.id}`);
                console.log('');
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
            console.log('üîç –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞:');
            console.log(JSON.stringify(tracks[0], null, 2));
        }

        // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤ (–∫–∞–∫ –≤ API)
        console.log('üöÄ –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ (–∫–∞–∫ –≤ API)...');
        
        const batchSize = 100;
        const allTracks = [];
        
        for (let i = 0; i < Math.min(trackIds.length, 200); i += batchSize) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 200 —Ç—Ä–µ–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
            const batch = trackIds.slice(i, i + batchSize);
            console.log(`   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(i/batchSize) + 1}: —Ç—Ä–µ–∫–∏ ${i + 1}-${Math.min(i + batchSize, trackIds.length)}`);
            
            const batchResponse = await makeRequest('https://api.music.yandex.net/tracks', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({
                    'track-ids': batch,
                    'with-positions': false
                })
            });

            if (batchResponse.status === 200) {
                const batchTracks = batchResponse.data.result || [];
                allTracks.push(...batchTracks);
                console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${batchTracks.length} —Ç—Ä–µ–∫–æ–≤ –≤ –±–∞—Ç—á–µ`);
            } else {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ: ${batchResponse.status}`);
            }
        }

        console.log('');
        console.log('üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${allTracks.length}`);
        console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: ${allTracks.filter(t => t.available).length}`);
        console.log(`   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: ${allTracks.filter(t => !t.available).length}`);
        console.log(`   –¢—Ä–µ–∫–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: ${allTracks.filter(t => t.title).length}`);
        console.log(`   –¢—Ä–µ–∫–æ–≤ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º: ${allTracks.filter(t => t.artists && t.artists.length > 0).length}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        const processedTracks = allTracks
            .map((track) => ({
                id: String(track.id),
                title: track.title || 'Unknown Title',
                artist: track.artists?.map((a) => a.name).join(', ') || 'Unknown Artist',
                album: track.albums?.[0]?.title || 'Unknown Album',
                duration: Math.floor((track.durationMs || 0) / 1000),
                genre: track.albums?.[0]?.genre || 'unknown',
                available: track.available !== false,
            }))
            .filter((track) => track.title && track.artist);

        console.log(`   –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${processedTracks.length}`);
        
        if (processedTracks.length === 0) {
            console.log('');
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–µ–∫–æ–≤!');
            console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('   1. –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–º–µ—é—Ç available: false');
            console.log('   2. –£ —Ç—Ä–µ–∫–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç title –∏–ª–∏ artists');
            console.log('   3. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö API');
        }

    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        console.log(error.stack);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testYandexAPI().then(() => {
    console.log('');
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch((error) => {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});