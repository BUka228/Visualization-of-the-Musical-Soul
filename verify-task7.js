/**
 * –°–∫—Ä–∏–ø—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ 7
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–¥–∞—á–∏
 */

import { TrackObject } from './src/scene/TrackObject.js';
import { DataProcessor } from './src/data/DataProcessor.js';
import * as THREE from 'three';

console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ 7...\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const testTrack = {
    id: 'test-1',
    name: 'Test Track',
    artist: 'Test Artist',
    album: 'Test Album',
    genre: 'metal',
    popularity: 85,
    duration: 240,
    previewUrl: undefined,
    color: '#FF0000',
    size: 2.0,
    position: new THREE.Vector3(10, 5, -15)
};

let allTestsPassed = true;

function runTest(testName, testFunction) {
    try {
        console.log(`üìã ${testName}`);
        const result = testFunction();
        if (result) {
            console.log(`‚úÖ –ü–†–û–ô–î–ï–ù: ${testName}`);
        } else {
            console.log(`‚ùå –ü–†–û–í–ê–õ–ï–ù: ${testName}`);
            allTestsPassed = false;
        }
        console.log('');
        return result;
    } catch (error) {
        console.log(`‚ùå –û–®–ò–ë–ö–ê –≤ ${testName}: ${error.message}`);
        allTestsPassed = false;
        console.log('');
        return false;
    }
}

// –¢–µ—Å—Ç 1: TrackObject –∫–ª–∞—Å—Å –Ω–∞—Å–ª–µ–¥—É–µ—Ç THREE.Mesh
runTest('TrackObject –∫–ª–∞—Å—Å –Ω–∞—Å–ª–µ–¥—É–µ—Ç THREE.Mesh', () => {
    const trackObject = new TrackObject(testTrack);
    const isMesh = trackObject instanceof THREE.Mesh;
    const hasTrackData = trackObject.trackData !== undefined;
    const hasOriginalPosition = trackObject.originalPosition !== undefined;
    
    console.log(`  - instanceof THREE.Mesh: ${isMesh}`);
    console.log(`  - –∏–º–µ–µ—Ç trackData: ${hasTrackData}`);
    console.log(`  - –∏–º–µ–µ—Ç originalPosition: ${hasOriginalPosition}`);
    
    trackObject.dispose();
    return isMesh && hasTrackData && hasOriginalPosition;
});

// –¢–µ—Å—Ç 2: –†–∞–∑–ª–∏—á–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
runTest('–†–∞–∑–ª–∏—á–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤', () => {
    const genres = ['metal', 'rock', 'indie', 'pop', 'electronic', 'jazz', 'classical', 'hip-hop'];
    const geometryTypes = new Set();
    
    genres.forEach(genre => {
        const track = { ...testTrack, genre: genre };
        const trackObject = new TrackObject(track);
        const geometryType = trackObject.geometry.constructor.name;
        geometryTypes.add(geometryType);
        
        console.log(`  - ${genre}: ${geometryType}`);
        trackObject.dispose();
    });
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    const hasVariety = geometryTypes.size >= 4;
    console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–π: ${geometryTypes.size}`);
    
    return hasVariety;
});

// –¢–µ—Å—Ç 3: –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
runTest('–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∂–∞–Ω—Ä–∞–º', () => {
    const dataProcessor = new DataProcessor();
    const genreColorTests = [
        { genre: 'metal', expectedColor: '#FF0000' },
        { genre: 'rock', expectedColor: '#FF4500' },
        { genre: 'indie', expectedColor: '#4169E1' },
        { genre: 'pop', expectedColor: '#FFD700' },
        { genre: 'electronic', expectedColor: '#9400D3' }
    ];
    
    let allColorsCorrect = true;
    
    genreColorTests.forEach(test => {
        const actualColor = dataProcessor.getGenreColor(test.genre);
        const isCorrect = actualColor.toLowerCase() === test.expectedColor.toLowerCase();
        
        console.log(`  - ${test.genre}: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${test.expectedColor}, –ø–æ–ª—É—á–µ–Ω ${actualColor} ${isCorrect ? '‚úÖ' : '‚ùå'}`);
        
        if (!isCorrect) {
            allColorsCorrect = false;
        }
    });
    
    return allColorsCorrect;
});

// –¢–µ—Å—Ç 4: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è
runTest('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è', () => {
    const trackObject = new TrackObject(testTrack);
    const material = trackObject.material;
    
    const isMeshStandardMaterial = material instanceof THREE.MeshStandardMaterial;
    const hasMetalness = material.metalness !== undefined;
    const hasRoughness = material.roughness !== undefined;
    const hasEmissive = material.emissive !== undefined;
    const hasEmissiveIntensity = material.emissiveIntensity !== undefined;
    
    console.log(`  - MeshStandardMaterial: ${isMeshStandardMaterial}`);
    console.log(`  - metalness: ${hasMetalness} (${material.metalness})`);
    console.log(`  - roughness: ${hasRoughness} (${material.roughness})`);
    console.log(`  - emissive: ${hasEmissive}`);
    console.log(`  - emissiveIntensity: ${hasEmissiveIntensity} (${material.emissiveIntensity})`);
    
    trackObject.dispose();
    return isMeshStandardMaterial && hasMetalness && hasRoughness && hasEmissive && hasEmissiveIntensity;
});

// –¢–µ—Å—Ç 5: –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
runTest('–ê–ª–≥–æ—Ä–∏—Ç–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è', () => {
    const dataProcessor = new DataProcessor();
    const testTracks = [];
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏
    for (let i = 0; i < 20; i++) {
        testTracks.push({
            id: `test-${i}`,
            name: `Track ${i}`,
            artist: 'Test Artist',
            album: 'Test Album',
            genre: i % 2 === 0 ? 'rock' : 'pop',
            duration: 180 + i * 10,
            popularity: 50 + i * 2,
            previewUrl: undefined,
            imageUrl: undefined,
            playCount: 1000 * i
        });
    }
    
    const processedTracks = dataProcessor.processTrackData(testTracks);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const distances = processedTracks.map(track => track.position.length());
    const minDistance = Math.min(...distances);
    const maxDistance = Math.max(...distances);
    const avgDistance = distances.reduce((sum, d) => sum + d, 0) / distances.length;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const reasonableDistribution = minDistance > 10 && maxDistance < 100 && avgDistance > 20;
    
    console.log(`  - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${minDistance.toFixed(2)}`);
    console.log(`  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${maxDistance.toFixed(2)}`);
    console.log(`  - –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${avgDistance.toFixed(2)}`);
    console.log(`  - –†–∞–∑—É–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${reasonableDistribution}`);
    
    return reasonableDistribution;
});

// –¢–µ—Å—Ç 6: –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
runTest('–ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º TrackObject', () => {
    const trackObject = new TrackObject(testTrack);
    
    // –¢–µ—Å—Ç setHovered
    trackObject.setHovered(true);
    const hoveredWorks = trackObject.isHovered === true;
    
    trackObject.setHovered(false);
    const unhoveredWorks = trackObject.isHovered === false;
    
    // –¢–µ—Å—Ç setSelected
    trackObject.setSelected(true);
    const selectedWorks = trackObject.isSelected === true;
    
    trackObject.setSelected(false);
    const unselectedWorks = trackObject.isSelected === false;
    
    // –¢–µ—Å—Ç getTrackInfo
    const trackInfo = trackObject.getTrackInfo();
    const trackInfoWorks = trackInfo && trackInfo.name && trackInfo.artist && trackInfo.genre;
    
    console.log(`  - setHovered(true): ${hoveredWorks}`);
    console.log(`  - setHovered(false): ${unhoveredWorks}`);
    console.log(`  - setSelected(true): ${selectedWorks}`);
    console.log(`  - setSelected(false): ${unselectedWorks}`);
    console.log(`  - getTrackInfo(): ${trackInfoWorks}`);
    
    trackObject.dispose();
    return hoveredWorks && unhoveredWorks && selectedWorks && unselectedWorks && trackInfoWorks;
});

// –¢–µ—Å—Ç 7: –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
runTest('–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã TrackObject', () => {
    const trackObject = new TrackObject(testTrack);
    const originalPosition = trackObject.position.clone();
    const originalRotation = trackObject.rotation.clone();
    
    // –¢–µ—Å—Ç updateAnimation
    trackObject.updateAnimation(16, Date.now());
    const positionChanged = !trackObject.position.equals(originalPosition);
    const rotationChanged = !trackObject.rotation.equals(originalRotation);
    
    // –¢–µ—Å—Ç updatePulse (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
    trackObject.setSelected(true);
    const originalScale = trackObject.scale.clone();
    trackObject.updatePulse(Date.now());
    const scaleChanged = !trackObject.scale.equals(originalScale);
    
    console.log(`  - updateAnimation –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é: ${positionChanged}`);
    console.log(`  - updateAnimation –∏–∑–º–µ–Ω—è–µ—Ç –≤—Ä–∞—â–µ–Ω–∏–µ: ${rotationChanged}`);
    console.log(`  - updatePulse –∏–∑–º–µ–Ω—è–µ—Ç –º–∞—Å—à—Ç–∞–±: ${scaleChanged}`);
    
    trackObject.dispose();
    return positionChanged && rotationChanged && scaleChanged;
});

// –¢–µ—Å—Ç 8: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
runTest('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (dispose)', () => {
    const trackObject = new TrackObject(testTrack);
    const geometry = trackObject.geometry;
    const material = trackObject.material;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Å—É—Ä—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const hasGeometry = geometry !== undefined;
    const hasMaterial = material !== undefined;
    
    // –í—ã–∑—ã–≤–∞–µ–º dispose
    trackObject.dispose();
    
    console.log(`  - –ì–µ–æ–º–µ—Ç—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${hasGeometry}`);
    console.log(`  - –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${hasMaterial}`);
    console.log(`  - dispose() –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫: true`);
    
    return hasGeometry && hasMaterial;
});

// –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
console.log('=' .repeat(60));
if (allTestsPassed) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('\nüìã –ó–∞–¥–∞—á–∞ 7 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é:');
    console.log('‚úÖ TrackObject –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π THREE.Mesh');
    console.log('‚úÖ –†–∞–∑–ª–∏—á–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ (—Å—Ñ–µ—Ä—ã, –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –∫–æ–Ω—É—Å—ã)');
    console.log('‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–¥–æ–∫—É–º–µ–Ω—Ç—É');
    console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è (MeshStandardMaterial)');
    console.log('‚úÖ –û–±—ä–µ–∫—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤ —Å—Ü–µ–Ω–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
    console.log('‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 2.1, 2.2, 2.3, 2.4, 2.5, 2.6 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
} else {
    console.log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π');
}
console.log('=' .repeat(60));