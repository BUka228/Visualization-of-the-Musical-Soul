/**
 * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ OAuth —Ç–æ–∫–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π OAuth —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ get-real-token.html
 */

// –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –ù–ê–°–¢–û–Ø–©–ò–ô OAUTH –¢–û–ö–ï–ù
const REAL_OAUTH_TOKEN = '–í–°–¢–ê–í–¨–¢–ï_–°–Æ–î–ê_–í–ê–®_–¢–û–ö–ï–ù';

async function testRealToken() {
    console.log('üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ OAuth —Ç–æ–∫–µ–Ω–∞');
    console.log('=====================================');
    
    if (REAL_OAUTH_TOKEN === '–í–°–¢–ê–í–¨–¢–ï_–°–Æ–î–ê_–í–ê–®_–¢–û–ö–ï–ù') {
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ REAL_OAUTH_TOKEN –Ω–∞ –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω!');
        console.log('');
        console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ get-real-token.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        console.log('2. –ü–æ–ª—É—á–∏—Ç–µ OAuth —Ç–æ–∫–µ–Ω –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
        console.log('3. –ó–∞–º–µ–Ω–∏—Ç–µ REAL_OAUTH_TOKEN –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω');
        console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞: node test-token-validation.js');
        return;
    }

    console.log(`–¢–æ–∫–µ–Ω: ${REAL_OAUTH_TOKEN.substring(0, 15)}...`);
    console.log('');

    const https = require('https');

    function makeRequest(url, options = {}) {
        return new Promise((resolve, reject) => {
            const req = https.request(url, options, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const jsonData = JSON.parse(data);
                        resolve({ status: res.statusCode, data: jsonData, headers: res.headers });
                    } catch (error) {
                        resolve({ status: res.statusCode, data: data, headers: res.headers });
                    }
                });
            });
            
            req.on('error', (error) => {
                reject(error);
            });
            
            if (options.body) {
                req.write(options.body);
            }
            
            req.end();
        });
    }

    const headers = {
        'Authorization': `OAuth ${REAL_OAUTH_TOKEN}`,
        'User-Agent': 'Yandex-Music-API/1.0',
        'Content-Type': 'application/json'
    };

    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        const userResponse = await makeRequest('https://api.music.yandex.net/account/status', {
            method: 'GET',
            headers: headers
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${userResponse.status}`);
        
        if (userResponse.status !== 200) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${JSON.stringify(userResponse.data, null, 2)}`);
            console.log('');
            console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('   1. –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (OAuth —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)');
            console.log('   2. –¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é');
            console.log('   3. –¢–æ–∫–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏');
            console.log('');
            console.log('üîÑ –†–µ—à–µ–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ get-real-token.html');
            return;
        }

        const userId = userResponse.data.result?.account?.uid;
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! User ID: ${userId}`);
        console.log(`   –ê–∫–∫–∞—É–Ω—Ç: ${userResponse.data.result?.account?.login || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log('');

        // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤
        console.log('‚ù§Ô∏è –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
        const likesResponse = await makeRequest(`https://api.music.yandex.net/users/${userId}/likes/tracks`, {
            method: 'GET',
            headers: headers
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${likesResponse.status}`);
        
        if (likesResponse.status !== 200) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–æ–≤: ${JSON.stringify(likesResponse.data, null, 2)}`);
            return;
        }

        const trackIds = likesResponse.data.result?.library?.tracks?.map(track => track.id) || [];
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤: ${trackIds.length}`);
        console.log('');

        if (trackIds.length === 0) {
            console.log('   ‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤');
            console.log('   üí° –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ –≤ "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è" –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ');
            return;
        }

        // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö
        console.log('üéµ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö...');
        const testTrackIds = trackIds.slice(0, 10); // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–µ–∫–æ–≤
        console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testTrackIds.length} —Ç—Ä–µ–∫–æ–≤`);

        const tracksResponse = await makeRequest('https://api.music.yandex.net/tracks', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                'track-ids': testTrackIds,
                'with-positions': false
            })
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${tracksResponse.status}`);
        
        if (tracksResponse.status !== 200) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤: ${JSON.stringify(tracksResponse.data, null, 2)}`);
            return;
        }

        const tracks = tracksResponse.data.result || [];
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}`);
        console.log('');

        // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤
        console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤:');
        const availableCount = tracks.filter(t => t.available).length;
        const unavailableCount = tracks.filter(t => !t.available).length;
        const withTitleCount = tracks.filter(t => t.title).length;
        const withArtistsCount = tracks.filter(t => t.artists && t.artists.length > 0).length;
        
        console.log(`   –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}`);
        console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã—Ö: ${availableCount} (${Math.round(availableCount/tracks.length*100)}%)`);
        console.log(`   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: ${unavailableCount} (${Math.round(unavailableCount/tracks.length*100)}%)`);
        console.log(`   –° –Ω–∞–∑–≤–∞–Ω–∏–µ–º: ${withTitleCount}`);
        console.log(`   –° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏: ${withArtistsCount}`);
        console.log('');

        // –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–∫–æ–≤
        console.log('üéº –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–∫–æ–≤:');
        tracks.slice(0, 5).forEach((track, index) => {
            console.log(`   ${index + 1}. "${track.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" - ${track.artists?.map(a => a.name).join(', ') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}`);
            console.log(`      –î–æ—Å—Ç—É–ø–µ–Ω: ${track.available ? '‚úÖ' : '‚ùå'}`);
            console.log(`      –ê–ª—å–±–æ–º: ${track.albums?.[0]?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor((track.durationMs || 0) / 1000)}—Å`);
            console.log('');
        });

        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –≤ –Ω–∞—à–µ–º API
        console.log('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∫–∞–∫ –≤ –Ω–∞—à–µ–º API):');
        
        const processedTracks = tracks
            .map((track) => ({
                id: String(track.id),
                title: track.title || 'Unknown Title',
                artist: track.artists?.map((a) => a.name).join(', ') || 'Unknown Artist',
                album: track.albums?.[0]?.title || 'Unknown Album',
                duration: Math.floor((track.durationMs || 0) / 1000),
                genre: track.albums?.[0]?.genre || 'unknown',
                available: track.available !== false,
            }))
            .filter((track) => track.title && track.artist);

        console.log(`   –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: ${tracks.length}`);
        console.log(`   –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processedTracks.length}`);
        console.log(`   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${tracks.length - processedTracks.length}`);
        console.log('');

        if (processedTracks.length === 0) {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!');
            console.log('   –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–µ–∫–æ–≤');
            console.log('   –ü—Ä–∏—á–∏–Ω—ã:');
            console.log('   - –í—Å–µ —Ç—Ä–µ–∫–∏ –Ω–µ –∏–º–µ—é—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
            console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö API');
            console.log('');
            console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞:');
            if (tracks.length > 0) {
                console.log(JSON.stringify(tracks[0], null, 2));
            }
        } else {
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('   –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤:');
            processedTracks.slice(0, 3).forEach((track, index) => {
                console.log(`   ${index + 1}. "${track.title}" - ${track.artist}`);
            });
        }

        console.log('');
        console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
        if (processedTracks.length > 0) {
            console.log('‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç—Ä–µ–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ');
            console.log(`‚úÖ –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: ${Math.round(processedTracks.length * trackIds.length / testTrackIds.length)}`);
        } else {
            console.log('‚ùå –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç—Ä–µ–∫–æ–≤');
            console.log('üí° –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ API');
        }

    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        console.log('');
        console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   1. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
        console.log('   2. –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
        console.log('   3. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRealToken().then(() => {
    console.log('');
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch((error) => {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { testRealToken };