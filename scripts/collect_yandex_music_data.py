#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É yandex-music
"""

import json
import os
import sys
import datetime
from typing import List, Dict, Any, Optional
from yandex_music import Client
from yandex_music.exceptions import YandexMusicError


def get_token_from_user() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    print("=" * 60)
    print("üéµ –°–ë–û–† –î–ê–ù–ù–´–• –ò–ó –Ø–ù–î–ï–ö–°.–ú–£–ó–´–ö–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    saved_token = load_saved_token()
    if saved_token:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {format_token_for_display(saved_token)}")
        use_saved = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω? (y/n): ").strip().lower()
        if use_saved in ['y', 'yes', '–¥–∞', '']:
            return saved_token
    
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–û–õ–£–ß–ï–ù–ò–Æ –¢–û–ö–ï–ù–ê:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ music.yandex.ru –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12)")
    print("4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: Application ‚Üí Cookies ‚Üí music.yandex.ru")
    print("5. –ù–∞–π–¥–∏—Ç–µ cookie —Å –∏–º–µ–Ω–µ–º 'Session_id'")
    print("6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)")
    print("-" * 60)
    
    token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Session_id: ").strip()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        sys.exit(1)
    
    if len(token) < 20:
        print("‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    save_token(token)
    
    return token

def load_saved_token() -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"""
    try:
        token_file = os.path.join(os.path.dirname(__file__), '.yandex_token')
        if os.path.exists(token_file):
            with open(token_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
            created_at = datetime.datetime.fromisoformat(data['created_at'])
            age_hours = (datetime.datetime.now() - created_at).total_seconds() / 3600
            
            if age_hours < 24:  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
                return data['token']
            else:
                print(f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª ({age_hours:.1f} —á.)")
                return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def save_token(token: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        token_file = os.path.join(os.path.dirname(__file__), '.yandex_token')
        data = {
            'token': token,
            'created_at': datetime.datetime.now().isoformat()
        }
        
        with open(token_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print("üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}")

def format_token_for_display(token: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if len(token) <= 10:
        return token
    
    start = token[:4]
    end = token[-4:]
    middle = '*' * min(12, len(token) - 8)
    
    return f"{start}{middle}{end}"


def extract_genre(track) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∂–∞–Ω—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä –∏–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if track.artists and len(track.artists) > 0:
            artist = track.artists[0]
            if hasattr(artist, 'genres') and artist.genres:
                return artist.genres[0]
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä –∏–∑ –∞–ª—å–±–æ–º–∞
        if track.albums and len(track.albums) > 0:
            album = track.albums[0]
            if hasattr(album, 'genre') and album.genre:
                return album.genre
        
        return "unknown"
    except Exception:
        return "unknown"


def get_cover_url(track) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ —Ç—Ä–µ–∫–∞"""
    try:
        if track.cover_uri:
            # –ó–∞–º–µ–Ω—è–µ–º %% –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return f"https://{track.cover_uri.replace('%%', '400x400')}"
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ –∞–ª—å–±–æ–º–∞
        if track.albums and len(track.albums) > 0:
            album = track.albums[0]
            if hasattr(album, 'cover_uri') and album.cover_uri:
                return f"https://{album.cover_uri.replace('%%', '400x400')}"
        
        return None
    except Exception:
        return None


def get_preview_url(client: Client, track) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç URL 30-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é —Ç—Ä–µ–∫–∞.
    
    –≠—Ç–æ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥.
    """
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ, –≤–∫–ª—é—á–∞—è –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
        # –ú–µ—Ç–æ–¥ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ track –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω, —á–µ–º client.tracks_download_info
        download_info_list = track.get_download_info(get_direct_links=True)
        
        # –ü—Ä–µ–≤—å—é –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π MP3 —Å –Ω–∏–∑–∫–∏–º –±–∏—Ç—Ä–µ–π—Ç–æ–º (<= 192 kbps)
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
        for info in download_info_list:
            if info.codec == 'mp3' and info.bitrate_in_kbps <= 192:
                # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è get_direct_links=True
                print(f"  ‚úÖ –ü—Ä–µ–≤—å—é –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '{track.title}' ({info.bitrate_in_kbps}kbps)")
                return info.direct_link
        
        # –ï—Å–ª–∏ –≤ —Ü–∏–∫–ª–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å
        print(f"  ‚ö†Ô∏è  –ü—Ä–µ–≤—å—é –¥–ª—è —Ç—Ä–µ–∫–∞ '{track.title}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ download_info.")
        return None
        
    except YandexMusicError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é –¥–ª—è '{track.title}': {e}")
        return None
    except Exception as e:
        print(f"  ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é –¥–ª—è '{track.title}': {e}")
        return None


def process_track(client: Client, track) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON"""
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        track_data = {
            "id": str(track.id),
            "title": track.title,
            "artist": track.artists[0].name if track.artists else "Unknown Artist",
            "album": track.albums[0].title if track.albums else "Unknown Album",
            "duration": track.duration_ms // 1000 if track.duration_ms else 0,
            "genre": extract_genre(track),
            "cover_url": get_cover_url(track),
            "preview_url": None,  # –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            "available": track.available if hasattr(track, 'available') else True
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        if track_data["available"]:
            preview_url = get_preview_url(client, track)
            if preview_url:
                track_data["preview_url"] = preview_url
                print(f"  ‚úÖ –ü—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω–æ: {track.title}")
            else:
                print(f"  ‚ö†Ô∏è  –ü—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {track.title}")
        
        return track_data
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        return None


def collect_liked_tracks(token: str) -> List[Dict[str, Any]]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–∞—Ö"""
    try:
        print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ...")
        client = Client(token).init()
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏
        liked_tracks = client.users_likes_tracks()
        if not liked_tracks or not liked_tracks.tracks:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤")
            return []
        
        tracks_data = []
        total_tracks = len(liked_tracks.tracks)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_tracks} –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤")
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤...")
        
        for i, track_short in enumerate(liked_tracks.tracks, 1):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                track = client.tracks([track_short.id])[0]
                
                print(f"[{i}/{total_tracks}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {track.title} - {track.artists[0].name if track.artists else 'Unknown'}")
                
                track_data = process_track(client, track)
                if track_data:
                    tracks_data.append(track_data)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞ {i}: {e}")
                continue
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–≤—å—é
        tracks_with_preview = sum(1 for track in tracks_data if track.get('preview_url'))
        preview_percentage = (tracks_with_preview / len(tracks_data) * 100) if tracks_data else 0
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tracks_data)} —Ç—Ä–µ–∫–æ–≤")
        print(f"üéµ –ü—Ä–µ–≤—å—é –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è {tracks_with_preview} —Ç—Ä–µ–∫–æ–≤ ({preview_percentage:.1f}%)")
        return tracks_data
    
    except YandexMusicError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
        sys.exit(1)
    
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def save_data_to_json(tracks_data: List[Dict[str, Any]], output_file: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        output_data = {
            "metadata": {
                "total_tracks": len(tracks_data),
                "generated_at": __import__('datetime').datetime.now().isoformat(),
                "source": "Yandex Music API"
            },
            "tracks": tracks_data
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
        genres = {}
        for track in tracks_data:
            genre = track.get('genre', 'unknown')
            genres[genre] = genres.get(genre, 0) + 1
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º:")
        for genre, count in sorted(genres.items(), key=lambda x: x[1], reverse=True):
            print(f"  {genre}: {count} —Ç—Ä–µ–∫–æ–≤")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –¥–ª—è Music Galaxy 3D")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        import yandex_music
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ yandex-music –Ω–∞–π–¥–µ–Ω–∞")
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ yandex-music –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install yandex-music")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_token_from_user()
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    tracks_data = collect_liked_tracks(token)
    
    if not tracks_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–∞—Ö")
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    output_file = "src/data/music_data.json"
    save_data_to_json(tracks_data, output_file)
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")


if __name__ == "__main__":
    main()