#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É yandex-music
–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è Music Galaxy 3D
"""

import json
import os
import sys
import datetime
import requests
import time
from pathlib import Path
from typing import List, Dict, Any, Optional
from yandex_music import Client
from yandex_music.exceptions import YandexMusicError


def get_token_from_user() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    print("=" * 60)
    print("üéµ –°–ë–û–† –î–ê–ù–ù–´–• –ò–ó –Ø–ù–î–ï–ö–°.–ú–£–ó–´–ö–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    saved_token = load_saved_token()
    if saved_token:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {format_token_for_display(saved_token)}")
        use_saved = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω? (y/n): ").strip().lower()
        if use_saved in ['y', 'yes', '–¥–∞', '']:
            return saved_token
    
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–û–õ–£–ß–ï–ù–ò–Æ –¢–û–ö–ï–ù–ê:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:")
    print("   https://oauth.yandex.ru/authorize?response_type=token&client_id=23cabbbdc6cd418abb4b39c32c41195d")
    print("2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø")
    print("3. –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ –∞–¥—Ä–µ—Å –≤–∏–¥–∞:")
    print("   https://music.yandex.ru/#access_token=****&token_type=bearer&expires_in=31535645")
    print("4. –û–ß–ï–ù–¨ –ë–´–°–¢–†–û –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!")
    print("5. –£—Å–ø–µ–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ 'access_token='")
    print("-" * 60)
    
    token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω access_token: ").strip()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        sys.exit(1)
    
    if len(token) < 20:
        print("‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    save_token(token)
    
    return token

def load_saved_token() -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç Electron
        temp_token_file = os.path.join(os.path.dirname(__file__), '.temp_token')
        if os.path.exists(temp_token_file):
            with open(temp_token_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data['token']
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        token_file = os.path.join(os.path.dirname(__file__), '.yandex_token')
        if os.path.exists(token_file):
            with open(token_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
            created_at = datetime.datetime.fromisoformat(data['created_at'])
            age_hours = (datetime.datetime.now() - created_at).total_seconds() / 3600
            
            if age_hours < 24:  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
                return data['token']
            else:
                print(f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª ({age_hours:.1f} —á.)")
                return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def save_token(token: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        token_file = os.path.join(os.path.dirname(__file__), '.yandex_token')
        data = {
            'token': token,
            'created_at': datetime.datetime.now().isoformat()
        }
        
        with open(token_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print("üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}")

def format_token_for_display(token: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if len(token) <= 10:
        return token
    
    start = token[:4]
    end = token[-4:]
    middle = '*' * min(12, len(token) - 8)
    
    return f"{start}{middle}{end}"


def extract_genre(track) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∂–∞–Ω—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä –∏–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if track.artists and len(track.artists) > 0:
            artist = track.artists[0]
            if hasattr(artist, 'genres') and artist.genres:
                return artist.genres[0]
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä –∏–∑ –∞–ª—å–±–æ–º–∞
        if track.albums and len(track.albums) > 0:
            album = track.albums[0]
            if hasattr(album, 'genre') and album.genre:
                return album.genre
        
        return "unknown"
    except Exception:
        return "unknown"


def get_cover_url(track) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ —Ç—Ä–µ–∫–∞"""
    try:
        if track.cover_uri:
            # –ó–∞–º–µ–Ω—è–µ–º %% –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return f"https://{track.cover_uri.replace('%%', '400x400')}"
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫—É –∏–∑ –∞–ª—å–±–æ–º–∞
        if track.albums and len(track.albums) > 0:
            album = track.albums[0]
            if hasattr(album, 'cover_uri') and album.cover_uri:
                return f"https://{album.cover_uri.replace('%%', '400x400')}"
        
        return None
    except Exception:
        return None


def get_download_url(client: Client, track) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
        download_info_list = track.get_download_info(get_direct_links=True)
        
        # –ò—â–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3
        best_quality = None
        for info in download_info_list:
            if info.codec == 'mp3':
                if best_quality is None or info.bitrate_in_kbps > best_quality.bitrate_in_kbps:
                    best_quality = info
        
        if best_quality:
            print(f"  ‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: '{track.title}' ({best_quality.bitrate_in_kbps}kbps)")
            return best_quality.direct_link
        
        print(f"  ‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: '{track.title}'")
        return None
        
    except YandexMusicError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è '{track.title}': {e}")
        return None
    except Exception as e:
        print(f"  ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è '{track.title}': {e}")
        return None


def sanitize_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏
    filename = filename.strip('. ')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 100:
        filename = filename[:100]
    
    return filename


def download_track(url: str, output_path: str, track_title: str) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –ø–æ URL"""
    try:
        print(f"  üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {track_title}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        response = requests.get(url, stream=True, timeout=30)
        response.raise_for_status()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(output_path)
        if file_size < 1024:  # –ú–µ–Ω—å—à–µ 1KB - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            print(f"  ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {file_size} –±–∞–π—Ç")
            os.remove(output_path)
            return False
        
        print(f"  ‚úÖ –°–∫–∞—á–∞–Ω–æ: {track_title} ({file_size // 1024} KB)")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {track_title}: {e}")
        return False
    except Exception as e:
        print(f"  ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {track_title}: {e}")
        return False


def create_output_structure(output_dir: str) -> tuple[str, str]:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è Music Galaxy 3D"""
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—É–¥–∏–æ
    audio_path = output_path / "audio"
    audio_path.mkdir(exist_ok=True)
    
    metadata_file = output_path / "metadata.json"
    
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:")
    print(f"  üìÇ {output_path}")
    print(f"  üìÇ {audio_path}")
    print(f"  üìÑ {metadata_file}")
    
    return str(metadata_file), str(audio_path)


def process_track(client: Client, track, audio_dir: str, download_audio: bool = True) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON"""
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        track_data = {
            "id": str(track.id),
            "title": track.title,
            "artist": track.artists[0].name if track.artists else "Unknown Artist",
            "album": track.albums[0].title if track.albums else "Unknown Album",
            "duration": track.duration_ms // 1000 if track.duration_ms else 0,
            "genre": extract_genre(track),
            "cover_url": get_cover_url(track),
            "available": track.available if hasattr(track, 'available') else True
        }
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if download_audio and track_data["available"]:
            download_url = get_download_url(client, track)
            if download_url:
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                audio_filename = f"{track_data['id']}.mp3"
                audio_path = os.path.join(audio_dir, audio_filename)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
                if download_track(download_url, audio_path, track_data['title']):
                    print(f"  ‚úÖ –¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω: {track.title}")
                else:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {track.title}")
                    track_data["available"] = False
            else:
                print(f"  ‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {track.title}")
                track_data["available"] = False
        
        return track_data
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        return None


def collect_liked_tracks(token: str, output_dir: str, download_audio: bool = True) -> List[Dict[str, Any]]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–∞—Ö –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Ö"""
    try:
        print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ...")
        client = Client(token).init()
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏
        liked_tracks = client.users_likes_tracks()
        if not liked_tracks or not liked_tracks.tracks:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤")
            return []
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        metadata_file, audio_dir = create_output_structure(output_dir)
        
        tracks_data = []
        total_tracks = len(liked_tracks.tracks)
        downloaded_count = 0
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_tracks} –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤")
        if download_audio:
            print("üéµ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤...")
        else:
            print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        
        for i, track_short in enumerate(liked_tracks.tracks, 1):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                track = client.tracks([track_short.id])[0]
                
                print(f"\n[{i}/{total_tracks}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {track.title} - {track.artists[0].name if track.artists else 'Unknown'}")
                
                track_data = process_track(client, track, audio_dir, download_audio)
                if track_data:
                    tracks_data.append(track_data)
                    if download_audio and track_data.get('available', False):
                        downloaded_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.5)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞ {i}: {e}")
                continue
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        available_tracks = sum(1 for track in tracks_data if track.get('available', False))
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tracks_data)} —Ç—Ä–µ–∫–æ–≤")
        if download_audio:
            print(f"üéµ –°–∫–∞—á–∞–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {downloaded_count}")
            print(f"üìÅ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {available_tracks} —Ç—Ä–µ–∫–æ–≤")
        
        return tracks_data
    
    except YandexMusicError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
        sys.exit(1)
    
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def save_data_to_json(tracks_data: List[Dict[str, Any]], output_file: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        output_data = {
            "metadata": {
                "total_tracks": len(tracks_data),
                "generated_at": __import__('datetime').datetime.now().isoformat(),
                "source": "Yandex Music API"
            },
            "tracks": tracks_data
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
        genres = {}
        for track in tracks_data:
            genre = track.get('genre', 'unknown')
            genres[genre] = genres.get(genre, 0) + 1
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º:")
        for genre, count in sorted(genres.items(), key=lambda x: x[1], reverse=True):
            print(f"  {genre}: {count} —Ç—Ä–µ–∫–æ–≤")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)


def get_output_directory() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüìÅ –í–´–ë–û–† –ü–ê–ü–ö–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø:")
    print("–ì–¥–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é?")
    print("1. –í —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ (./music_collection)")
    print("2. –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2): ").strip()
    
    if choice == "1" or choice == "":
        output_dir = os.path.join(os.getcwd(), "music_collection")
        print(f"üìÇ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")
        return output_dir
    elif choice == "2":
        custom_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ").strip()
        if not custom_path:
            print("‚ùå –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return get_output_directory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π
        try:
            os.makedirs(custom_path, exist_ok=True)
            print(f"üìÇ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {custom_path}")
            return custom_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return get_output_directory()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return get_output_directory()


def ask_download_preference() -> bool:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"""
    print("\nüéµ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ê–£–î–ò–û–§–ê–ô–õ–û–í:")
    print("–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Ç—Ä–µ–∫–æ–≤?")
    print("‚úÖ –î–∞ - –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞)")
    print("‚ùå –ù–µ—Ç - —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –±–µ–∑ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)")
    
    choice = input("–°–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ? (y/n): ").strip().lower()
    
    if choice in ['y', 'yes', '–¥–∞', '']:
        print("üéµ –ë—É–¥—É—Ç —Å–∫–∞—á–∞–Ω—ã –ø–æ–ª–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã")
        return True
    else:
        print("üìÑ –ë—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –¥–ª—è Music Galaxy 3D")
    print("=" * 60)
    print("–°–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import yandex_music
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ yandex-music –Ω–∞–π–¥–µ–Ω–∞")
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ yandex-music –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install yandex-music")
        sys.exit(1)
    
    try:
        import requests
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–∞–π–¥–µ–Ω–∞")
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install requests")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token = get_token_from_user()
    output_dir = get_output_directory()
    download_audio = ask_download_preference()
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
    tracks_data = collect_liked_tracks(token, output_dir, download_audio)
    
    if not tracks_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–∞—Ö")
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
    metadata_file = os.path.join(output_dir, "metadata.json")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è metadata.json
    metadata = {
        "metadata": {
            "total_tracks": len(tracks_data),
            "generated_at": datetime.datetime.now().isoformat(),
            "source": "Yandex Music API with Local Files"
        },
        "tracks": tracks_data
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º metadata.json
    with open(metadata_file, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_file}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
    genres = {}
    for track in tracks_data:
        genre = track.get('genre', 'unknown')
        genres[genre] = genres.get(genre, 0) + 1
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º:")
    for genre, count in sorted(genres.items(), key=lambda x: x[1], reverse=True):
        print(f"  {genre}: {count} —Ç—Ä–µ–∫–æ–≤")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    available_tracks = sum(1 for track in tracks_data if track.get('available', False))
    
    print("\n" + "=" * 60)
    print("üéâ –ì–û–¢–û–í–û!")
    print("=" * 60)
    print(f"üìÇ –ü–∞–ø–∫–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π: {output_dir}")
    print(f"üìÑ –§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: metadata.json")
    if download_audio:
        print(f"üìÅ –ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ: audio/")
        print(f"üéµ –°–∫–∞—á–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: {available_tracks}")
    print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {len(tracks_data)}")
    print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø–∞–ø–∫—É –≤ Music Galaxy 3D!")
    print("   –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")


if __name__ == "__main__":
    main()