// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç Yandex Music API
async function testYandexMusicAPIFixed() {
    console.log('üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Music API –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    const token = 'y0_AgAAAAAj2vgeAAG8XgAAAAEJa-6RAAAdPHm_OlpI_4ludZXEeCSbWupQkA';
    const headers = {
        'Authorization': `OAuth ${token}`,
        'User-Agent': 'Yandex-Music-API/1.0',
        'Content-Type': 'application/json'
    };

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        const userResponse = await fetch('https://api.music.yandex.net/account/status', {
            method: 'GET', 
            headers: headers
        });
        console.log('–°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', userResponse.status);
        
        if (userResponse.ok) {
            const userData = await userResponse.json();
            const userId = userData.result?.account?.uid;
            console.log('‚úÖ User ID:', userId);
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤
            console.log('‚ù§Ô∏è –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
            const likesResponse = await fetch(`https://api.music.yandex.net/users/${userId}/likes/tracks`, {
                method: 'GET', 
                headers: headers
            });
            
            if (likesResponse.ok) {
                const likesData = await likesResponse.json();
                const trackIds = likesData.result?.library?.tracks?.map(track => track.id) || [];
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤:', trackIds.length);
                
                if (trackIds.length > 0) {
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–∫–æ–≤
                    console.log('üéµ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–∫–æ–≤...');
                    
                    const testTrackIds = trackIds.slice(0, 3);
                    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏:', testTrackIds);
                    
                    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
                    console.log('üîß –í–∞—Ä–∏–∞–Ω—Ç 1: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫...');
                    try {
                        const tracksResponse1 = await fetch('https://api.music.yandex.net/tracks', {
                            method: 'POST', 
                            headers: headers,
                            body: JSON.stringify(testTrackIds)
                        });
                        console.log('–°—Ç–∞—Ç—É—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1:', tracksResponse1.status);
                        
                        if (tracksResponse1.ok) {
                            const tracksData1 = await tracksResponse1.json();
                            const tracks1 = tracksData1.result || [];
                            console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1 —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:', tracks1.length);
                            console.log('–î–æ—Å—Ç—É–ø–Ω—ã—Ö:', tracks1.filter(t => t.available).length);
                            console.log('–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö:', tracks1.filter(t => !t.available).length);
                            console.log('–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫–∞:', tracks1[0]);
                            return tracks1; // –£—Å–ø–µ—Ö!
                        } else {
                            const errorText1 = await tracksResponse1.text();
                            console.log('‚ùå –í–∞—Ä–∏–∞–Ω—Ç 1 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', errorText1);
                        }
                    } catch (error1) {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1:', error1.message);
                    }
                    
                    // –í–∞—Ä–∏–∞–Ω—Ç 2: –û–±—ä–µ–∫—Ç —Å track-ids
                    console.log('üîß –í–∞—Ä–∏–∞–Ω—Ç 2: –û–±—ä–µ–∫—Ç —Å track-ids...');
                    try {
                        const tracksResponse2 = await fetch('https://api.music.yandex.net/tracks', {
                            method: 'POST', 
                            headers: headers,
                            body: JSON.stringify({
                                'track-ids': testTrackIds,
                                'with-positions': false
                            })
                        });
                        console.log('–°—Ç–∞—Ç—É—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2:', tracksResponse2.status);
                        
                        if (tracksResponse2.ok) {
                            const tracksData2 = await tracksResponse2.json();
                            const tracks2 = tracksData2.result || [];
                            console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2 —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:', tracks2.length);
                            console.log('–î–æ—Å—Ç—É–ø–Ω—ã—Ö:', tracks2.filter(t => t.available).length);
                            console.log('–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö:', tracks2.filter(t => !t.available).length);
                            console.log('–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫–∞:', tracks2[0]);
                            return tracks2; // –£—Å–ø–µ—Ö!
                        } else {
                            const errorText2 = await tracksResponse2.text();
                            console.log('‚ùå –í–∞—Ä–∏–∞–Ω—Ç 2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', errorText2);
                        }
                    } catch (error2) {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2:', error2.message);
                    }
                    
                    // –í–∞—Ä–∏–∞–Ω—Ç 3: GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    console.log('üîß –í–∞—Ä–∏–∞–Ω—Ç 3: GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...');
                    try {
                        const trackIdsParam = testTrackIds.join(',');
                        const tracksResponse3 = await fetch(`https://api.music.yandex.net/tracks?track-ids=${trackIdsParam}`, {
                            method: 'GET', 
                            headers: headers
                        });
                        console.log('–°—Ç–∞—Ç—É—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ 3:', tracksResponse3.status);
                        
                        if (tracksResponse3.ok) {
                            const tracksData3 = await tracksResponse3.json();
                            const tracks3 = tracksData3.result || [];
                            console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 3 —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:', tracks3.length);
                            console.log('–î–æ—Å—Ç—É–ø–Ω—ã—Ö:', tracks3.filter(t => t.available).length);
                            console.log('–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö:', tracks3.filter(t => !t.available).length);
                            console.log('–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫–∞:', tracks3[0]);
                            return tracks3; // –£—Å–ø–µ—Ö!
                        } else {
                            const errorText3 = await tracksResponse3.text();
                            console.log('‚ùå –í–∞—Ä–∏–∞–Ω—Ç 3 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', errorText3);
                        }
                    } catch (error3) {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 3:', error3.message);
                    }
                    
                    // –í–∞—Ä–∏–∞–Ω—Ç 4: –û—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
                    console.log('üîß –í–∞—Ä–∏–∞–Ω—Ç 4: –û—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞...');
                    try {
                        const singleTrackId = testTrackIds[0];
                        const singleTrackResponse = await fetch(`https://api.music.yandex.net/tracks/${singleTrackId}`, {
                            method: 'GET', 
                            headers: headers
                        });
                        console.log('–°—Ç–∞—Ç—É—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4 (–æ–¥–∏–Ω —Ç—Ä–µ–∫):', singleTrackResponse.status);
                        
                        if (singleTrackResponse.ok) {
                            const singleTrackData = await singleTrackResponse.json();
                            console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 4 —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞:', singleTrackData);
                            return [singleTrackData.result]; // –£—Å–ø–µ—Ö!
                        } else {
                            const errorText4 = await singleTrackResponse.text();
                            console.log('‚ùå –í–∞—Ä–∏–∞–Ω—Ç 4 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', errorText4);
                        }
                    } catch (error4) {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4:', error4.message);
                    }
                    
                    // –í–∞—Ä–∏–∞–Ω—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ID —Ç—Ä–µ–∫–æ–≤
                    console.log('üîç –í–∞—Ä–∏–∞–Ω—Ç 5: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ID —Ç—Ä–µ–∫–æ–≤...');
                    console.log('–ü–µ—Ä–≤—ã–µ 5 ID —Ç—Ä–µ–∫–æ–≤:', trackIds.slice(0, 5));
                    console.log('–¢–∏–ø—ã ID:', trackIds.slice(0, 5).map(id => typeof id));
                    console.log('–ü—Ä–∏–º–µ—Ä—ã ID:', trackIds.slice(0, 5).map(id => `"${id}"`));
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å —á–∏—Å–ª–æ–≤—ã–º–∏ ID
                    const numericIds = testTrackIds.map(id => parseInt(id));
                    console.log('–ß–∏—Å–ª–æ–≤—ã–µ ID:', numericIds);
                    
                    try {
                        const tracksResponse5 = await fetch('https://api.music.yandex.net/tracks', {
                            method: 'POST', 
                            headers: headers,
                            body: JSON.stringify(numericIds)
                        });
                        console.log('–°—Ç–∞—Ç—É—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ 5 (—á–∏—Å–ª–æ–≤—ã–µ ID):', tracksResponse5.status);
                        
                        if (tracksResponse5.ok) {
                            const tracksData5 = await tracksResponse5.json();
                            const tracks5 = tracksData5.result || [];
                            console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 5 —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:', tracks5.length);
                            return tracks5; // –£—Å–ø–µ—Ö!
                        } else {
                            const errorText5 = await tracksResponse5.text();
                            console.log('‚ùå –í–∞—Ä–∏–∞–Ω—Ç 5 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', errorText5);
                        }
                    } catch (error5) {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 5:', error5.message);
                    }
                    
                    console.log('‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª—Å—è API.');
                }
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–æ–≤:', likesResponse.status);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', userResponse.status);
        }
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
testYandexMusicAPIFixed();