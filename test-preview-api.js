/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
 */

const https = require('https');

const OAUTH_TOKEN = 'y0_AgAAAAAj2vgeAAG8XgAAAAEJa-6RAAAdPHm_OlpI_4ludZXEeCSbWupQkA';

function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const req = https.request(url, options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({ status: res.statusCode, data: jsonData, headers: res.headers });
                } catch (error) {
                    resolve({ status: res.statusCode, data: data, headers: res.headers });
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

async function testPreviewAPI() {
    console.log('üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ');
    console.log('====================================================');
    console.log(`OAuth —Ç–æ–∫–µ–Ω: ${OAUTH_TOKEN.substring(0, 20)}...`);
    console.log('');

    const baseURL = 'https://api.music.yandex.net';
    const headers = {
        'Authorization': `OAuth ${OAUTH_TOKEN}`,
        'User-Agent': 'Yandex-Music-API/1.0',
        'Content-Type': 'application/json'
    };

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
        const userResponse = await makeRequest(`${baseURL}/account/status`, {
            method: 'GET',
            headers
        });

        if (userResponse.status !== 200) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', userResponse.status);
            return;
        }

        const userId = userResponse.data.result.account.uid;
        console.log(`‚úÖ User ID: ${userId}`);

        // –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏
        console.log('‚ù§Ô∏è –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
        const likesResponse = await makeRequest(`${baseURL}/users/${userId}/likes/tracks`, {
            method: 'GET',
            headers
        });

        if (likesResponse.status !== 200) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–æ–≤:', likesResponse.status);
            return;
        }

        const trackIds = likesResponse.data.result.library.tracks.map(track => track.id);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤: ${trackIds.length}`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç—Ä–µ–∫–æ–≤
        console.log('üîç –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ download-info endpoint...');
        const testTrackIds = trackIds.slice(0, 3);
        
        for (let i = 0; i < testTrackIds.length; i++) {
            const trackId = testTrackIds[i];
            console.log(`\nüéµ –¢—Ä–µ–∫ ${i + 1}: ID ${trackId}`);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                const trackResponse = await makeRequest(`${baseURL}/tracks?track-ids=${trackId}`, {
                    method: 'GET',
                    headers
                });

                if (trackResponse.status === 200) {
                    const track = trackResponse.data.result[0];
                    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${track.title}" - ${track.artists?.map(a => a.name).join(', ')}`);
                    console.log(`   –î–æ—Å—Ç—É–ø–µ–Ω: ${track.available}`);
                } else {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: ${trackResponse.status}`);
                    continue;
                }

                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å download info
                console.log('   üîó –ü–æ–ª—É—á–µ–Ω–∏–µ download-info...');
                const downloadResponse = await makeRequest(`${baseURL}/tracks/${trackId}/download-info`, {
                    method: 'GET',
                    headers
                });

                console.log(`   –°—Ç–∞—Ç—É—Å download-info: ${downloadResponse.status}`);

                if (downloadResponse.status === 200) {
                    const downloadInfo = downloadResponse.data.result;
                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: ${downloadInfo.length}`);
                    
                    downloadInfo.forEach((info, index) => {
                        console.log(`     ${index + 1}. ${info.codec} ${info.bitrateInKbps}kbps - ${info.downloadInfoUrl ? '–µ—Å—Ç—å URL' : '–Ω–µ—Ç URL'}`);
                    });

                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    if (downloadInfo.length > 0 && downloadInfo[0].downloadInfoUrl) {
                        console.log('   üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏...');
                        
                        try {
                            const directLinkResponse = await makeRequest(downloadInfo[0].downloadInfoUrl, {
                                method: 'GET',
                                headers
                            });

                            console.log(`   –°—Ç–∞—Ç—É—Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: ${directLinkResponse.status}`);
                            
                            if (directLinkResponse.status === 200) {
                                console.log('   ‚úÖ –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', directLinkResponse.data);
                            } else {
                                console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏');
                            }
                        } catch (directLinkError) {
                            console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏:', directLinkError.message);
                        }
                    }
                } else {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ download-info: ${downloadResponse.status}`);
                    if (downloadResponse.data) {
                        console.log('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(downloadResponse.data, null, 2));
                    }
                }

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 500));

            } catch (trackError) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞: ${trackError.message}`);
            }
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
        console.log('\nüîÑ –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é...');
        
        // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ /tracks/{id}/supplement
        console.log('üß™ –°–ø–æ—Å–æ–± 1: /tracks/{id}/supplement');
        try {
            const supplementResponse = await makeRequest(`${baseURL}/tracks/${testTrackIds[0]}/supplement`, {
                method: 'GET',
                headers
            });
            
            console.log(`–°—Ç–∞—Ç—É—Å supplement: ${supplementResponse.status}`);
            if (supplementResponse.status === 200) {
                console.log('Supplement –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(supplementResponse.data, null, 2));
            }
        } catch (supplementError) {
            console.log('–û—à–∏–±–∫–∞ supplement:', supplementError.message);
        }

        // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ /tracks/{id}/similar
        console.log('\nüß™ –°–ø–æ—Å–æ–± 2: /tracks/{id}/similar');
        try {
            const similarResponse = await makeRequest(`${baseURL}/tracks/${testTrackIds[0]}/similar`, {
                method: 'GET',
                headers
            });
            
            console.log(`–°—Ç–∞—Ç—É—Å similar: ${similarResponse.status}`);
            if (similarResponse.status === 200) {
                console.log('Similar –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 2):', JSON.stringify(similarResponse.data.result?.similarTracks?.slice(0, 2), null, 2));
            }
        } catch (similarError) {
            console.log('–û—à–∏–±–∫–∞ similar:', similarError.message);
        }

    } catch (error) {
        console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testPreviewAPI().then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch((error) => {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});