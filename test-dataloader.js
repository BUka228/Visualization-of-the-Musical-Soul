// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
fetch('/src/data/demo_data.json')
  .then(response => {
    console.log('üìÇ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ:', response.ok ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    return response.json();
  })
  .then(data => {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:');
    console.log(`  - –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${data.tracks.length}`);
    console.log(`  - –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.metadata.source}`);
    
    const tracksWithPreview = data.tracks.filter(t => t.preview_url && t.preview_url !== null);
    console.log(`  - –¢—Ä–µ–∫–æ–≤ —Å –ø—Ä–µ–≤—å—é: ${tracksWithPreview.length}/${data.tracks.length}`);
    
    // –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
    if (data.tracks.length > 0) {
      const firstTrack = data.tracks[0];
      console.log('üéµ –ü–µ—Ä–≤—ã–π —Ç—Ä–µ–∫:');
      console.log(`  - –ù–∞–∑–≤–∞–Ω–∏–µ: ${firstTrack.title}`);
      console.log(`  - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${firstTrack.artist}`);
      console.log(`  - –ü—Ä–µ–≤—å—é: ${firstTrack.preview_url ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
      
      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
      if (firstTrack.preview_url) {
        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ...');
        const audio = new Audio();
        audio.crossOrigin = 'anonymous';
        
        audio.addEventListener('loadstart', () => {
          console.log('üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
        });
        
        audio.addEventListener('canplay', () => {
          console.log('‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
          console.log(`  - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audio.duration}—Å`);
        });
        
        audio.addEventListener('error', (e) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', e);
          const error = audio.error;
          if (error) {
            console.error(`  - –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
            console.error(`  - –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
          }
        });
        
        audio.src = firstTrack.preview_url;
        audio.load();
      }
    }
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error);
  });

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
fetch('/src/data/music_data.json')
  .then(response => {
    console.log('üìÇ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', response.ok ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    if (response.ok) {
      return response.json();
    } else {
      throw new Error('–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  })
  .then(data => {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`  - –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${data.tracks.length}`);
    console.log(`  - –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.metadata.source}`);
    console.log(`  - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${data.metadata.generated_at}`);
    
    const tracksWithPreview = data.tracks.filter(t => t.preview_url && t.preview_url !== null);
    const previewPercentage = ((tracksWithPreview.length / data.tracks.length) * 100).toFixed(1);
    console.log(`  - –¢—Ä–µ–∫–æ–≤ —Å –ø—Ä–µ–≤—å—é: ${tracksWithPreview.length}/${data.tracks.length} (${previewPercentage}%)`);
    
    // –ê–Ω–∞–ª–∏–∑ –∂–∞–Ω—Ä–æ–≤
    const genres = {};
    data.tracks.forEach(track => {
      genres[track.genre] = (genres[track.genre] || 0) + 1;
    });
    console.log('üé≠ –ñ–∞–Ω—Ä—ã:', Object.keys(genres).length);
    Object.entries(genres)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .forEach(([genre, count]) => {
        console.log(`  - ${genre}: ${count} —Ç—Ä–µ–∫–æ–≤`);
      });
  })
  .catch(error => {
    console.log('‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
  });

console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');