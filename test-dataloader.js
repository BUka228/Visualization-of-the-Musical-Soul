/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç DataLoader –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
 */

// –ò–º–∏—Ç–∏—Ä—É–µ–º fetch API –¥–ª—è Node.js
const fs = require('fs');
const path = require('path');

global.fetch = async function(url) {
    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –≤ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        let filePath;
        if (url.includes('music_data.json')) {
            filePath = path.join(__dirname, 'src', 'data', 'music_data.json');
        } else if (url.includes('demo_data.json')) {
            filePath = path.join(__dirname, 'src', 'data', 'demo_data.json');
        } else {
            throw new Error('Unknown URL');
        }

        const data = fs.readFileSync(filePath, 'utf8');
        
        return {
            ok: true,
            json: async () => JSON.parse(data)
        };
    } catch (error) {
        return {
            ok: false,
            status: 404
        };
    }
};

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testDataLoader() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataLoader...\n');

    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        console.log('üìÅ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö');
        
        const musicDataExists = fs.existsSync(path.join(__dirname, 'src', 'data', 'music_data.json'));
        const demoDataExists = fs.existsSync(path.join(__dirname, 'src', 'data', 'demo_data.json'));
        
        console.log(`   music_data.json: ${musicDataExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`   demo_data.json: ${demoDataExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);

        // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüìä –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
        
        if (musicDataExists) {
            const musicData = JSON.parse(fs.readFileSync(path.join(__dirname, 'src', 'data', 'music_data.json'), 'utf8'));
            console.log(`   –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${musicData.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
            console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${musicData.metadata.source}`);
            console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${new Date(musicData.metadata.generated_at).toLocaleString('ru')}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
            if (musicData.tracks.length > 0) {
                const firstTrack = musicData.tracks[0];
                console.log(`   –ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫–∞: "${firstTrack.title}" - ${firstTrack.artist} (${firstTrack.genre})`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                const requiredFields = ['id', 'title', 'artist', 'album', 'duration', 'genre', 'available'];
                const missingFields = requiredFields.filter(field => !(field in firstTrack));
                
                if (missingFields.length === 0) {
                    console.log('   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
                } else {
                    console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`);
                }
            }
        }

        if (demoDataExists) {
            const demoData = JSON.parse(fs.readFileSync(path.join(__dirname, 'src', 'data', 'demo_data.json'), 'utf8'));
            console.log(`   –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ: ${demoData.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
        }

        // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
        console.log('\nüé≠ –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∂–∞–Ω—Ä–æ–≤');
        
        if (musicDataExists) {
            const musicData = JSON.parse(fs.readFileSync(path.join(__dirname, 'src', 'data', 'music_data.json'), 'utf8'));
            const genres = {};
            
            musicData.tracks.forEach(track => {
                const genre = track.genre || 'unknown';
                genres[genre] = (genres[genre] || 0) + 1;
            });
            
            const sortedGenres = Object.entries(genres)
                .sort(([,a], [,b]) => b - a)
                .slice(0, 10); // –¢–æ–ø-10 –∂–∞–Ω—Ä–æ–≤
            
            console.log('   –¢–æ–ø-10 –∂–∞–Ω—Ä–æ–≤:');
            sortedGenres.forEach(([genre, count], index) => {
                const percentage = ((count / musicData.tracks.length) * 100).toFixed(1);
                console.log(`   ${index + 1}. ${genre}: ${count} —Ç—Ä–µ–∫–æ–≤ (${percentage}%)`);
            });
        }

        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüïí –¢–µ—Å—Ç 4: –°–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö');
        
        if (musicDataExists) {
            const musicData = JSON.parse(fs.readFileSync(path.join(__dirname, 'src', 'data', 'music_data.json'), 'utf8'));
            const generatedAt = new Date(musicData.metadata.generated_at);
            const now = new Date();
            const hoursDiff = (now.getTime() - generatedAt.getTime()) / (1000 * 60 * 60);
            
            console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${generatedAt.toLocaleString('ru')}`);
            console.log(`   –í–æ–∑—Ä–∞—Å—Ç: ${hoursDiff.toFixed(1)} —á–∞—Å–æ–≤`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${hoursDiff < 24 ? '‚úÖ –°–≤–µ–∂–∏–µ' : '‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–ª–∏'}`);
        }

        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–≤—å—é
        console.log('\nüéµ –¢–µ—Å—Ç 5: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—å—é');
        
        if (musicDataExists) {
            const musicData = JSON.parse(fs.readFileSync(path.join(__dirname, 'src', 'data', 'music_data.json'), 'utf8'));
            const tracksWithPreview = musicData.tracks.filter(track => track.preview_url).length;
            const tracksWithCover = musicData.tracks.filter(track => track.cover_url).length;
            
            console.log(`   –¢—Ä–µ–∫–∏ —Å –ø—Ä–µ–≤—å—é: ${tracksWithPreview}/${musicData.tracks.length} (${((tracksWithPreview/musicData.tracks.length)*100).toFixed(1)}%)`);
            console.log(`   –¢—Ä–µ–∫–∏ —Å –æ–±–ª–æ–∂–∫–∞–º–∏: ${tracksWithCover}/${musicData.tracks.length} (${((tracksWithCover/musicData.tracks.length)*100).toFixed(1)}%)`);
        }

        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
        console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
        console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: npm run collect-data');
        console.log('3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
        console.log('4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDataLoader();